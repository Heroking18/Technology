
FreeRTOS_Assignment_Part_1_Andre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a0  080079a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080079a0  080079a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a0  080079a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00005d60  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005dec  20005dec  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a426  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003131  00000000  00000000  0003a4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0003d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035fb  00000000  00000000  0003fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000179e2  00000000  00000000  000431fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4279  00000000  00000000  0005abdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ee56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005544  00000000  00000000  0012eea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007778 	.word	0x08007778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08007778 	.word	0x08007778

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 	//enable the bus for port A.
 80001e6:	4b42      	ldr	r3, [pc, #264]	; (80002f0 <main+0x110>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a41      	ldr	r2, [pc, #260]	; (80002f0 <main+0x110>)
 80001ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f0:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; 	//enable the bus for port B.
 80001f2:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <main+0x110>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a3e      	ldr	r2, [pc, #248]	; (80002f0 <main+0x110>)
 80001f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001fc:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; 	//enable the bus for port C.
 80001fe:	4b3c      	ldr	r3, [pc, #240]	; (80002f0 <main+0x110>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	4a3b      	ldr	r2, [pc, #236]	; (80002f0 <main+0x110>)
 8000204:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000208:	6153      	str	r3, [r2, #20]

	SetPin(GPIOC, 7, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); 	// (PC7) LED0
 800020a:	2300      	movs	r3, #0
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	2300      	movs	r3, #0
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2300      	movs	r3, #0
 8000214:	2201      	movs	r2, #1
 8000216:	2107      	movs	r1, #7
 8000218:	4836      	ldr	r0, [pc, #216]	; (80002f4 <main+0x114>)
 800021a:	f000 f9ee 	bl	80005fa <SetPin>
	SetPin(GPIOB, 5, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); 	// (PB5) LED1
 800021e:	2300      	movs	r3, #0
 8000220:	9301      	str	r3, [sp, #4]
 8000222:	2300      	movs	r3, #0
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2300      	movs	r3, #0
 8000228:	2201      	movs	r2, #1
 800022a:	2105      	movs	r1, #5
 800022c:	4832      	ldr	r0, [pc, #200]	; (80002f8 <main+0x118>)
 800022e:	f000 f9e4 	bl	80005fa <SetPin>
	SetPin(GPIOA, 10, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); 	// (PA10) LED2
 8000232:	2300      	movs	r3, #0
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	2300      	movs	r3, #0
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	2201      	movs	r2, #1
 800023e:	210a      	movs	r1, #10
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 f9d9 	bl	80005fa <SetPin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fd16 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f882 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f90e 	bl	8000470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000254:	f000 f8dc 	bl	8000410 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000258:	f003 fc1e 	bl	8003a98 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockSprinkler1 */
  BlockSprinkler1Handle = osMutexNew(&BlockSprinkler1_attributes);
 800025c:	4827      	ldr	r0, [pc, #156]	; (80002fc <main+0x11c>)
 800025e:	f003 fda1 	bl	8003da4 <osMutexNew>
 8000262:	4603      	mov	r3, r0
 8000264:	4a26      	ldr	r2, [pc, #152]	; (8000300 <main+0x120>)
 8000266:	6013      	str	r3, [r2, #0]

  /* creation of BlockScene2 */
  BlockScene2Handle = osMutexNew(&BlockScene2_attributes);
 8000268:	4826      	ldr	r0, [pc, #152]	; (8000304 <main+0x124>)
 800026a:	f003 fd9b 	bl	8003da4 <osMutexNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a25      	ldr	r2, [pc, #148]	; (8000308 <main+0x128>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of BlockScene1 */
  BlockScene1Handle = osMutexNew(&BlockScene1_attributes);
 8000274:	4825      	ldr	r0, [pc, #148]	; (800030c <main+0x12c>)
 8000276:	f003 fd95 	bl	8003da4 <osMutexNew>
 800027a:	4603      	mov	r3, r0
 800027c:	4a24      	ldr	r2, [pc, #144]	; (8000310 <main+0x130>)
 800027e:	6013      	str	r3, [r2, #0]

  /* creation of BlockScene3 */
  BlockScene3Handle = osMutexNew(&BlockScene3_attributes);
 8000280:	4824      	ldr	r0, [pc, #144]	; (8000314 <main+0x134>)
 8000282:	f003 fd8f 	bl	8003da4 <osMutexNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a23      	ldr	r2, [pc, #140]	; (8000318 <main+0x138>)
 800028a:	6013      	str	r3, [r2, #0]

  /* creation of BlockSprinkler2 */
  BlockSprinkler2Handle = osMutexNew(&BlockSprinkler2_attributes);
 800028c:	4823      	ldr	r0, [pc, #140]	; (800031c <main+0x13c>)
 800028e:	f003 fd89 	bl	8003da4 <osMutexNew>
 8000292:	4603      	mov	r3, r0
 8000294:	4a22      	ldr	r2, [pc, #136]	; (8000320 <main+0x140>)
 8000296:	6013      	str	r3, [r2, #0]

  /* creation of BlockSprinkler3 */
  BlockSprinkler3Handle = osMutexNew(&BlockSprinkler3_attributes);
 8000298:	4822      	ldr	r0, [pc, #136]	; (8000324 <main+0x144>)
 800029a:	f003 fd83 	bl	8003da4 <osMutexNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a21      	ldr	r2, [pc, #132]	; (8000328 <main+0x148>)
 80002a2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (1000, sizeof(uint16_t), &myQueue01_attributes);
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <main+0x14c>)
 80002a6:	2102      	movs	r1, #2
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	f003 fec2 	bl	8004034 <osMessageQueueNew>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <main+0x150>)
 80002b4:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (1000, sizeof(uint16_t), &myQueue02_attributes);
 80002b6:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <main+0x154>)
 80002b8:	2102      	movs	r1, #2
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f003 feb9 	bl	8004034 <osMessageQueueNew>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <main+0x158>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartTerminal */
  StartTerminalHandle = osThreadNew(Terminal, NULL, &StartTerminal_attributes);
 80002c8:	4a1c      	ldr	r2, [pc, #112]	; (800033c <main+0x15c>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	481c      	ldr	r0, [pc, #112]	; (8000340 <main+0x160>)
 80002ce:	f003 fc4b 	bl	8003b68 <osThreadNew>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <main+0x164>)
 80002d6:	6013      	str	r3, [r2, #0]

  /* creation of StartScene */
  StartSceneHandle = osThreadNew(execScene, NULL, &StartScene_attributes);
 80002d8:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <main+0x168>)
 80002da:	2100      	movs	r1, #0
 80002dc:	481b      	ldr	r0, [pc, #108]	; (800034c <main+0x16c>)
 80002de:	f003 fc43 	bl	8003b68 <osThreadNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <main+0x170>)
 80002e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002e8:	f003 fc0a 	bl	8003b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <main+0x10c>
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000
 80002f4:	48000800 	.word	0x48000800
 80002f8:	48000400 	.word	0x48000400
 80002fc:	080078a8 	.word	0x080078a8
 8000300:	2000013c 	.word	0x2000013c
 8000304:	080078b8 	.word	0x080078b8
 8000308:	20000140 	.word	0x20000140
 800030c:	080078c8 	.word	0x080078c8
 8000310:	20000144 	.word	0x20000144
 8000314:	080078d8 	.word	0x080078d8
 8000318:	20000148 	.word	0x20000148
 800031c:	080078e8 	.word	0x080078e8
 8000320:	2000014c 	.word	0x2000014c
 8000324:	080078f8 	.word	0x080078f8
 8000328:	20000150 	.word	0x20000150
 800032c:	08007878 	.word	0x08007878
 8000330:	20000134 	.word	0x20000134
 8000334:	08007890 	.word	0x08007890
 8000338:	20000138 	.word	0x20000138
 800033c:	08007830 	.word	0x08007830
 8000340:	080007c1 	.word	0x080007c1
 8000344:	2000012c 	.word	0x2000012c
 8000348:	08007854 	.word	0x08007854
 800034c:	08000819 	.word	0x08000819
 8000350:	20000130 	.word	0x20000130

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b0a6      	sub	sp, #152	; 0x98
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f007 f93e 	bl	80075e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2258      	movs	r2, #88	; 0x58
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f007 f930 	bl	80075e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000384:	2302      	movs	r3, #2
 8000386:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038c:	2310      	movs	r3, #16
 800038e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800039c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ff1a 	bl	80011ec <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003be:	f000 fb15 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 ff58 	bl	8002294 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ea:	f000 faff 	bl	80009ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 f9b3 	bl	8002764 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000404:	f000 faf2 	bl	80009ec <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3798      	adds	r7, #152	; 0x98
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <MX_USART2_UART_Init+0x5c>)
 8000418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800041c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_USART2_UART_Init+0x58>)
 8000454:	f002 fe7a 	bl	800314c <HAL_UART_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800045e:	f000 fac5 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200000a8 	.word	0x200000a8
 800046c:	40004400 	.word	0x40004400

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <MX_GPIO_Init+0xc4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a2a      	ldr	r2, [pc, #168]	; (8000534 <MX_GPIO_Init+0xc4>)
 800048c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <MX_GPIO_Init+0xc4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049a:	613b      	str	r3, [r7, #16]
 800049c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049e:	4b25      	ldr	r3, [pc, #148]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a24      	ldr	r2, [pc, #144]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a18      	ldr	r2, [pc, #96]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_GPIO_Init+0xc4>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f000 fe65 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <MX_GPIO_Init+0xc8>)
 800050a:	f000 fccd 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050e:	2320      	movs	r3, #32
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2300      	movs	r3, #0
 800051c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f000 fcbe 	bl	8000ea8 <HAL_GPIO_Init>

}
 800052c:	bf00      	nop
 800052e:	3728      	adds	r7, #40	; 0x28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	48000800 	.word	0x48000800

0800053c <SetMode>:

/* USER CODE BEGIN 4 */

//*****************************************************************************
//                         Register settings for GPIO
void SetMode(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
 8000548:	4613      	mov	r3, r2
 800054a:	70bb      	strb	r3, [r7, #2]
	PORT->MODER |= (mode << (pin * 2)); // Times 2 because register occupies 2 bits for each MODER.
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	78b9      	ldrb	r1, [r7, #2]
 8000552:	78fa      	ldrb	r2, [r7, #3]
 8000554:	0052      	lsls	r2, r2, #1
 8000556:	fa01 f202 	lsl.w	r2, r1, r2
 800055a:	431a      	orrs	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	601a      	str	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SetType>:

void SetType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t type){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
 8000578:	4613      	mov	r3, r2
 800057a:	70bb      	strb	r3, [r7, #2]
	PORT->OTYPER |= (type << pin);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	78b9      	ldrb	r1, [r7, #2]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	fa01 f202 	lsl.w	r2, r1, r2
 8000588:	431a      	orrs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	605a      	str	r2, [r3, #4]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <SetSpeed>:

void SetSpeed(GPIO_TypeDef * PORT, uint8_t pin, uint8_t speed){
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]
 80005a6:	4613      	mov	r3, r2
 80005a8:	70bb      	strb	r3, [r7, #2]
	PORT->OSPEEDR |= (speed << (pin * 2));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	78b9      	ldrb	r1, [r7, #2]
 80005b0:	78fa      	ldrb	r2, [r7, #3]
 80005b2:	0052      	lsls	r2, r2, #1
 80005b4:	fa01 f202 	lsl.w	r2, r1, r2
 80005b8:	431a      	orrs	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	609a      	str	r2, [r3, #8]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <SetPullType>:

void SetPullType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t pulltype){
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
 80005d6:	4613      	mov	r3, r2
 80005d8:	70bb      	strb	r3, [r7, #2]
	PORT->PUPDR |= (pulltype << (pin * 2));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	78b9      	ldrb	r1, [r7, #2]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	431a      	orrs	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60da      	str	r2, [r3, #12]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <SetPin>:

void SetPin(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pulltype){
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	4608      	mov	r0, r1
 8000604:	4611      	mov	r1, r2
 8000606:	461a      	mov	r2, r3
 8000608:	4603      	mov	r3, r0
 800060a:	70fb      	strb	r3, [r7, #3]
 800060c:	460b      	mov	r3, r1
 800060e:	70bb      	strb	r3, [r7, #2]
 8000610:	4613      	mov	r3, r2
 8000612:	707b      	strb	r3, [r7, #1]

	SetMode(PORT, pin, mode);
 8000614:	78ba      	ldrb	r2, [r7, #2]
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff8e 	bl	800053c <SetMode>
	SetType(PORT, pin, type);
 8000620:	787a      	ldrb	r2, [r7, #1]
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	4619      	mov	r1, r3
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffa0 	bl	800056c <SetType>
	SetSpeed(PORT, pin, speed);
 800062c:	7c3a      	ldrb	r2, [r7, #16]
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	4619      	mov	r1, r3
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffb1 	bl	800059a <SetSpeed>
	SetPullType(PORT, pin, pulltype);
 8000638:	7d3a      	ldrb	r2, [r7, #20]
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ffc3 	bl	80005ca <SetPullType>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Tasks>:

void Tasks(uint8_t msg_ptr)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	osStatus_t status;
	status = osMessageQueueGet(myQueue02Handle, &msg_ptr, 0U, 0U);   // wait for message
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <Tasks+0x150>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	1df9      	adds	r1, r7, #7
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	f003 fde2 	bl	8004228 <osMessageQueueGet>
 8000664:	60f8      	str	r0, [r7, #12]
		if (status == osOK) {
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	2b00      	cmp	r3, #0
 800066a:	f040 808b 	bne.w	8000784 <Tasks+0x138>
			switch (msg_ptr) {
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b06      	cmp	r3, #6
 8000672:	f200 8083 	bhi.w	800077c <Tasks+0x130>
 8000676:	a201      	add	r2, pc, #4	; (adr r2, 800067c <Tasks+0x30>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000699 	.word	0x08000699
 8000680:	080006c5 	.word	0x080006c5
 8000684:	080006ed 	.word	0x080006ed
 8000688:	08000715 	.word	0x08000715
 800068c:	08000737 	.word	0x08000737
 8000690:	08000755 	.word	0x08000755
 8000694:	08000773 	.word	0x08000773
				case SPRINKLER1HIGH:
					BlockSprinkler1 = osMutexAcquire(BlockSprinkler1Handle, 0U);
 8000698:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <Tasks+0x154>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fc1a 	bl	8003ed8 <osMutexAcquire>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a3f      	ldr	r2, [pc, #252]	; (80007a4 <Tasks+0x158>)
 80006a8:	6013      	str	r3, [r2, #0]

					if (BlockSprinkler1 == osOK)
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <Tasks+0x158>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d16a      	bne.n	8000788 <Tasks+0x13c>
					GPIOA->BSRR |= GPIO_BSRR_BS_10;
 80006b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006c0:	6193      	str	r3, [r2, #24]
					break;
 80006c2:	e061      	b.n	8000788 <Tasks+0x13c>
				case SPRINKLER2HIGH:
					BlockSprinkler2 = osMutexAcquire(BlockSprinkler2Handle, 0U);
 80006c4:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <Tasks+0x15c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fc04 	bl	8003ed8 <osMutexAcquire>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a36      	ldr	r2, [pc, #216]	; (80007ac <Tasks+0x160>)
 80006d4:	6013      	str	r3, [r2, #0]

					if (BlockSprinkler2 == osOK)
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <Tasks+0x160>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d156      	bne.n	800078c <Tasks+0x140>
					GPIOB->BSRR |= GPIO_BSRR_BS_5;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <Tasks+0x164>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a33      	ldr	r2, [pc, #204]	; (80007b0 <Tasks+0x164>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	6193      	str	r3, [r2, #24]
					break;
 80006ea:	e04f      	b.n	800078c <Tasks+0x140>
				case SPRINKLER3HIGH:
					BlockSprinkler3 = osMutexAcquire(BlockSprinkler3Handle, 0U);
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <Tasks+0x168>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fbf0 	bl	8003ed8 <osMutexAcquire>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <Tasks+0x16c>)
 80006fc:	6013      	str	r3, [r2, #0]

					if (BlockSprinkler3 == osOK)
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <Tasks+0x16c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d144      	bne.n	8000790 <Tasks+0x144>
					GPIOC->BSRR |= GPIO_BSRR_BS_7;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <Tasks+0x170>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <Tasks+0x170>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	6193      	str	r3, [r2, #24]
					break;
 8000712:	e03d      	b.n	8000790 <Tasks+0x144>
				case SPRINKLER1LOW:
					GPIOA->BSRR |= GPIO_BSRR_BR_10;
 8000714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000722:	6193      	str	r3, [r2, #24]
					BlockSprinkler1 = osMutexRelease(BlockSprinkler1Handle);
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <Tasks+0x154>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fc33 	bl	8003f94 <osMutexRelease>
 800072e:	4603      	mov	r3, r0
 8000730:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <Tasks+0x158>)
 8000732:	6013      	str	r3, [r2, #0]
					break;
 8000734:	e02d      	b.n	8000792 <Tasks+0x146>
				case SPRINKLER2LOW:
					GPIOB->BSRR |= GPIO_BSRR_BR_5;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <Tasks+0x164>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <Tasks+0x164>)
 800073c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000740:	6193      	str	r3, [r2, #24]
					BlockSprinkler2 = osMutexRelease(BlockSprinkler2Handle);
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <Tasks+0x15c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fc24 	bl	8003f94 <osMutexRelease>
 800074c:	4603      	mov	r3, r0
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <Tasks+0x160>)
 8000750:	6013      	str	r3, [r2, #0]
					break;
 8000752:	e01e      	b.n	8000792 <Tasks+0x146>
				case SPRINKLER3LOW:
					GPIOC->BSRR |= GPIO_BSRR_BR_7;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <Tasks+0x170>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <Tasks+0x170>)
 800075a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800075e:	6193      	str	r3, [r2, #24]
					BlockSprinkler3 = osMutexRelease(BlockSprinkler3Handle);
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <Tasks+0x168>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fc15 	bl	8003f94 <osMutexRelease>
 800076a:	4603      	mov	r3, r0
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <Tasks+0x16c>)
 800076e:	6013      	str	r3, [r2, #0]
					break;
 8000770:	e00f      	b.n	8000792 <Tasks+0x146>
				case DELAY:
					osDelay(3000);
 8000772:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000776:	f003 fae7 	bl	8003d48 <osDelay>
					break;
 800077a:	e00a      	b.n	8000792 <Tasks+0x146>
				default:
					osThreadTerminate(NULL);
 800077c:	2000      	movs	r0, #0
 800077e:	f003 faa3 	bl	8003cc8 <osThreadTerminate>
					break;
 8000782:	e006      	b.n	8000792 <Tasks+0x146>
			}
		}
 8000784:	bf00      	nop
 8000786:	e004      	b.n	8000792 <Tasks+0x146>
					break;
 8000788:	bf00      	nop
 800078a:	e002      	b.n	8000792 <Tasks+0x146>
					break;
 800078c:	bf00      	nop
 800078e:	e000      	b.n	8000792 <Tasks+0x146>
					break;
 8000790:	bf00      	nop
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000138 	.word	0x20000138
 80007a0:	2000013c 	.word	0x2000013c
 80007a4:	20000154 	.word	0x20000154
 80007a8:	2000014c 	.word	0x2000014c
 80007ac:	20000158 	.word	0x20000158
 80007b0:	48000400 	.word	0x48000400
 80007b4:	20000150 	.word	0x20000150
 80007b8:	2000015c 	.word	0x2000015c
 80007bc:	48000800 	.word	0x48000800

080007c0 <Terminal>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Terminal */
void Terminal(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		uint8_t rxChar;
		HAL_StatusTypeDef status;
		USART2->ICR |= USART_ICR_ORECF; // Clear the overrun error bit.
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <Terminal+0x44>)
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <Terminal+0x44>)
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6213      	str	r3, [r2, #32]
		// Set timeout to 0 so it will not block,
		// just read one character if available.
		status = HAL_UART_Receive(&huart2, &rxChar, 1, 0);
 80007d4:	f107 010e 	add.w	r1, r7, #14
 80007d8:	2300      	movs	r3, #0
 80007da:	2201      	movs	r2, #1
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <Terminal+0x48>)
 80007de:	f002 fd03 	bl	80031e8 <HAL_UART_Receive>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
		if (status == HAL_OK) // No HAL_TIMEOUT, so a character is read.
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1ed      	bne.n	80007c8 <Terminal+0x8>
		{
			StartSceneHandle = osThreadNew(execScene, &rxChar, &StartScene_attributes);
 80007ec:	f107 030e 	add.w	r3, r7, #14
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <Terminal+0x4c>)
 80007f2:	4619      	mov	r1, r3
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <Terminal+0x50>)
 80007f6:	f003 f9b7 	bl	8003b68 <osThreadNew>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <Terminal+0x54>)
 80007fe:	6013      	str	r3, [r2, #0]
	{
 8000800:	e7e2      	b.n	80007c8 <Terminal+0x8>
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400
 8000808:	200000a8 	.word	0x200000a8
 800080c:	08007854 	.word	0x08007854
 8000810:	08000819 	.word	0x08000819
 8000814:	20000130 	.word	0x20000130

08000818 <execScene>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execScene */
void execScene(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execScene */
	char *rxChar = (char*) argument;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	60fb      	str	r3, [r7, #12]
	osStatus_t status;
	osMessageQueuePut(myQueue01Handle,&rxChar, 0U, 0U);
 8000824:	4b5d      	ldr	r3, [pc, #372]	; (800099c <execScene+0x184>)
 8000826:	6818      	ldr	r0, [r3, #0]
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	2300      	movs	r3, #0
 800082e:	2200      	movs	r2, #0
 8000830:	f003 fc86 	bl	8004140 <osMessageQueuePut>

	status = osMessageQueueGet(myQueue01Handle, &rxChar, 0U, 0U);   // wait for message
 8000834:	4b59      	ldr	r3, [pc, #356]	; (800099c <execScene+0x184>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f107 010c 	add.w	r1, r7, #12
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	f003 fcf2 	bl	8004228 <osMessageQueueGet>
 8000844:	6138      	str	r0, [r7, #16]
		if (status == osOK) {
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f040 80a1 	bne.w	8000990 <execScene+0x178>

			switch (*rxChar) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3b31      	subs	r3, #49	; 0x31
 8000854:	2b03      	cmp	r3, #3
 8000856:	f200 809d 	bhi.w	8000994 <execScene+0x17c>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <execScene+0x48>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	08000871 	.word	0x08000871
 8000864:	080008cd 	.word	0x080008cd
 8000868:	08000929 	.word	0x08000929
 800086c:	08000985 	.word	0x08000985
				case '1':
					BlockScene1 = osMutexAcquire(BlockScene1Handle, 0U);
 8000870:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <execScene+0x188>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fb2e 	bl	8003ed8 <osMutexAcquire>
 800087c:	4603      	mov	r3, r0
 800087e:	4a49      	ldr	r2, [pc, #292]	; (80009a4 <execScene+0x18c>)
 8000880:	6013      	str	r3, [r2, #0]
					if (BlockScene1 == osOK)  {
 8000882:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <execScene+0x18c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d117      	bne.n	80008ba <execScene+0xa2>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	75fb      	strb	r3, [r7, #23]
 800088e:	e011      	b.n	80008b4 <execScene+0x9c>
						{
							osMessageQueuePut(myQueue02Handle,&Scene1[i], 0U, 0U);
 8000890:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <execScene+0x190>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <execScene+0x194>)
 8000898:	1899      	adds	r1, r3, r2
 800089a:	2300      	movs	r3, #0
 800089c:	2200      	movs	r2, #0
 800089e:	f003 fc4f 	bl	8004140 <osMessageQueuePut>
							Tasks(Scene1[i]);
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	4a41      	ldr	r2, [pc, #260]	; (80009ac <execScene+0x194>)
 80008a6:	5cd3      	ldrb	r3, [r2, r3]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fecf 	bl	800064c <Tasks>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 80008ae:	7dfb      	ldrb	r3, [r7, #23]
 80008b0:	3301      	adds	r3, #1
 80008b2:	75fb      	strb	r3, [r7, #23]
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d9ea      	bls.n	8000890 <execScene+0x78>
						}
					}
					BlockScene1 = osMutexRelease(BlockScene1Handle);
 80008ba:	4b39      	ldr	r3, [pc, #228]	; (80009a0 <execScene+0x188>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fb68 	bl	8003f94 <osMutexRelease>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a37      	ldr	r2, [pc, #220]	; (80009a4 <execScene+0x18c>)
 80008c8:	6013      	str	r3, [r2, #0]
					break;
 80008ca:	e064      	b.n	8000996 <execScene+0x17e>
				case '2':
					BlockScene2 = osMutexAcquire(BlockScene2Handle, 0U);
 80008cc:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <execScene+0x198>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fb00 	bl	8003ed8 <osMutexAcquire>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <execScene+0x19c>)
 80008dc:	6013      	str	r3, [r2, #0]
					if (BlockScene2 == osOK)  {
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <execScene+0x19c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d117      	bne.n	8000916 <execScene+0xfe>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	75bb      	strb	r3, [r7, #22]
 80008ea:	e011      	b.n	8000910 <execScene+0xf8>
						{
							osMessageQueuePut(myQueue02Handle,&Scene2[i], 0U, 0U);
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <execScene+0x190>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	7dbb      	ldrb	r3, [r7, #22]
 80008f2:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <execScene+0x1a0>)
 80008f4:	1899      	adds	r1, r3, r2
 80008f6:	2300      	movs	r3, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	f003 fc21 	bl	8004140 <osMessageQueuePut>
							Tasks(Scene2[i]);
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <execScene+0x1a0>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fea1 	bl	800064c <Tasks>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 800090a:	7dbb      	ldrb	r3, [r7, #22]
 800090c:	3301      	adds	r3, #1
 800090e:	75bb      	strb	r3, [r7, #22]
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	2b05      	cmp	r3, #5
 8000914:	d9ea      	bls.n	80008ec <execScene+0xd4>
						}
					}
					BlockScene2 = osMutexRelease(BlockScene2Handle);
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <execScene+0x198>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fb3a 	bl	8003f94 <osMutexRelease>
 8000920:	4603      	mov	r3, r0
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <execScene+0x19c>)
 8000924:	6013      	str	r3, [r2, #0]
					break;
 8000926:	e036      	b.n	8000996 <execScene+0x17e>
				case '3':
					BlockScene3 = osMutexAcquire(BlockScene3Handle, 0U);
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <execScene+0x1a4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fad2 	bl	8003ed8 <osMutexAcquire>
 8000934:	4603      	mov	r3, r0
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <execScene+0x1a8>)
 8000938:	6013      	str	r3, [r2, #0]
					if (BlockScene3 == osOK)  {
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <execScene+0x1a8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d117      	bne.n	8000972 <execScene+0x15a>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 8000942:	2300      	movs	r3, #0
 8000944:	757b      	strb	r3, [r7, #21]
 8000946:	e011      	b.n	800096c <execScene+0x154>
						{
							osMessageQueuePut(myQueue02Handle,&Scene3[i], 0U, 0U);
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <execScene+0x190>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	7d7b      	ldrb	r3, [r7, #21]
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <execScene+0x1ac>)
 8000950:	1899      	adds	r1, r3, r2
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	f003 fbf3 	bl	8004140 <osMessageQueuePut>
							Tasks(Scene3[i]);
 800095a:	7d7b      	ldrb	r3, [r7, #21]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <execScene+0x1ac>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe73 	bl	800064c <Tasks>
						for(uint8_t i = 0; i<ARRAY_SIZE; i++)
 8000966:	7d7b      	ldrb	r3, [r7, #21]
 8000968:	3301      	adds	r3, #1
 800096a:	757b      	strb	r3, [r7, #21]
 800096c:	7d7b      	ldrb	r3, [r7, #21]
 800096e:	2b05      	cmp	r3, #5
 8000970:	d9ea      	bls.n	8000948 <execScene+0x130>
						}
					}
					BlockScene3 = osMutexRelease(BlockScene3Handle);
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <execScene+0x1a4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fb0c 	bl	8003f94 <osMutexRelease>
 800097c:	4603      	mov	r3, r0
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <execScene+0x1a8>)
 8000980:	6013      	str	r3, [r2, #0]
					break;
 8000982:	e008      	b.n	8000996 <execScene+0x17e>
				case '4':
					osMessageQueueDelete(myQueue01Handle);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <execScene+0x184>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fcbf 	bl	800430c <osMessageQueueDelete>
					break;
 800098e:	e002      	b.n	8000996 <execScene+0x17e>
				default:
					break;
		}
    }
 8000990:	bf00      	nop
 8000992:	e000      	b.n	8000996 <execScene+0x17e>
					break;
 8000994:	bf00      	nop
	osThreadExit();
 8000996:	f003 f991 	bl	8003cbc <osThreadExit>
 800099a:	bf00      	nop
 800099c:	20000134 	.word	0x20000134
 80009a0:	20000144 	.word	0x20000144
 80009a4:	20000160 	.word	0x20000160
 80009a8:	20000138 	.word	0x20000138
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000140 	.word	0x20000140
 80009b4:	20000164 	.word	0x20000164
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000148 	.word	0x20000148
 80009c0:	20000168 	.word	0x20000168
 80009c4:	20000010 	.word	0x20000010

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 f963 	bl	8000ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40001000 	.word	0x40001000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	210f      	movs	r1, #15
 8000a32:	f06f 0001 	mvn.w	r0, #1
 8000a36:	f000 fa0d 	bl	8000e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <HAL_UART_MspInit+0x7c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d128      	bne.n	8000abc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 f9f6 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <HAL_InitTick+0xe0>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a32      	ldr	r2, [pc, #200]	; (8000bac <HAL_InitTick+0xe0>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <HAL_InitTick+0xe0>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af4:	f107 0210 	add.w	r2, r7, #16
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fdfe 	bl	8002700 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d103      	bne.n	8000b16 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b0e:	f001 fdb3 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8000b12:	6378      	str	r0, [r7, #52]	; 0x34
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b16:	f001 fdaf 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <HAL_InitTick+0xe4>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0c9b      	lsrs	r3, r3, #18
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_InitTick+0xec>)
 8000b32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b54:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b56:	f002 f823 	bl	8002ba0 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d11b      	bne.n	8000ba0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <HAL_InitTick+0xe8>)
 8000b6a:	f002 f87b 	bl	8002c64 <HAL_TIM_Base_Start_IT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d111      	bne.n	8000ba0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b7c:	2036      	movs	r0, #54	; 0x36
 8000b7e:	f000 f985 	bl	8000e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d808      	bhi.n	8000b9a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2036      	movs	r0, #54	; 0x36
 8000b8e:	f000 f961 	bl	8000e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_InitTick+0xf0>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e002      	b.n	8000ba0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3738      	adds	r7, #56	; 0x38
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	2000016c 	.word	0x2000016c
 8000bb8:	40001000 	.word	0x40001000
 8000bbc:	2000001c 	.word	0x2000001c

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM6_DAC_IRQHandler+0x10>)
 8000bf2:	f002 f8a7 	bl	8002d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490e      	ldr	r1, [pc, #56]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0b      	ldr	r4, [pc, #44]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c4e:	f7ff ffd7 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f006 fc93 	bl	800757c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c56:	f7ff fac3 	bl	80001e0 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c68:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 8000c6c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000c70:	20005dec 	.word	0x20005dec

08000c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_2_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f8d8 	bl	8000e3e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	200f      	movs	r0, #15
 8000c90:	f7ff ff1c 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f7ff feb0 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000020 	.word	0x20000020
 8000cc8:	200001b8 	.word	0x200001b8

08000ccc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200001b8 	.word	0x200001b8

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff4c 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ffb1 	bl	8000dd8 <NVIC_EncodePriority>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff80 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff54 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e160      	b.n	800117a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8152 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80ac 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a5d      	ldr	r2, [pc, #372]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <HAL_GPIO_Init+0x2f0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a59      	ldr	r2, [pc, #356]	; (800119c <HAL_GPIO_Init+0x2f4>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105e:	d025      	beq.n	80010ac <HAL_GPIO_Init+0x204>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d01f      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_GPIO_Init+0x2fc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d019      	beq.n	80010a4 <HAL_GPIO_Init+0x1fc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x300>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1f8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x304>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1f4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <HAL_GPIO_Init+0x308>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <HAL_GPIO_Init+0x30c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1ec>
 8001090:	2306      	movs	r3, #6
 8001092:	e00c      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001094:	2307      	movs	r3, #7
 8001096:	e00a      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x206>
 800109c:	2304      	movs	r3, #4
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x2f4>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x310>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_GPIO_Init+0x310>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_GPIO_Init+0x310>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_GPIO_Init+0x310>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_GPIO_Init+0x310>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_GPIO_Init+0x310>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x310>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <HAL_GPIO_Init+0x310>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f ae97 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001202:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f001 b83a 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001216:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 816f 	beq.w	8001506 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001228:	4bb5      	ldr	r3, [pc, #724]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001234:	4bb2      	ldr	r3, [pc, #712]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d15c      	bne.n	80012fa <HAL_RCC_OscConfig+0x10e>
 8001240:	4baf      	ldr	r3, [pc, #700]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d155      	bne.n	80012fa <HAL_RCC_OscConfig+0x10e>
 800124e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001252:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	095b      	lsrs	r3, r3, #5
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <HAL_RCC_OscConfig+0x94>
 800127a:	4ba1      	ldr	r3, [pc, #644]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	e015      	b.n	80012ac <HAL_RCC_OscConfig+0xc0>
 8001280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001284:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001288:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001298:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800129c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012a8:	4b95      	ldr	r3, [pc, #596]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80012b4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80012b8:	fa92 f2a2 	rbit	r2, r2
 80012bc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80012c0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012c4:	fab2 f282 	clz	r2, r2
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	f002 021f 	and.w	r2, r2, #31
 80012d4:	2101      	movs	r1, #1
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8111 	beq.w	8001504 <HAL_RCC_OscConfig+0x318>
 80012e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 8108 	bne.w	8001504 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f000 bfc6 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x12e>
 800130c:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a7b      	ldr	r2, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e036      	b.n	8001388 <HAL_RCC_OscConfig+0x19c>
 800131a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x158>
 800132a:	4b75      	ldr	r3, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a74      	ldr	r2, [pc, #464]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a71      	ldr	r2, [pc, #452]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800133c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e021      	b.n	8001388 <HAL_RCC_OscConfig+0x19c>
 8001344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001348:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x184>
 8001356:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a69      	ldr	r2, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a66      	ldr	r2, [pc, #408]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00b      	b.n	8001388 <HAL_RCC_OscConfig+0x19c>
 8001370:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a62      	ldr	r2, [pc, #392]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d059      	beq.n	800144c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc98 	bl	8000ccc <HAL_GetTick>
 800139c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a2:	f7ff fc93 	bl	8000ccc <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d902      	bls.n	80013b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f000 bf67 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 80013b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013bc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80013cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_OscConfig+0x1fe>
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x22a>
 80013ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80013fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001402:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001406:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800141a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800141e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001422:	fa92 f2a2 	rbit	r2, r2
 8001426:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800142a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800142e:	fab2 f282 	clz	r2, r2
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	f002 021f 	and.w	r2, r2, #31
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f202 	lsl.w	r2, r1, r2
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ab      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b6>
 800144a:	e05c      	b.n	8001506 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fc3e 	bl	8000ccc <HAL_GetTick>
 8001450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fc39 	bl	8000ccc <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bf0d 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 800146c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001470:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001474:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001480:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x2b2>
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x2de>
 800149e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_RCC_OscConfig+0x314>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ce:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80014d2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80014d6:	fa92 f2a2 	rbit	r2, r2
 80014da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80014de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014e2:	fab2 f282 	clz	r2, r2
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	f002 021f 	and.w	r2, r2, #31
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ab      	bne.n	8001456 <HAL_RCC_OscConfig+0x26a>
 80014fe:	e002      	b.n	8001506 <HAL_RCC_OscConfig+0x31a>
 8001500:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 817f 	beq.w	800181a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800151c:	4ba7      	ldr	r3, [pc, #668]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001528:	4ba4      	ldr	r3, [pc, #656]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d173      	bne.n	800161c <HAL_RCC_OscConfig+0x430>
 8001534:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800153c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001540:	d16c      	bne.n	800161c <HAL_RCC_OscConfig+0x430>
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001554:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d102      	bne.n	8001572 <HAL_RCC_OscConfig+0x386>
 800156c:	4b93      	ldr	r3, [pc, #588]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e013      	b.n	800159a <HAL_RCC_OscConfig+0x3ae>
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800158a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	2202      	movs	r2, #2
 800159c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80015a0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80015a4:	fa92 f2a2 	rbit	r2, r2
 80015a8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80015ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f042 0220 	orr.w	r2, r2, #32
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f002 021f 	and.w	r2, r2, #31
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f202 	lsl.w	r2, r1, r2
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3f6>
 80015cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d002      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	f000 be52 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	21f8      	movs	r1, #248	; 0xf8
 80015f8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001600:	fa91 f1a1 	rbit	r1, r1
 8001604:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001608:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800160c:	fab1 f181 	clz	r1, r1
 8001610:	b2c9      	uxtb	r1, r1
 8001612:	408b      	lsls	r3, r1
 8001614:	4969      	ldr	r1, [pc, #420]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e0fe      	b.n	800181a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8088 	beq.w	800173e <HAL_RCC_OscConfig+0x552>
 800162e:	2301      	movs	r3, #1
 8001630:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001640:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800164e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	461a      	mov	r2, r3
 8001656:	2301      	movs	r3, #1
 8001658:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb37 	bl	8000ccc <HAL_GetTick>
 800165e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fb32 	bl	8000ccc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d902      	bls.n	800167a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	f000 be06 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800168c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x4be>
 80016a4:	4b45      	ldr	r3, [pc, #276]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e013      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e6>
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	2202      	movs	r2, #2
 80016d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80016d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016dc:	fa92 f2a2 	rbit	r2, r2
 80016e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80016e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016e8:	fab2 f282 	clz	r2, r2
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f002 021f 	and.w	r2, r2, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0af      	beq.n	8001664 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001710:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	21f8      	movs	r1, #248	; 0xf8
 800171a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001722:	fa91 f1a1 	rbit	r1, r1
 8001726:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800172a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800172e:	fab1 f181 	clz	r1, r1
 8001732:	b2c9      	uxtb	r1, r1
 8001734:	408b      	lsls	r3, r1
 8001736:	4921      	ldr	r1, [pc, #132]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e06d      	b.n	800181a <HAL_RCC_OscConfig+0x62e>
 800173e:	2301      	movs	r3, #1
 8001740:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001750:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800175e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	461a      	mov	r2, r3
 8001766:	2300      	movs	r3, #0
 8001768:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff faaf 	bl	8000ccc <HAL_GetTick>
 800176e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff faaa 	bl	8000ccc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d902      	bls.n	800178a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	f000 bd7e 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800179c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x5d4>
 80017b4:	4b01      	ldr	r3, [pc, #4]	; (80017bc <HAL_RCC_OscConfig+0x5d0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e016      	b.n	80017e8 <HAL_RCC_OscConfig+0x5fc>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017e4:	4bbf      	ldr	r3, [pc, #764]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2202      	movs	r2, #2
 80017ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80017f2:	fa92 f2a2 	rbit	r2, r2
 80017f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80017fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80017fe:	fab2 f282 	clz	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ac      	bne.n	8001774 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8113 	beq.w	8001a56 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d07c      	beq.n	800193a <HAL_RCC_OscConfig+0x74e>
 8001840:	2301      	movs	r3, #1
 8001842:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4ba2      	ldr	r3, [pc, #648]	; (8001ae8 <HAL_RCC_OscConfig+0x8fc>)
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	2301      	movs	r3, #1
 8001868:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fa2f 	bl	8000ccc <HAL_GetTick>
 800186e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fa2a 	bl	8000ccc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d902      	bls.n	800188a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	f000 bcfe 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 80018ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018f6:	2102      	movs	r1, #2
 80018f8:	6019      	str	r1, [r3, #0]
 80018fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f1a3 	rbit	r1, r3
 8001908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001910:	6019      	str	r1, [r3, #0]
  return result;
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d09d      	beq.n	8001874 <HAL_RCC_OscConfig+0x688>
 8001938:	e08d      	b.n	8001a56 <HAL_RCC_OscConfig+0x86a>
 800193a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001958:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800195c:	601a      	str	r2, [r3, #0]
  return result;
 800195e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001962:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001966:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x8fc>)
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	461a      	mov	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff f9a6 	bl	8000ccc <HAL_GetTick>
 8001980:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f9a1 	bl	8000ccc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d902      	bls.n	800199c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	f000 bc75 	b.w	8002286 <HAL_RCC_OscConfig+0x109a>
 800199c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019ec:	2202      	movs	r2, #2
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 8001a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a14:	2102      	movs	r1, #2
 8001a16:	6019      	str	r1, [r3, #0]
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f1a3 	rbit	r1, r3
 8001a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a2e:	6019      	str	r1, [r3, #0]
  return result;
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d197      	bne.n	8001986 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 81a5 	beq.w	8001db6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_RCC_OscConfig+0x8f8>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_RCC_OscConfig+0x900>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d121      	bne.n	8001afc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCC_OscConfig+0x900>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_RCC_OscConfig+0x900>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f902 	bl	8000ccc <HAL_GetTick>
 8001ac8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e010      	b.n	8001af0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f8fd 	bl	8000ccc <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e3d1      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	10908120 	.word	0x10908120
 8001aec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b8d      	ldr	r3, [pc, #564]	; (8001d28 <HAL_RCC_OscConfig+0xb3c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e8      	beq.n	8001ace <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x92e>
 8001b0c:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a86      	ldr	r2, [pc, #536]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e035      	b.n	8001b86 <HAL_RCC_OscConfig+0x99a>
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x958>
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a7c      	ldr	r2, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	e020      	b.n	8001b86 <HAL_RCC_OscConfig+0x99a>
 8001b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x982>
 8001b54:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a74      	ldr	r2, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x99a>
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8081 	beq.w	8001c9a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff f898 	bl	8000ccc <HAL_GetTick>
 8001b9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f893 	bl	8000ccc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e365      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	fa93 f2a3 	rbit	r2, r3
 8001bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	fa93 f2a3 	rbit	r2, r3
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c00:	601a      	str	r2, [r3, #0]
  return result;
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0xa3a>
 8001c20:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	e013      	b.n	8001c4e <HAL_RCC_OscConfig+0xa62>
 8001c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c2e:	2202      	movs	r2, #2
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c56:	2102      	movs	r1, #2
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c5e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fa92 f1a2 	rbit	r1, r2
 8001c68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c6c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c70:	6011      	str	r1, [r2, #0]
  return result;
 8001c72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c76:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d084      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x9b6>
 8001c98:	e083      	b.n	8001da2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f817 	bl	8000ccc <HAL_GetTick>
 8001c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f812 	bl	8000ccc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e2e4      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 8001cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ce8:	2202      	movs	r2, #2
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d02:	601a      	str	r2, [r3, #0]
  return result;
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d0c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0xb44>
 8001d22:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_RCC_OscConfig+0xb40>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	e017      	b.n	8001d58 <HAL_RCC_OscConfig+0xb6c>
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d38:	2202      	movs	r2, #2
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4bb3      	ldr	r3, [pc, #716]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d5c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d60:	2102      	movs	r1, #2
 8001d62:	6011      	str	r1, [r2, #0]
 8001d64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	fa92 f1a2 	rbit	r1, r2
 8001d72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d76:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d7a:	6011      	str	r1, [r2, #0]
  return result;
 8001d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d80:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f002 021f 	and.w	r2, r2, #31
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d180      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001da2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b9e      	ldr	r3, [pc, #632]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a9d      	ldr	r2, [pc, #628]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 825e 	beq.w	8002284 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b96      	ldr	r3, [pc, #600]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	f000 821f 	beq.w	8002214 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 8170 	bne.w	80020c8 <HAL_RCC_OscConfig+0xedc>
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e16:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7fe ff4d 	bl	8000ccc <HAL_GetTick>
 8001e32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e009      	b.n	8001e4c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ff48 	bl	8000ccc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e21c      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e70:	601a      	str	r2, [r3, #0]
  return result;
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0xcaa>
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e027      	b.n	8001ee6 <HAL_RCC_OscConfig+0xcfa>
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001eee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef2:	6011      	str	r1, [r2, #0]
 8001ef4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	fa92 f1a2 	rbit	r1, r2
 8001f02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f06:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f0a:	6011      	str	r1, [r2, #0]
  return result;
 8001f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f10:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d182      	bne.n	8001e38 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f023 020f 	bic.w	r2, r3, #15
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a19      	ldr	r1, [r3, #32]
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	492d      	ldr	r1, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
 8001f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f86:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fa2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fe87 	bl	8000ccc <HAL_GetTick>
 8001fbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe fe82 	bl	8000ccc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e156      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 8001fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fdc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ffc:	601a      	str	r2, [r3, #0]
  return result;
 8001ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002002:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002006:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0xe3c>
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <HAL_RCC_OscConfig+0xe38>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e02a      	b.n	8002078 <HAL_RCC_OscConfig+0xe8c>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002060:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	4b86      	ldr	r3, [pc, #536]	; (8002290 <HAL_RCC_OscConfig+0x10a4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800207c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002080:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002084:	6011      	str	r1, [r2, #0]
 8002086:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800208a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	fa92 f1a2 	rbit	r1, r2
 8002094:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002098:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800209c:	6011      	str	r1, [r2, #0]
  return result;
 800209e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f43f af7f 	beq.w	8001fc4 <HAL_RCC_OscConfig+0xdd8>
 80020c6:	e0dd      	b.n	8002284 <HAL_RCC_OscConfig+0x1098>
 80020c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020ec:	601a      	str	r2, [r3, #0]
  return result;
 80020ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020f6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2300      	movs	r3, #0
 800210c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fddd 	bl	8000ccc <HAL_GetTick>
 8002112:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fdd8 	bl	8000ccc <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0ac      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002150:	601a      	str	r2, [r3, #0]
  return result;
 8002152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002156:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800215a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0xf8a>
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x10a4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e027      	b.n	80021c6 <HAL_RCC_OscConfig+0xfda>
 8002176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800217e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCC_OscConfig+0x10a4>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021d2:	6011      	str	r1, [r2, #0]
 80021d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	fa92 f1a2 	rbit	r1, r2
 80021e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021ea:	6011      	str	r1, [r2, #0]
  return result;
 80021ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f042 0220 	orr.w	r2, r2, #32
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f002 021f 	and.w	r2, r2, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d182      	bne.n	8002118 <HAL_RCC_OscConfig+0xf2c>
 8002212:	e037      	b.n	8002284 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e02e      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_OscConfig+0x10a4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCC_OscConfig+0x10a4>)
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002238:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800223c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002244:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d117      	bne.n	8002280 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002250:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002254:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002264:	429a      	cmp	r2, r3
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226c:	f003 020f 	and.w	r2, r3, #15
 8002270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002274:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000

08002294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09e      	sub	sp, #120	; 0x78
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e162      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b90      	ldr	r3, [pc, #576]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	498b      	ldr	r1, [pc, #556]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e14a      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	497f      	ldr	r1, [pc, #508]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80dc 	beq.w	80024c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d13c      	bne.n	800238a <HAL_RCC_ClockConfig+0xf6>
 8002310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002314:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <HAL_RCC_ClockConfig+0xa6>
 8002334:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e00f      	b.n	800235a <HAL_RCC_ClockConfig+0xc6>
 800233a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
 8002348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002362:	fa92 f2a2 	rbit	r2, r2
 8002366:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0220 	orr.w	r2, r2, #32
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d17b      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0f3      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d13c      	bne.n	800240c <HAL_RCC_ClockConfig+0x178>
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_ClockConfig+0x128>
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_ClockConfig+0x148>
 80023bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
 80023d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80023e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13a      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b2      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
 800240c:	2302      	movs	r3, #2
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e00d      	b.n	8002450 <HAL_RCC_ClockConfig+0x1bc>
 8002434:	2302      	movs	r3, #2
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	2302      	movs	r3, #2
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2202      	movs	r2, #2
 8002452:	61ba      	str	r2, [r7, #24]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	fa92 f2a2 	rbit	r2, r2
 800245a:	617a      	str	r2, [r7, #20]
  return result;
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fab2 f282 	clz	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f042 0220 	orr.w	r2, r2, #32
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e079      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	491a      	ldr	r1, [pc, #104]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fc1c 	bl	8000ccc <HAL_GetTick>
 8002494:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fc18 	bl	8000ccc <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e061      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d214      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4906      	ldr	r1, [pc, #24]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e040      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	491a      	ldr	r1, [pc, #104]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4912      	ldr	r1, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002536:	f000 f829 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800253a:	4601      	mov	r1, r0
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	22f0      	movs	r2, #240	; 0xf0
 8002546:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	60fa      	str	r2, [r7, #12]
  return result;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	40d3      	lsrs	r3, r2
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x2ec>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_RCC_ClockConfig+0x2f0>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_ClockConfig+0x2f4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe faae 	bl	8000acc <HAL_InitTick>
  
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3778      	adds	r7, #120	; 0x78
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	08007908 	.word	0x08007908
 8002584:	20000018 	.word	0x20000018
 8002588:	2000001c 	.word	0x2000001c

0800258c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b08b      	sub	sp, #44	; 0x2c
 8002590:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x30>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ba:	e03f      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025be:	623b      	str	r3, [r7, #32]
      break;
 80025c0:	e03f      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	fa92 f2a2 	rbit	r2, r2
 80025d4:	607a      	str	r2, [r7, #4]
  return result;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	40d3      	lsrs	r3, r2
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	220f      	movs	r2, #15
 80025f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	60fa      	str	r2, [r7, #12]
  return result;
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e007      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fbb2 f2f3 	udiv	r2, r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	623b      	str	r3, [r7, #32]
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc8>)
 800263e:	623b      	str	r3, [r7, #32]
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6a3b      	ldr	r3, [r7, #32]
}
 8002644:	4618      	mov	r0, r3
 8002646:	372c      	adds	r7, #44	; 0x2c
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	08007920 	.word	0x08007920
 800265c:	08007930 	.word	0x08007930

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000018 	.word	0x20000018

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800267e:	f7ff ffef 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002682:	4601      	mov	r1, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800268c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002690:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	fa92 f2a2 	rbit	r2, r2
 8002698:	603a      	str	r2, [r7, #0]
  return result;
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	40d3      	lsrs	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08007918 	.word	0x08007918

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026c2:	f7ff ffcd 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026c6:	4601      	mov	r1, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026d0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	fa92 f2a2 	rbit	r2, r2
 80026dc:	603a      	str	r2, [r7, #0]
  return result;
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	40d3      	lsrs	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x40>)
 80026ea:	5cd3      	ldrb	r3, [r2, r3]
 80026ec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007918 	.word	0x08007918

08002700 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	220f      	movs	r2, #15
 800270e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_GetClockConfig+0x5c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_RCC_GetClockConfig+0x5c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCC_GetClockConfig+0x5c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_GetClockConfig+0x5c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCC_GetClockConfig+0x60>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0207 	and.w	r2, r3, #7
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b092      	sub	sp, #72	; 0x48
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80d4 	beq.w	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4b4e      	ldr	r3, [pc, #312]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10e      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027be:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a41      	ldr	r2, [pc, #260]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fa7f 	bl	8000ccc <HAL_GetTick>
 80027ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fa7b 	bl	8000ccc <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b64      	cmp	r3, #100	; 0x64
 80027de:	d901      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e1d6      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8084 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800280c:	429a      	cmp	r2, r3
 800280e:	d07c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2301      	movs	r3, #1
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	461a      	mov	r2, r3
 800285e:	2300      	movs	r3, #0
 8002860:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002862:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04b      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fa2b 	bl	8000ccc <HAL_GetTick>
 8002876:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fa27 	bl	8000ccc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e180      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002890:	2302      	movs	r3, #2
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	2302      	movs	r3, #2
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	61fb      	str	r3, [r7, #28]
  return result;
 80028a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d108      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028be:	4b01      	ldr	r3, [pc, #4]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	e00d      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40007000 	.word	0x40007000
 80028cc:	10908100 	.word	0x10908100
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	4b9a      	ldr	r3, [pc, #616]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2202      	movs	r2, #2
 80028e2:	613a      	str	r2, [r7, #16]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	fa92 f2a2 	rbit	r2, r2
 80028ea:	60fa      	str	r2, [r7, #12]
  return result;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	fab2 f282 	clz	r2, r2
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	f002 021f 	and.w	r2, r2, #31
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0b7      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800290a:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	498c      	ldr	r1, [pc, #560]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800291c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a87      	ldr	r2, [pc, #540]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293c:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	497f      	ldr	r1, [pc, #508]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295a:	4b7b      	ldr	r3, [pc, #492]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	4978      	ldr	r1, [pc, #480]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002978:	4b73      	ldr	r3, [pc, #460]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	4970      	ldr	r1, [pc, #448]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4969      	ldr	r1, [pc, #420]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029b4:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	4961      	ldr	r1, [pc, #388]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f023 0220 	bic.w	r2, r3, #32
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	495a      	ldr	r1, [pc, #360]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f0:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	4952      	ldr	r1, [pc, #328]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	494b      	ldr	r1, [pc, #300]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4943      	ldr	r1, [pc, #268]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a4a:	4b3f      	ldr	r3, [pc, #252]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	493c      	ldr	r1, [pc, #240]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	4934      	ldr	r1, [pc, #208]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a86:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	492d      	ldr	r1, [pc, #180]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	491e      	ldr	r1, [pc, #120]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	490f      	ldr	r1, [pc, #60]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	4907      	ldr	r1, [pc, #28]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b3a:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	e002      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	4913      	ldr	r1, [pc, #76]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	490b      	ldr	r1, [pc, #44]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3748      	adds	r7, #72	; 0x48
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e049      	b.n	8002c46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f841 	bl	8002c4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 f9f8 	bl	8002fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04f      	b.n	8002d1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d018      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d115      	bne.n	8002d06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d015      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d011      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d04:	e008      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800
 8002d34:	40013400 	.word	0x40013400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	40015000 	.word	0x40015000
 8002d40:	00010007 	.word	0x00010007

08002d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0202 	mvn.w	r2, #2
 8002d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f905 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8f7 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f908 	bl	8002faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0204 	mvn.w	r2, #4
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8db 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8cd 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8de 	bl	8002faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0208 	mvn.w	r2, #8
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8b1 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8a3 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8b4 	bl	8002faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0210 	mvn.w	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f887 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f879 	bl	8002f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f88a 	bl	8002faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0201 	mvn.w	r2, #1
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fd80 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f918 	bl	8003124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f02:	d10e      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f90b 	bl	8003138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d10e      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f838 	bl	8002fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d10e      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d107      	bne.n	8002f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f06f 0220 	mvn.w	r2, #32
 8002f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8cb 	bl	8003110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <TIM_Base_SetConfig+0x11c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff2:	d00f      	beq.n	8003014 <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3f      	ldr	r2, [pc, #252]	; (80030f4 <TIM_Base_SetConfig+0x120>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00b      	beq.n	8003014 <TIM_Base_SetConfig+0x40>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3e      	ldr	r2, [pc, #248]	; (80030f8 <TIM_Base_SetConfig+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x40>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <TIM_Base_SetConfig+0x128>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x40>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <TIM_Base_SetConfig+0x12c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a31      	ldr	r2, [pc, #196]	; (80030f0 <TIM_Base_SetConfig+0x11c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d01b      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <TIM_Base_SetConfig+0x120>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d017      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <TIM_Base_SetConfig+0x124>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <TIM_Base_SetConfig+0x128>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00f      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <TIM_Base_SetConfig+0x130>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <TIM_Base_SetConfig+0x134>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <TIM_Base_SetConfig+0x138>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0x9a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a25      	ldr	r2, [pc, #148]	; (8003100 <TIM_Base_SetConfig+0x12c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <TIM_Base_SetConfig+0x11c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <TIM_Base_SetConfig+0x100>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <TIM_Base_SetConfig+0x128>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00f      	beq.n	80030d4 <TIM_Base_SetConfig+0x100>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <TIM_Base_SetConfig+0x130>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x100>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <TIM_Base_SetConfig+0x134>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x100>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <TIM_Base_SetConfig+0x138>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x100>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <TIM_Base_SetConfig+0x12c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d103      	bne.n	80030dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	615a      	str	r2, [r3, #20]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40013400 	.word	0x40013400
 8003100:	40015000 	.word	0x40015000
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800

08003110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e040      	b.n	80031e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fc6a 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8fe 	bl	800338c <UART_SetConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e022      	b.n	80031e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fac8 	bl	8003738 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb4f 	bl	800387c <UART_CheckIdleState>
 80031de:	4603      	mov	r3, r0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	f040 80bf 	bne.w	8003380 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_Receive+0x26>
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0b7      	b.n	8003382 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Receive+0x38>
 800321c:	2302      	movs	r3, #2
 800321e:	e0b0      	b.n	8003382 <HAL_UART_Receive+0x19a>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2222      	movs	r2, #34	; 0x22
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323c:	f7fd fd46 	bl	8000ccc <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	d10e      	bne.n	800327a <HAL_UART_Receive+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_UART_Receive+0x88>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f240 12ff 	movw	r2, #511	; 0x1ff
 800326a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800326e:	e02d      	b.n	80032cc <HAL_UART_Receive+0xe4>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	22ff      	movs	r2, #255	; 0xff
 8003274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003278:	e028      	b.n	80032cc <HAL_UART_Receive+0xe4>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_UART_Receive+0xb6>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Receive+0xac>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003292:	e01b      	b.n	80032cc <HAL_UART_Receive+0xe4>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	227f      	movs	r2, #127	; 0x7f
 8003298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800329c:	e016      	b.n	80032cc <HAL_UART_Receive+0xe4>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a6:	d10d      	bne.n	80032c4 <HAL_UART_Receive+0xdc>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_UART_Receive+0xd2>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	227f      	movs	r2, #127	; 0x7f
 80032b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032b8:	e008      	b.n	80032cc <HAL_UART_Receive+0xe4>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	223f      	movs	r2, #63	; 0x3f
 80032be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032c2:	e003      	b.n	80032cc <HAL_UART_Receive+0xe4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Receive+0x108>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003300:	e033      	b.n	800336a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2120      	movs	r1, #32
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fafe 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e032      	b.n	8003382 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003328:	b29a      	uxth	r2, r3
 800332a:	8a7b      	ldrh	r3, [r7, #18]
 800332c:	4013      	ands	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	3302      	adds	r3, #2
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e00d      	b.n	8003358 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003342:	b29b      	uxth	r3, r3
 8003344:	b2da      	uxtb	r2, r3
 8003346:	8a7b      	ldrh	r3, [r7, #18]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4013      	ands	r3, r2
 800334c:	b2da      	uxtb	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1c5      	bne.n	8003302 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b92      	ldr	r3, [pc, #584]	; (8003600 <UART_SetConfig+0x274>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a80      	ldr	r2, [pc, #512]	; (8003604 <UART_SetConfig+0x278>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d120      	bne.n	800344a <UART_SetConfig+0xbe>
 8003408:	4b7f      	ldr	r3, [pc, #508]	; (8003608 <UART_SetConfig+0x27c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b03      	cmp	r3, #3
 8003412:	d817      	bhi.n	8003444 <UART_SetConfig+0xb8>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x90>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003439 	.word	0x08003439
 8003424:	0800343f 	.word	0x0800343f
 8003428:	08003433 	.word	0x08003433
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e0b5      	b.n	800359e <UART_SetConfig+0x212>
 8003432:	2302      	movs	r3, #2
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e0b2      	b.n	800359e <UART_SetConfig+0x212>
 8003438:	2304      	movs	r3, #4
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e0af      	b.n	800359e <UART_SetConfig+0x212>
 800343e:	2308      	movs	r3, #8
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e0ac      	b.n	800359e <UART_SetConfig+0x212>
 8003444:	2310      	movs	r3, #16
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e0a9      	b.n	800359e <UART_SetConfig+0x212>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6f      	ldr	r2, [pc, #444]	; (800360c <UART_SetConfig+0x280>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d124      	bne.n	800349e <UART_SetConfig+0x112>
 8003454:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <UART_SetConfig+0x27c>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003460:	d011      	beq.n	8003486 <UART_SetConfig+0xfa>
 8003462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003466:	d817      	bhi.n	8003498 <UART_SetConfig+0x10c>
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d011      	beq.n	8003492 <UART_SetConfig+0x106>
 800346e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003472:	d811      	bhi.n	8003498 <UART_SetConfig+0x10c>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <UART_SetConfig+0xf4>
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d006      	beq.n	800348c <UART_SetConfig+0x100>
 800347e:	e00b      	b.n	8003498 <UART_SetConfig+0x10c>
 8003480:	2300      	movs	r3, #0
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e08b      	b.n	800359e <UART_SetConfig+0x212>
 8003486:	2302      	movs	r3, #2
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e088      	b.n	800359e <UART_SetConfig+0x212>
 800348c:	2304      	movs	r3, #4
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e085      	b.n	800359e <UART_SetConfig+0x212>
 8003492:	2308      	movs	r3, #8
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e082      	b.n	800359e <UART_SetConfig+0x212>
 8003498:	2310      	movs	r3, #16
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e07f      	b.n	800359e <UART_SetConfig+0x212>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <UART_SetConfig+0x284>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d124      	bne.n	80034f2 <UART_SetConfig+0x166>
 80034a8:	4b57      	ldr	r3, [pc, #348]	; (8003608 <UART_SetConfig+0x27c>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b4:	d011      	beq.n	80034da <UART_SetConfig+0x14e>
 80034b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ba:	d817      	bhi.n	80034ec <UART_SetConfig+0x160>
 80034bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034c0:	d011      	beq.n	80034e6 <UART_SetConfig+0x15a>
 80034c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034c6:	d811      	bhi.n	80034ec <UART_SetConfig+0x160>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <UART_SetConfig+0x148>
 80034cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d0:	d006      	beq.n	80034e0 <UART_SetConfig+0x154>
 80034d2:	e00b      	b.n	80034ec <UART_SetConfig+0x160>
 80034d4:	2300      	movs	r3, #0
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e061      	b.n	800359e <UART_SetConfig+0x212>
 80034da:	2302      	movs	r3, #2
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e05e      	b.n	800359e <UART_SetConfig+0x212>
 80034e0:	2304      	movs	r3, #4
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e05b      	b.n	800359e <UART_SetConfig+0x212>
 80034e6:	2308      	movs	r3, #8
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e058      	b.n	800359e <UART_SetConfig+0x212>
 80034ec:	2310      	movs	r3, #16
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e055      	b.n	800359e <UART_SetConfig+0x212>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a47      	ldr	r2, [pc, #284]	; (8003614 <UART_SetConfig+0x288>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d124      	bne.n	8003546 <UART_SetConfig+0x1ba>
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <UART_SetConfig+0x27c>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003504:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003508:	d011      	beq.n	800352e <UART_SetConfig+0x1a2>
 800350a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800350e:	d817      	bhi.n	8003540 <UART_SetConfig+0x1b4>
 8003510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003514:	d011      	beq.n	800353a <UART_SetConfig+0x1ae>
 8003516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800351a:	d811      	bhi.n	8003540 <UART_SetConfig+0x1b4>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <UART_SetConfig+0x19c>
 8003520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003524:	d006      	beq.n	8003534 <UART_SetConfig+0x1a8>
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x1b4>
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e037      	b.n	800359e <UART_SetConfig+0x212>
 800352e:	2302      	movs	r3, #2
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e034      	b.n	800359e <UART_SetConfig+0x212>
 8003534:	2304      	movs	r3, #4
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e031      	b.n	800359e <UART_SetConfig+0x212>
 800353a:	2308      	movs	r3, #8
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e02e      	b.n	800359e <UART_SetConfig+0x212>
 8003540:	2310      	movs	r3, #16
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e02b      	b.n	800359e <UART_SetConfig+0x212>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a33      	ldr	r2, [pc, #204]	; (8003618 <UART_SetConfig+0x28c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d124      	bne.n	800359a <UART_SetConfig+0x20e>
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <UART_SetConfig+0x27c>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355c:	d011      	beq.n	8003582 <UART_SetConfig+0x1f6>
 800355e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003562:	d817      	bhi.n	8003594 <UART_SetConfig+0x208>
 8003564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003568:	d011      	beq.n	800358e <UART_SetConfig+0x202>
 800356a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356e:	d811      	bhi.n	8003594 <UART_SetConfig+0x208>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <UART_SetConfig+0x1f0>
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d006      	beq.n	8003588 <UART_SetConfig+0x1fc>
 800357a:	e00b      	b.n	8003594 <UART_SetConfig+0x208>
 800357c:	2300      	movs	r3, #0
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e00d      	b.n	800359e <UART_SetConfig+0x212>
 8003582:	2302      	movs	r3, #2
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e00a      	b.n	800359e <UART_SetConfig+0x212>
 8003588:	2304      	movs	r3, #4
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e007      	b.n	800359e <UART_SetConfig+0x212>
 800358e:	2308      	movs	r3, #8
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e004      	b.n	800359e <UART_SetConfig+0x212>
 8003594:	2310      	movs	r3, #16
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e001      	b.n	800359e <UART_SetConfig+0x212>
 800359a:	2310      	movs	r3, #16
 800359c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a6:	d16c      	bne.n	8003682 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d838      	bhi.n	8003620 <UART_SetConfig+0x294>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <UART_SetConfig+0x228>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	080035e9 	.word	0x080035e9
 80035c0:	08003621 	.word	0x08003621
 80035c4:	080035ef 	.word	0x080035ef
 80035c8:	08003621 	.word	0x08003621
 80035cc:	08003621 	.word	0x08003621
 80035d0:	08003621 	.word	0x08003621
 80035d4:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d8:	f7ff f84e 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80035dc:	61b8      	str	r0, [r7, #24]
        break;
 80035de:	e024      	b.n	800362a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e0:	f7ff f86c 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80035e4:	61b8      	str	r0, [r7, #24]
        break;
 80035e6:	e020      	b.n	800362a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <UART_SetConfig+0x290>)
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e01d      	b.n	800362a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7fe ffcd 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80035f2:	61b8      	str	r0, [r7, #24]
        break;
 80035f4:	e019      	b.n	800362a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e015      	b.n	800362a <UART_SetConfig+0x29e>
 80035fe:	bf00      	nop
 8003600:	efff69f3 	.word	0xefff69f3
 8003604:	40013800 	.word	0x40013800
 8003608:	40021000 	.word	0x40021000
 800360c:	40004400 	.word	0x40004400
 8003610:	40004800 	.word	0x40004800
 8003614:	40004c00 	.word	0x40004c00
 8003618:	40005000 	.word	0x40005000
 800361c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	77bb      	strb	r3, [r7, #30]
        break;
 8003628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d075      	beq.n	800371c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	005a      	lsls	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d916      	bls.n	800367c <UART_SetConfig+0x2f0>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d212      	bcs.n	800367c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f023 030f 	bic.w	r3, r3, #15
 800365e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	b29a      	uxth	r2, r3
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	4313      	orrs	r3, r2
 8003670:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	89fa      	ldrh	r2, [r7, #14]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	e04f      	b.n	800371c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	77bb      	strb	r3, [r7, #30]
 8003680:	e04c      	b.n	800371c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d828      	bhi.n	80036da <UART_SetConfig+0x34e>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x304>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036db 	.word	0x080036db
 80036a0:	080036cb 	.word	0x080036cb
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7fe ffe0 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80036b8:	61b8      	str	r0, [r7, #24]
        break;
 80036ba:	e013      	b.n	80036e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7fe fffe 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 80036c0:	61b8      	str	r0, [r7, #24]
        break;
 80036c2:	e00f      	b.n	80036e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <UART_SetConfig+0x3a8>)
 80036c6:	61bb      	str	r3, [r7, #24]
        break;
 80036c8:	e00c      	b.n	80036e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7fe ff5f 	bl	800258c <HAL_RCC_GetSysClockFreq>
 80036ce:	61b8      	str	r0, [r7, #24]
        break;
 80036d0:	e008      	b.n	80036e4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e004      	b.n	80036e4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77bb      	strb	r3, [r7, #30]
        break;
 80036e2:	bf00      	nop
    }

    if (pclk != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d018      	beq.n	800371c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	085a      	lsrs	r2, r3, #1
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d908      	bls.n	8003718 <UART_SetConfig+0x38c>
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370c:	d204      	bcs.n	8003718 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e001      	b.n	800371c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003728:	7fbb      	ldrb	r3, [r7, #30]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	007a1200 	.word	0x007a1200

08003738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01a      	beq.n	800384e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d10a      	bne.n	800384e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800388c:	f7fd fa1e 	bl	8000ccc <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10e      	bne.n	80038be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f82d 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e023      	b.n	8003906 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d10e      	bne.n	80038ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f817 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00d      	b.n	8003906 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b09c      	sub	sp, #112	; 0x70
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	e0a5      	b.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	f000 80a1 	beq.w	8003a6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392a:	f7fd f9cf 	bl	8000ccc <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <UART_WaitOnFlagUntilTimeout+0x32>
 800393a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800393c:	2b00      	cmp	r3, #0
 800393e:	d13e      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003954:	667b      	str	r3, [r7, #100]	; 0x64
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003960:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800396c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e6      	bne.n	8003940 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3308      	adds	r3, #8
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	663b      	str	r3, [r7, #96]	; 0x60
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3308      	adds	r3, #8
 8003990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003992:	64ba      	str	r2, [r7, #72]	; 0x48
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e5      	bne.n	8003972 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e067      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d04f      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039da:	d147      	bne.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
 8003a06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e6      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	613b      	str	r3, [r7, #16]
   return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3308      	adds	r3, #8
 8003a36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a38:	623a      	str	r2, [r7, #32]
 8003a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e5      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e010      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	f43f af4a 	beq.w	8003920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3770      	adds	r7, #112	; 0x70
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9e:	f3ef 8305 	mrs	r3, IPSR
 8003aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003aae:	607b      	str	r3, [r7, #4]
  return(result);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <osKernelInitialize+0x32>
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <osKernelInitialize+0x64>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d109      	bne.n	8003ad2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003abe:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003aca:	f06f 0305 	mvn.w	r3, #5
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e00c      	b.n	8003aec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <osKernelInitialize+0x64>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <osKernelInitialize+0x64>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e002      	b.n	8003aec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003aec:	68fb      	ldr	r3, [r7, #12]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	200001bc 	.word	0x200001bc

08003b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b06:	f3ef 8305 	mrs	r3, IPSR
 8003b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b12:	f3ef 8310 	mrs	r3, PRIMASK
 8003b16:	607b      	str	r3, [r7, #4]
  return(result);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <osKernelStart+0x32>
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <osKernelStart+0x64>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d109      	bne.n	8003b3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b26:	f3ef 8311 	mrs	r3, BASEPRI
 8003b2a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003b32:	f06f 0305 	mvn.w	r3, #5
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e00e      	b.n	8003b58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <osKernelStart+0x64>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <osKernelStart+0x64>)
 8003b44:	2202      	movs	r2, #2
 8003b46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003b48:	f001 ff7c 	bl	8005a44 <vTaskStartScheduler>
      stat = osOK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e002      	b.n	8003b58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003b58:	68fb      	ldr	r3, [r7, #12]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200001bc 	.word	0x200001bc

08003b68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b092      	sub	sp, #72	; 0x48
 8003b6c:	af04      	add	r7, sp, #16
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b78:	f3ef 8305 	mrs	r3, IPSR
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 8094 	bne.w	8003cae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b86:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 808d 	bne.w	8003cae <osThreadNew+0x146>
 8003b94:	4b48      	ldr	r3, [pc, #288]	; (8003cb8 <osThreadNew+0x150>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d106      	bne.n	8003baa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8082 	bne.w	8003cae <osThreadNew+0x146>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d07e      	beq.n	8003cae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003bb4:	2318      	movs	r3, #24
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003bb8:	2300      	movs	r3, #0
 8003bba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003bbc:	f107 031b 	add.w	r3, r7, #27
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d045      	beq.n	8003c5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <osThreadNew+0x74>
        name = attr->name;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <osThreadNew+0x9a>
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b38      	cmp	r3, #56	; 0x38
 8003bf4:	d805      	bhi.n	8003c02 <osThreadNew+0x9a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <osThreadNew+0x9e>
        return (NULL);
 8003c02:	2300      	movs	r3, #0
 8003c04:	e054      	b.n	8003cb0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <osThreadNew+0xd4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2bbb      	cmp	r3, #187	; 0xbb
 8003c24:	d90a      	bls.n	8003c3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <osThreadNew+0xd4>
        mem = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	e010      	b.n	8003c5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10c      	bne.n	8003c5e <osThreadNew+0xf6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <osThreadNew+0xf6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <osThreadNew+0xf6>
          mem = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c58:	e001      	b.n	8003c5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d110      	bne.n	8003c86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c6c:	9202      	str	r2, [sp, #8]
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f001 fc32 	bl	80054e4 <xTaskCreateStatic>
 8003c80:	4603      	mov	r3, r0
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e013      	b.n	8003cae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d110      	bne.n	8003cae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f001 fc7c 	bl	800559c <xTaskCreate>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <osThreadNew+0x146>
          hTask = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3738      	adds	r7, #56	; 0x38
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200001bc 	.word	0x200001bc

08003cbc <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f001 fdbf 	bl	8005844 <vTaskDelete>
#endif
  for (;;);
 8003cc6:	e7fe      	b.n	8003cc6 <osThreadExit+0xa>

08003cc8 <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd4:	f3ef 8305 	mrs	r3, IPSR
 8003cd8:	613b      	str	r3, [r7, #16]
  return(result);
 8003cda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10f      	bne.n	8003d00 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <osThreadTerminate+0x38>
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <osThreadTerminate+0x7c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d109      	bne.n	8003d08 <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8003cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8003d00:	f06f 0305 	mvn.w	r3, #5
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e017      	b.n	8003d38 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8003d0e:	f06f 0303 	mvn.w	r3, #3
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e010      	b.n	8003d38 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003d16:	69b8      	ldr	r0, [r7, #24]
 8003d18:	f001 fe3a 	bl	8005990 <eTaskGetState>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d005      	beq.n	8003d32 <osThreadTerminate+0x6a>
      stat = osOK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8003d2a:	69b8      	ldr	r0, [r7, #24]
 8003d2c:	f001 fd8a 	bl	8005844 <vTaskDelete>
 8003d30:	e002      	b.n	8003d38 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8003d32:	f06f 0302 	mvn.w	r3, #2
 8003d36:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8003d38:	69fb      	ldr	r3, [r7, #28]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200001bc 	.word	0x200001bc

08003d48 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d50:	f3ef 8305 	mrs	r3, IPSR
 8003d54:	613b      	str	r3, [r7, #16]
  return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10f      	bne.n	8003d7c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <osDelay+0x34>
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <osDelay+0x58>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d109      	bne.n	8003d84 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d70:	f3ef 8311 	mrs	r3, BASEPRI
 8003d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <osDelay+0x3c>
    stat = osErrorISR;
 8003d7c:	f06f 0305 	mvn.w	r3, #5
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e007      	b.n	8003d94 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fdca 	bl	8005928 <vTaskDelay>
    }
  }

  return (stat);
 8003d94:	697b      	ldr	r3, [r7, #20]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200001bc 	.word	0x200001bc

08003da4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db0:	f3ef 8305 	mrs	r3, IPSR
 8003db4:	613b      	str	r3, [r7, #16]
  return(result);
 8003db6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f040 8085 	bne.w	8003ec8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d17e      	bne.n	8003ec8 <osMutexNew+0x124>
 8003dca:	4b42      	ldr	r3, [pc, #264]	; (8003ed4 <osMutexNew+0x130>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d105      	bne.n	8003dde <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d174      	bne.n	8003ec8 <osMutexNew+0x124>
    if (attr != NULL) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <osMutexNew+0x48>
      type = attr->attr_bits;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	e001      	b.n	8003df0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <osMutexNew+0x5c>
      rmtx = 1U;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e001      	b.n	8003e04 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15c      	bne.n	8003ec8 <osMutexNew+0x124>
      mem = -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <osMutexNew+0x8c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b4f      	cmp	r3, #79	; 0x4f
 8003e28:	d902      	bls.n	8003e30 <osMutexNew+0x8c>
          mem = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e00c      	b.n	8003e4a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d108      	bne.n	8003e4a <osMutexNew+0xa6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <osMutexNew+0xa6>
            mem = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e001      	b.n	8003e4a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d112      	bne.n	8003e76 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	2004      	movs	r0, #4
 8003e5e:	f000 fce5 	bl	800482c <xQueueCreateMutexStatic>
 8003e62:	6278      	str	r0, [r7, #36]	; 0x24
 8003e64:	e016      	b.n	8003e94 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f000 fcdd 	bl	800482c <xQueueCreateMutexStatic>
 8003e72:	6278      	str	r0, [r7, #36]	; 0x24
 8003e74:	e00e      	b.n	8003e94 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003e82:	2004      	movs	r0, #4
 8003e84:	f000 fcba 	bl	80047fc <xQueueCreateMutex>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24
 8003e8a:	e003      	b.n	8003e94 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f000 fcb5 	bl	80047fc <xQueueCreateMutex>
 8003e92:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <osMutexNew+0x110>
        if (attr != NULL) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <osMutexNew+0x104>
          name = attr->name;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e001      	b.n	8003eac <osMutexNew+0x108>
        } else {
          name = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003eac:	6979      	ldr	r1, [r7, #20]
 8003eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb0:	f001 fa90 	bl	80053d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <osMutexNew+0x124>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200001bc 	.word	0x200001bc

08003ed8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ef6:	f3ef 8305 	mrs	r3, IPSR
 8003efa:	613b      	str	r3, [r7, #16]
  return(result);
 8003efc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8310 	mrs	r3, PRIMASK
 8003f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <osMutexAcquire+0x4a>
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <osMutexAcquire+0xb8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d109      	bne.n	8003f2a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f16:	f3ef 8311 	mrs	r3, BASEPRI
 8003f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003f22:	f06f 0305 	mvn.w	r3, #5
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e02c      	b.n	8003f84 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003f30:	f06f 0303 	mvn.w	r3, #3
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e025      	b.n	8003f84 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d011      	beq.n	8003f62 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	69b8      	ldr	r0, [r7, #24]
 8003f42:	f000 fcc2 	bl	80048ca <xQueueTakeMutexRecursive>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d01b      	beq.n	8003f84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003f52:	f06f 0301 	mvn.w	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e014      	b.n	8003f84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003f5a:	f06f 0302 	mvn.w	r3, #2
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e010      	b.n	8003f84 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003f62:	6839      	ldr	r1, [r7, #0]
 8003f64:	69b8      	ldr	r0, [r7, #24]
 8003f66:	f000 ff5d 	bl	8004e24 <xQueueSemaphoreTake>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d009      	beq.n	8003f84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003f76:	f06f 0301 	mvn.w	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e002      	b.n	8003f84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003f7e:	f06f 0302 	mvn.w	r3, #2
 8003f82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003f84:	69fb      	ldr	r3, [r7, #28]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200001bc 	.word	0x200001bc

08003f94 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb0:	f3ef 8305 	mrs	r3, IPSR
 8003fb4:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <osMutexRelease+0x48>
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <osMutexRelease+0x9c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d109      	bne.n	8003fe4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003fdc:	f06f 0305 	mvn.w	r3, #5
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e01f      	b.n	8004024 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003fea:	f06f 0303 	mvn.w	r3, #3
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e018      	b.n	8004024 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003ff8:	69b8      	ldr	r0, [r7, #24]
 8003ffa:	f000 fc32 	bl	8004862 <xQueueGiveMutexRecursive>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b01      	cmp	r3, #1
 8004002:	d00f      	beq.n	8004024 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004004:	f06f 0302 	mvn.w	r3, #2
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	e00b      	b.n	8004024 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800400c:	2300      	movs	r3, #0
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	69b8      	ldr	r0, [r7, #24]
 8004014:	f000 fc90 	bl	8004938 <xQueueGenericSend>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d002      	beq.n	8004024 <osMutexRelease+0x90>
        stat = osErrorResource;
 800401e:	f06f 0302 	mvn.w	r3, #2
 8004022:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004024:	69fb      	ldr	r3, [r7, #28]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200001bc 	.word	0x200001bc

08004034 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004044:	f3ef 8305 	mrs	r3, IPSR
 8004048:	61bb      	str	r3, [r7, #24]
  return(result);
 800404a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800404c:	2b00      	cmp	r3, #0
 800404e:	d16f      	bne.n	8004130 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004050:	f3ef 8310 	mrs	r3, PRIMASK
 8004054:	617b      	str	r3, [r7, #20]
  return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d169      	bne.n	8004130 <osMessageQueueNew+0xfc>
 800405c:	4b37      	ldr	r3, [pc, #220]	; (800413c <osMessageQueueNew+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d105      	bne.n	8004070 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004064:	f3ef 8311 	mrs	r3, BASEPRI
 8004068:	613b      	str	r3, [r7, #16]
  return(result);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d15f      	bne.n	8004130 <osMessageQueueNew+0xfc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d05c      	beq.n	8004130 <osMessageQueueNew+0xfc>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d059      	beq.n	8004130 <osMessageQueueNew+0xfc>
    mem = -1;
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d029      	beq.n	80040dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <osMessageQueueNew+0x82>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b4f      	cmp	r3, #79	; 0x4f
 8004096:	d90e      	bls.n	80040b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <osMessageQueueNew+0x82>
        mem = 1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	e014      	b.n	80040e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d110      	bne.n	80040e0 <osMessageQueueNew+0xac>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <osMessageQueueNew+0xac>
          mem = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	e001      	b.n	80040e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10b      	bne.n	80040fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2100      	movs	r1, #0
 80040f0:	9100      	str	r1, [sp, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa8f 	bl	8004618 <xQueueGenericCreateStatic>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
 80040fc:	e008      	b.n	8004110 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004104:	2200      	movs	r2, #0
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fafc 	bl	8004706 <xQueueGenericCreate>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <osMessageQueueNew+0xf0>
        name = attr->name;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e001      	b.n	8004128 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004128:	69f9      	ldr	r1, [r7, #28]
 800412a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412c:	f001 f952 	bl	80053d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004132:	4618      	mov	r0, r3
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200001bc 	.word	0x200001bc

08004140 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004158:	f3ef 8305 	mrs	r3, IPSR
 800415c:	61fb      	str	r3, [r7, #28]
  return(result);
 800415e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10f      	bne.n	8004184 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004164:	f3ef 8310 	mrs	r3, PRIMASK
 8004168:	61bb      	str	r3, [r7, #24]
  return(result);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <osMessageQueuePut+0x44>
 8004170:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <osMessageQueuePut+0xe0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d12e      	bne.n	80041d6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004178:	f3ef 8311 	mrs	r3, BASEPRI
 800417c:	617b      	str	r3, [r7, #20]
  return(result);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d028      	beq.n	80041d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <osMessageQueuePut+0x56>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <osMessageQueuePut+0x56>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004196:	f06f 0303 	mvn.w	r3, #3
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800419c:	e039      	b.n	8004212 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80041a2:	f107 0210 	add.w	r2, r7, #16
 80041a6:	2300      	movs	r3, #0
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	6a38      	ldr	r0, [r7, #32]
 80041ac:	f000 fcc2 	bl	8004b34 <xQueueGenericSendFromISR>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d003      	beq.n	80041be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80041b6:	f06f 0302 	mvn.w	r3, #2
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041bc:	e029      	b.n	8004212 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d026      	beq.n	8004212 <osMessageQueuePut+0xd2>
 80041c4:	4b17      	ldr	r3, [pc, #92]	; (8004224 <osMessageQueuePut+0xe4>)
 80041c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80041d4:	e01d      	b.n	8004212 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <osMessageQueuePut+0xa2>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80041e2:	f06f 0303 	mvn.w	r3, #3
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	e014      	b.n	8004214 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80041ea:	2300      	movs	r3, #0
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	6a38      	ldr	r0, [r7, #32]
 80041f2:	f000 fba1 	bl	8004938 <xQueueGenericSend>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d00b      	beq.n	8004214 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004202:	f06f 0301 	mvn.w	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e004      	b.n	8004214 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800420a:	f06f 0302 	mvn.w	r3, #2
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e000      	b.n	8004214 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004212:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200001bc 	.word	0x200001bc
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800423e:	f3ef 8305 	mrs	r3, IPSR
 8004242:	61fb      	str	r3, [r7, #28]
  return(result);
 8004244:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10f      	bne.n	800426a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424a:	f3ef 8310 	mrs	r3, PRIMASK
 800424e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <osMessageQueueGet+0x42>
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <osMessageQueueGet+0xdc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d12e      	bne.n	80042bc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800425e:	f3ef 8311 	mrs	r3, BASEPRI
 8004262:	617b      	str	r3, [r7, #20]
  return(result);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <osMessageQueueGet+0x54>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <osMessageQueueGet+0x54>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800427c:	f06f 0303 	mvn.w	r3, #3
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004282:	e038      	b.n	80042f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004288:	f107 0310 	add.w	r3, r7, #16
 800428c:	461a      	mov	r2, r3
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f000 fed3 	bl	800503c <xQueueReceiveFromISR>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d003      	beq.n	80042a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800429c:	f06f 0302 	mvn.w	r3, #2
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042a2:	e028      	b.n	80042f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d025      	beq.n	80042f6 <osMessageQueueGet+0xce>
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <osMessageQueueGet+0xe0>)
 80042ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042ba:	e01c      	b.n	80042f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <osMessageQueueGet+0xa0>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80042c8:	f06f 0303 	mvn.w	r3, #3
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	e013      	b.n	80042f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	6a38      	ldr	r0, [r7, #32]
 80042d6:	f000 fcc5 	bl	8004c64 <xQueueReceive>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d00b      	beq.n	80042f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80042e6:	f06f 0301 	mvn.w	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e004      	b.n	80042f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80042ee:	f06f 0302 	mvn.w	r3, #2
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	e000      	b.n	80042f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200001bc 	.word	0x200001bc
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004318:	f3ef 8305 	mrs	r3, IPSR
 800431c:	617b      	str	r3, [r7, #20]
  return(result);
 800431e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10f      	bne.n	8004344 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	613b      	str	r3, [r7, #16]
  return(result);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <osMessageQueueDelete+0x38>
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <osMessageQueueDelete+0x68>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d109      	bne.n	800434c <osMessageQueueDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004338:	f3ef 8311 	mrs	r3, BASEPRI
 800433c:	60fb      	str	r3, [r7, #12]
  return(result);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8004344:	f06f 0305 	mvn.w	r3, #5
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e00e      	b.n	800436a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8004352:	f06f 0303 	mvn.w	r3, #3
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e007      	b.n	800436a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800435a:	69b8      	ldr	r0, [r7, #24]
 800435c:	f001 f864 	bl	8005428 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8004364:	69b8      	ldr	r0, [r7, #24]
 8004366:	f000 fee9 	bl	800513c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800436a:	69fb      	ldr	r3, [r7, #28]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200001bc 	.word	0x200001bc

08004378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4a06      	ldr	r2, [pc, #24]	; (80043a8 <vApplicationGetIdleTaskMemory+0x30>)
 800438e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	200001c0 	.word	0x200001c0
 80043a8:	2000027c 	.word	0x2000027c

080043ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80043bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4a06      	ldr	r2, [pc, #24]	; (80043dc <vApplicationGetTimerTaskMemory+0x30>)
 80043c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ca:	601a      	str	r2, [r3, #0]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	2000047c 	.word	0x2000047c
 80043dc:	20000538 	.word	0x20000538

080043e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f103 0208 	add.w	r2, r3, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f04f 32ff 	mov.w	r2, #4294967295
 80043f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f103 0208 	add.w	r2, r3, #8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f103 0208 	add.w	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d103      	bne.n	80044a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e00c      	b.n	80044bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3308      	adds	r3, #8
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e002      	b.n	80044b0 <vListInsert+0x2e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d2f6      	bcs.n	80044aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6892      	ldr	r2, [r2, #8]
 800450a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d103      	bne.n	8004528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004572:	f002 fd07 	bl	8006f84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	3b01      	subs	r3, #1
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	22ff      	movs	r2, #255	; 0xff
 80045b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	; 0xff
 80045be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01a      	beq.n	8004606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3310      	adds	r3, #16
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fcd3 	bl	8005f80 <xTaskRemoveFromEventList>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d012      	beq.n	8004606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <xQueueGenericReset+0xcc>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	e009      	b.n	8004606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3310      	adds	r3, #16
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fef2 	bl	80043e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3324      	adds	r3, #36	; 0x24
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff feed 	bl	80043e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004606:	f002 fced 	bl	8006fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	; 0x38
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <xQueueGenericCreateStatic+0x52>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <xQueueGenericCreateStatic+0x56>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xQueueGenericCreateStatic+0x58>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <xQueueGenericCreateStatic+0x7e>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <xQueueGenericCreateStatic+0x82>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xQueueGenericCreateStatic+0x84>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	61fb      	str	r3, [r7, #28]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046b6:	2350      	movs	r3, #80	; 0x50
 80046b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d00a      	beq.n	80046d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	61bb      	str	r3, [r7, #24]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f843 	bl	8004782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	3730      	adds	r7, #48	; 0x30
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4613      	mov	r3, r2
 8004712:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <xQueueGenericCreate+0x2a>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	613b      	str	r3, [r7, #16]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	e004      	b.n	8004746 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3350      	adds	r3, #80	; 0x50
 800474a:	4618      	mov	r0, r3
 800474c:	f002 fd3c 	bl	80071c8 <pvPortMalloc>
 8004750:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	3350      	adds	r3, #80	; 0x50
 800475c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004766:	79fa      	ldrb	r2, [r7, #7]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f805 	bl	8004782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004778:	69bb      	ldr	r3, [r7, #24]
	}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e002      	b.n	80047a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047b0:	2101      	movs	r1, #1
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f7ff fec8 	bl	8004548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80047e8:	2300      	movs	r3, #0
 80047ea:	2200      	movs	r2, #0
 80047ec:	2100      	movs	r1, #0
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8a2 	bl	8004938 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	461a      	mov	r2, r3
 8004812:	6939      	ldr	r1, [r7, #16]
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f7ff ff76 	bl	8004706 <xQueueGenericCreate>
 800481a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff ffd3 	bl	80047c8 <prvInitialiseMutex>

		return pxNewQueue;
 8004822:	68fb      	ldr	r3, [r7, #12]
	}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	4603      	mov	r3, r0
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	6939      	ldr	r1, [r7, #16]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff fee4 	bl	8004618 <xQueueGenericCreateStatic>
 8004850:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ffb8 	bl	80047c8 <prvInitialiseMutex>

		return pxNewQueue;
 8004858:	68fb      	ldr	r3, [r7, #12]
	}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	685c      	ldr	r4, [r3, #4]
 800488e:	f001 fd3f 	bl	8006310 <xTaskGetCurrentTaskHandle>
 8004892:	4603      	mov	r3, r0
 8004894:	429c      	cmp	r4, r3
 8004896:	d111      	bne.n	80048bc <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80048aa:	2300      	movs	r3, #0
 80048ac:	2200      	movs	r2, #0
 80048ae:	2100      	movs	r1, #0
 80048b0:	6938      	ldr	r0, [r7, #16]
 80048b2:	f000 f841 	bl	8004938 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e001      	b.n	80048c0 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80048c0:	697b      	ldr	r3, [r7, #20]
	}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd90      	pop	{r4, r7, pc}

080048ca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	b087      	sub	sp, #28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	60fb      	str	r3, [r7, #12]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	685c      	ldr	r4, [r3, #4]
 80048f8:	f001 fd0a 	bl	8006310 <xTaskGetCurrentTaskHandle>
 80048fc:	4603      	mov	r3, r0
 80048fe:	429c      	cmp	r4, r3
 8004900:	d107      	bne.n	8004912 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800490c:	2301      	movs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e00c      	b.n	800492c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	6938      	ldr	r0, [r7, #16]
 8004916:	f000 fa85 	bl	8004e24 <xQueueSemaphoreTake>
 800491a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800492c:	697b      	ldr	r3, [r7, #20]
	}
 800492e:	4618      	mov	r0, r3
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}
	...

08004938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	; 0x38
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xQueueGenericSend+0x32>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <xQueueGenericSend+0x40>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <xQueueGenericSend+0x44>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <xQueueGenericSend+0x46>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <xQueueGenericSend+0x60>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d103      	bne.n	80049a6 <xQueueGenericSend+0x6e>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <xQueueGenericSend+0x72>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericSend+0x74>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c6:	f001 fcb3 	bl	8006330 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <xQueueGenericSend+0x9e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <xQueueGenericSend+0xa2>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <xQueueGenericSend+0xa4>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61fb      	str	r3, [r7, #28]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f6:	f002 fac5 	bl	8006f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <xQueueGenericSend+0xd4>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d129      	bne.n	8004a60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 fbce 	bl	80051b2 <prvCopyDataToQueue>
 8004a16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	3324      	adds	r3, #36	; 0x24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 faab 	bl	8005f80 <xTaskRemoveFromEventList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e00a      	b.n	8004a58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a58:	f002 fac4 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e063      	b.n	8004b28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a66:	f002 fabd 	bl	8006fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e05c      	b.n	8004b28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 fae5 	bl	8006048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a82:	f002 faaf 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a86:	f001 f84d 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8a:	f002 fa7b 	bl	8006f84 <vPortEnterCritical>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d103      	bne.n	8004aa4 <xQueueGenericSend+0x16c>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d103      	bne.n	8004aba <xQueueGenericSend+0x182>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aba:	f002 fa93 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abe:	1d3a      	adds	r2, r7, #4
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fad4 	bl	8006074 <xTaskCheckForTimeOut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d124      	bne.n	8004b1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 fc65 	bl	80053a2 <prvIsQueueFull>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f9fa 	bl	8005ee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aee:	f000 fbf0 	bl	80052d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004af2:	f001 f825 	bl	8005b40 <xTaskResumeAll>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f af7c 	bne.w	80049f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xQueueGenericSend+0x1f8>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	e772      	b.n	80049f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b12:	f000 fbde 	bl	80052d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b16:	f001 f813 	bl	8005b40 <xTaskResumeAll>
 8004b1a:	e76c      	b.n	80049f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fbd8 	bl	80052d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b22:	f001 f80d 	bl	8005b40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b26:	2300      	movs	r3, #0
		}
	}
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3738      	adds	r7, #56	; 0x38
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	; 0x38
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueGenericSendFromISR+0x3c>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueGenericSendFromISR+0x40>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueGenericSendFromISR+0x42>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10a      	bne.n	8004b90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	623b      	str	r3, [r7, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <xQueueGenericSendFromISR+0x6a>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x6e>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericSendFromISR+0x70>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61fb      	str	r3, [r7, #28]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bbe:	f002 fac3 	bl	8007148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61ba      	str	r2, [r7, #24]
 8004bd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <xQueueGenericSendFromISR+0xbc>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d12c      	bne.n	8004c4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c00:	f000 fad7 	bl	80051b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d112      	bne.n	8004c34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	3324      	adds	r3, #36	; 0x24
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f9b0 	bl	8005f80 <xTaskRemoveFromEventList>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e007      	b.n	8004c44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	b25a      	sxtb	r2, r3
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c44:	2301      	movs	r3, #1
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c48:	e001      	b.n	8004c4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3738      	adds	r7, #56	; 0x38
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <xQueueReceive+0x30>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	623b      	str	r3, [r7, #32]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueReceive+0x3e>
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <xQueueReceive+0x42>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueReceive+0x44>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueReceive+0x5e>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	61fb      	str	r3, [r7, #28]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc2:	f001 fb35 	bl	8006330 <xTaskGetSchedulerState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xQueueReceive+0x6e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueReceive+0x72>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueReceive+0x74>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <xQueueReceive+0x8e>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	61bb      	str	r3, [r7, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cf2:	f002 f947 	bl	8006f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01f      	beq.n	8004d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d06:	f000 fabe 	bl	8005286 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00f      	beq.n	8004d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	3310      	adds	r3, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f92e 	bl	8005f80 <xTaskRemoveFromEventList>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <xQueueReceive+0x1bc>)
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d3a:	f002 f953 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e069      	b.n	8004e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d48:	f002 f94c 	bl	8006fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e062      	b.n	8004e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d56:	f107 0310 	add.w	r3, r7, #16
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f974 	bl	8006048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d64:	f002 f93e 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d68:	f000 fedc 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d6c:	f002 f90a 	bl	8006f84 <vPortEnterCritical>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d103      	bne.n	8004d86 <xQueueReceive+0x122>
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d103      	bne.n	8004d9c <xQueueReceive+0x138>
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d9c:	f002 f922 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004da0:	1d3a      	adds	r2, r7, #4
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 f963 	bl	8006074 <xTaskCheckForTimeOut>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d123      	bne.n	8004dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db6:	f000 fade 	bl	8005376 <prvIsQueueEmpty>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d017      	beq.n	8004df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f889 	bl	8005ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd0:	f000 fa7f 	bl	80052d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dd4:	f000 feb4 	bl	8005b40 <xTaskResumeAll>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d189      	bne.n	8004cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dde:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <xQueueReceive+0x1bc>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	e780      	b.n	8004cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df2:	f000 fa6e 	bl	80052d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004df6:	f000 fea3 	bl	8005b40 <xTaskResumeAll>
 8004dfa:	e77a      	b.n	8004cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfe:	f000 fa68 	bl	80052d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e02:	f000 fe9d 	bl	8005b40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e08:	f000 fab5 	bl	8005376 <prvIsQueueEmpty>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f43f af6f 	beq.w	8004cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	e000ed04 	.word	0xe000ed04

08004e24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	61fb      	str	r3, [r7, #28]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e74:	f001 fa5c 	bl	8006330 <xTaskGetSchedulerState>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <xQueueSemaphoreTake+0x60>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <xQueueSemaphoreTake+0x64>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <xQueueSemaphoreTake+0x66>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	61bb      	str	r3, [r7, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ea4:	f002 f86e 	bl	8006f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d024      	beq.n	8004efe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	1e5a      	subs	r2, r3, #1
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004ec4:	f001 fbb4 	bl	8006630 <pvTaskIncrementMutexHeldCount>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	3310      	adds	r3, #16
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 f850 	bl	8005f80 <xTaskRemoveFromEventList>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ee6:	4b54      	ldr	r3, [pc, #336]	; (8005038 <xQueueSemaphoreTake+0x214>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ef6:	f002 f875 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e097      	b.n	800502e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d111      	bne.n	8004f28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	617b      	str	r3, [r7, #20]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004f20:	f002 f860 	bl	8006fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e082      	b.n	800502e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f888 	bl	8006048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f3c:	f002 f852 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f40:	f000 fdf0 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f44:	f002 f81e 	bl	8006f84 <vPortEnterCritical>
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d103      	bne.n	8004f5e <xQueueSemaphoreTake+0x13a>
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d103      	bne.n	8004f74 <xQueueSemaphoreTake+0x150>
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f74:	f002 f836 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f78:	463a      	mov	r2, r7
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f877 	bl	8006074 <xTaskCheckForTimeOut>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d132      	bne.n	8004ff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f8e:	f000 f9f2 	bl	8005376 <prvIsQueueEmpty>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d026      	beq.n	8004fe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004fa0:	f001 fff0 	bl	8006f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f9df 	bl	800636c <xTaskPriorityInherit>
 8004fae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004fb0:	f002 f818 	bl	8006fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 ff8f 	bl	8005ee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc4:	f000 f985 	bl	80052d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fc8:	f000 fdba 	bl	8005b40 <xTaskResumeAll>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f47f af68 	bne.w	8004ea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004fd4:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xQueueSemaphoreTake+0x214>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e75e      	b.n	8004ea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fe8:	f000 f973 	bl	80052d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fec:	f000 fda8 	bl	8005b40 <xTaskResumeAll>
 8004ff0:	e758      	b.n	8004ea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ff4:	f000 f96d 	bl	80052d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff8:	f000 fda2 	bl	8005b40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ffe:	f000 f9ba 	bl	8005376 <prvIsQueueEmpty>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f43f af4d 	beq.w	8004ea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005010:	f001 ffb8 	bl	8006f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005016:	f000 f8b4 	bl	8005182 <prvGetDisinheritPriorityAfterTimeout>
 800501a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fa7e 	bl	8006524 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005028:	f001 ffdc 	bl	8006fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800502c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800502e:	4618      	mov	r0, r3
 8005030:	3738      	adds	r7, #56	; 0x38
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	623b      	str	r3, [r7, #32]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueReceiveFromISR+0x3a>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <xQueueReceiveFromISR+0x3e>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <xQueueReceiveFromISR+0x40>
 800507a:	2300      	movs	r3, #0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	61fb      	str	r3, [r7, #28]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005096:	f002 f857 	bl	8007148 <vPortValidateInterruptPriority>
	__asm volatile
 800509a:	f3ef 8211 	mrs	r2, BASEPRI
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	61ba      	str	r2, [r7, #24]
 80050b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02f      	beq.n	8005122 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d0:	f000 f8d9 	bl	8005286 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d112      	bne.n	800510c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	3310      	adds	r3, #16
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 ff44 	bl	8005f80 <xTaskRemoveFromEventList>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e007      	b.n	800511c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	3301      	adds	r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	b25a      	sxtb	r2, r3
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
 8005120:	e001      	b.n	8005126 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f383 8811 	msr	BASEPRI, r3
}
 8005130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005134:	4618      	mov	r0, r3
 8005136:	3738      	adds	r7, #56	; 0x38
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <vQueueDelete+0x28>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60bb      	str	r3, [r7, #8]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f95f 	bl	8005428 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f002 f8eb 	bl	8007350 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e001      	b.n	80051a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80051a4:	68fb      	ldr	r3, [r7, #12]
	}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b086      	sub	sp, #24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d14d      	bne.n	8005274 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f933 	bl	8006448 <xTaskPriorityDisinherit>
 80051e2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	e043      	b.n	8005274 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d119      	bne.n	8005226 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6898      	ldr	r0, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	461a      	mov	r2, r3
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	f002 f9e3 	bl	80075c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d32b      	bcc.n	8005274 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	e026      	b.n	8005274 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68d8      	ldr	r0, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	461a      	mov	r2, r3
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	f002 f9c9 	bl	80075c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	425b      	negs	r3, r3
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d207      	bcs.n	8005262 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	425b      	negs	r3, r3
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d105      	bne.n	8005274 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3b01      	subs	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800527c:	697b      	ldr	r3, [r7, #20]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d018      	beq.n	80052ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d303      	bcc.n	80052ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68d9      	ldr	r1, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	461a      	mov	r2, r3
 80052c4:	6838      	ldr	r0, [r7, #0]
 80052c6:	f002 f97f 	bl	80075c8 <memcpy>
	}
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052da:	f001 fe53 	bl	8006f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052e6:	e011      	b.n	800530c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fe43 	bl	8005f80 <xTaskRemoveFromEventList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005300:	f000 ff1a 	bl	8006138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3b01      	subs	r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800530c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	dce9      	bgt.n	80052e8 <prvUnlockQueue+0x16>
 8005314:	e000      	b.n	8005318 <prvUnlockQueue+0x46>
					break;
 8005316:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005320:	f001 fe60 	bl	8006fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005324:	f001 fe2e 	bl	8006f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800532e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005330:	e011      	b.n	8005356 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d012      	beq.n	8005360 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3310      	adds	r3, #16
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fe1e 	bl	8005f80 <xTaskRemoveFromEventList>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800534a:	f000 fef5 	bl	8006138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	3b01      	subs	r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dce9      	bgt.n	8005332 <prvUnlockQueue+0x60>
 800535e:	e000      	b.n	8005362 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005360:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	22ff      	movs	r2, #255	; 0xff
 8005366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800536a:	f001 fe3b 	bl	8006fe4 <vPortExitCritical>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800537e:	f001 fe01 	bl	8006f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e001      	b.n	8005394 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005394:	f001 fe26 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053aa:	f001 fdeb 	bl	8006f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d102      	bne.n	80053c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	e001      	b.n	80053c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053c4:	f001 fe0e 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e014      	b.n	800540e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053e4:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <vQueueAddToRegistry+0x50>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053f0:	490c      	ldr	r1, [pc, #48]	; (8005424 <vQueueAddToRegistry+0x50>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053fa:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <vQueueAddToRegistry+0x50>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005406:	e006      	b.n	8005416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b07      	cmp	r3, #7
 8005412:	d9e7      	bls.n	80053e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000938 	.word	0x20000938

08005428 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e016      	b.n	8005464 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005436:	4a10      	ldr	r2, [pc, #64]	; (8005478 <vQueueUnregisterQueue+0x50>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4413      	add	r3, r2
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d10b      	bne.n	800545e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005446:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <vQueueUnregisterQueue+0x50>)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2100      	movs	r1, #0
 800544c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005450:	4a09      	ldr	r2, [pc, #36]	; (8005478 <vQueueUnregisterQueue+0x50>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	2200      	movs	r2, #0
 800545a:	605a      	str	r2, [r3, #4]
				break;
 800545c:	e006      	b.n	800546c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b07      	cmp	r3, #7
 8005468:	d9e5      	bls.n	8005436 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800546a:	bf00      	nop
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000938 	.word	0x20000938

0800547c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800548c:	f001 fd7a 	bl	8006f84 <vPortEnterCritical>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005496:	b25b      	sxtb	r3, r3
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d103      	bne.n	80054a6 <vQueueWaitForMessageRestricted+0x2a>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d103      	bne.n	80054bc <vQueueWaitForMessageRestricted+0x40>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	f001 fd92 	bl	8006fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fd29 	bl	8005f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff fefb 	bl	80052d2 <prvUnlockQueue>
	}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	; 0x38
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xTaskCreateStatic+0x2a>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	623b      	str	r3, [r7, #32]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <xTaskCreateStatic+0x46>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800552a:	23bc      	movs	r3, #188	; 0xbc
 800552c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2bbc      	cmp	r3, #188	; 0xbc
 8005532:	d00a      	beq.n	800554a <xTaskCreateStatic+0x66>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61bb      	str	r3, [r7, #24]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01e      	beq.n	800558e <xTaskCreateStatic+0xaa>
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01b      	beq.n	800558e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	2202      	movs	r2, #2
 8005564:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005568:	2300      	movs	r3, #0
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f851 	bl	8005628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005588:	f000 f8ec 	bl	8005764 <prvAddNewTaskToReadyList>
 800558c:	e001      	b.n	8005592 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005592:	697b      	ldr	r3, [r7, #20]
	}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 fe09 	bl	80071c8 <pvPortMalloc>
 80055b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00e      	beq.n	80055dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80055be:	20bc      	movs	r0, #188	; 0xbc
 80055c0:	f001 fe02 	bl	80071c8 <pvPortMalloc>
 80055c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
 80055d2:	e005      	b.n	80055e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055d4:	6978      	ldr	r0, [r7, #20]
 80055d6:	f001 febb 	bl	8007350 <vPortFree>
 80055da:	e001      	b.n	80055e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	2300      	movs	r3, #0
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f80f 	bl	8005628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800560a:	69f8      	ldr	r0, [r7, #28]
 800560c:	f000 f8aa 	bl	8005764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e002      	b.n	800561c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800561c:	69bb      	ldr	r3, [r7, #24]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	461a      	mov	r2, r3
 8005640:	21a5      	movs	r1, #165	; 0xa5
 8005642:	f001 ffcf 	bl	80075e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005650:	3b01      	subs	r3, #1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	617b      	str	r3, [r7, #20]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	e012      	b.n	80056ac <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	7819      	ldrb	r1, [r3, #0]
 800568e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4413      	add	r3, r2
 8005694:	3334      	adds	r3, #52	; 0x34
 8005696:	460a      	mov	r2, r1
 8005698:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d9e9      	bls.n	8005686 <prvInitialiseNewTask+0x5e>
 80056b2:	e000      	b.n	80056b6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80056b4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	2b37      	cmp	r3, #55	; 0x37
 80056c2:	d901      	bls.n	80056c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056c4:	2337      	movs	r3, #55	; 0x37
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	2200      	movs	r2, #0
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	3304      	adds	r3, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fe9e 	bl	8004420 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	3318      	adds	r3, #24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fe99 	bl	8004420 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	2200      	movs	r2, #0
 8005710:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	3354      	adds	r3, #84	; 0x54
 8005718:	2260      	movs	r2, #96	; 0x60
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 ff61 	bl	80075e4 <memset>
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <prvInitialiseNewTask+0x130>)
 8005726:	659a      	str	r2, [r3, #88]	; 0x58
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <prvInitialiseNewTask+0x134>)
 800572c:	65da      	str	r2, [r3, #92]	; 0x5c
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <prvInitialiseNewTask+0x138>)
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	69b8      	ldr	r0, [r7, #24]
 800573a:	f001 faf3 	bl	8006d24 <pxPortInitialiseStack>
 800573e:	4602      	mov	r2, r0
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005750:	bf00      	nop
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08007960 	.word	0x08007960
 800575c:	08007980 	.word	0x08007980
 8005760:	08007940 	.word	0x08007940

08005764 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800576c:	f001 fc0a 	bl	8006f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <prvAddNewTaskToReadyList+0xc4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <prvAddNewTaskToReadyList+0xc4>)
 8005778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800577a:	4b2c      	ldr	r3, [pc, #176]	; (800582c <prvAddNewTaskToReadyList+0xc8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <prvAddNewTaskToReadyList+0xc8>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <prvAddNewTaskToReadyList+0xc4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d110      	bne.n	80057b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005790:	f000 fcf6 	bl	8006180 <prvInitialiseTaskLists>
 8005794:	e00d      	b.n	80057b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <prvAddNewTaskToReadyList+0xcc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800579e:	4b23      	ldr	r3, [pc, #140]	; (800582c <prvAddNewTaskToReadyList+0xc8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d802      	bhi.n	80057b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <prvAddNewTaskToReadyList+0xc8>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057b2:	4b20      	ldr	r3, [pc, #128]	; (8005834 <prvAddNewTaskToReadyList+0xd0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3301      	adds	r3, #1
 80057b8:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <prvAddNewTaskToReadyList+0xd0>)
 80057ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057bc:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <prvAddNewTaskToReadyList+0xd0>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <prvAddNewTaskToReadyList+0xd4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d903      	bls.n	80057d8 <prvAddNewTaskToReadyList+0x74>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a18      	ldr	r2, [pc, #96]	; (8005838 <prvAddNewTaskToReadyList+0xd4>)
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <prvAddNewTaskToReadyList+0xd8>)
 80057e6:	441a      	add	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fe23 	bl	800443a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057f4:	f001 fbf6 	bl	8006fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <prvAddNewTaskToReadyList+0xcc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <prvAddNewTaskToReadyList+0xc8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	429a      	cmp	r2, r3
 800580c:	d207      	bcs.n	800581e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <prvAddNewTaskToReadyList+0xdc>)
 8005810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000e4c 	.word	0x20000e4c
 800582c:	20000978 	.word	0x20000978
 8005830:	20000e58 	.word	0x20000e58
 8005834:	20000e68 	.word	0x20000e68
 8005838:	20000e54 	.word	0x20000e54
 800583c:	2000097c 	.word	0x2000097c
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800584c:	f001 fb9a 	bl	8006f84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <vTaskDelete+0x18>
 8005856:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <vTaskDelete+0xc4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	e000      	b.n	800585e <vTaskDelete+0x1a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fe45 	bl	80044f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3318      	adds	r3, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fe3c 	bl	80044f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <vTaskDelete+0xc8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	4a22      	ldr	r2, [pc, #136]	; (800590c <vTaskDelete+0xc8>)
 8005884:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005886:	4b20      	ldr	r3, [pc, #128]	; (8005908 <vTaskDelete+0xc4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d10b      	bne.n	80058a8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	481e      	ldr	r0, [pc, #120]	; (8005910 <vTaskDelete+0xcc>)
 8005898:	f7fe fdcf 	bl	800443a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <vTaskDelete+0xd0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <vTaskDelete+0xd0>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e009      	b.n	80058bc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <vTaskDelete+0xd4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <vTaskDelete+0xd4>)
 80058b0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fcd2 	bl	800625c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80058b8:	f000 fd04 	bl	80062c4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80058bc:	f001 fb92 	bl	8006fe4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <vTaskDelete+0xd8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80058c8:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <vTaskDelete+0xc4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d116      	bne.n	8005900 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <vTaskDelete+0xdc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <vTaskDelete+0xac>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60bb      	str	r3, [r7, #8]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <vTaskDelete+0xe0>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000978 	.word	0x20000978
 800590c:	20000e68 	.word	0x20000e68
 8005910:	20000e20 	.word	0x20000e20
 8005914:	20000e34 	.word	0x20000e34
 8005918:	20000e4c 	.word	0x20000e4c
 800591c:	20000e58 	.word	0x20000e58
 8005920:	20000e74 	.word	0x20000e74
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <vTaskDelay+0x60>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <vTaskDelay+0x30>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005958:	f000 f8e4 	bl	8005b24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800595c:	2100      	movs	r1, #0
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fe7a 	bl	8006658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005964:	f000 f8ec 	bl	8005b40 <xTaskResumeAll>
 8005968:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <vTaskDelay+0x64>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000e74 	.word	0x20000e74
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <eTaskGetState+0x28>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60bb      	str	r3, [r7, #8]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <eTaskGetState+0xa0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d102      	bne.n	80059c8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]
 80059c6:	e02d      	b.n	8005a24 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 80059c8:	f001 fadc 	bl	8006f84 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80059d2:	f001 fb07 	bl	8006fe4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <eTaskGetState+0xa4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d004      	beq.n	80059ea <eTaskGetState+0x5a>
 80059e0:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <eTaskGetState+0xa8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d102      	bne.n	80059f0 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80059ea:	2302      	movs	r3, #2
 80059ec:	75fb      	strb	r3, [r7, #23]
 80059ee:	e019      	b.n	8005a24 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <eTaskGetState+0xac>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8005a00:	2303      	movs	r3, #3
 8005a02:	75fb      	strb	r3, [r7, #23]
 8005a04:	e00e      	b.n	8005a24 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8005a06:	2302      	movs	r3, #2
 8005a08:	75fb      	strb	r3, [r7, #23]
 8005a0a:	e00b      	b.n	8005a24 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <eTaskGetState+0xb0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d002      	beq.n	8005a1a <eTaskGetState+0x8a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	75fb      	strb	r3, [r7, #23]
 8005a1e:	e001      	b.n	8005a24 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000978 	.word	0x20000978
 8005a34:	20000e04 	.word	0x20000e04
 8005a38:	20000e08 	.word	0x20000e08
 8005a3c:	20000e38 	.word	0x20000e38
 8005a40:	20000e20 	.word	0x20000e20

08005a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a52:	463a      	mov	r2, r7
 8005a54:	1d39      	adds	r1, r7, #4
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fc8c 	bl	8004378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	9202      	str	r2, [sp, #8]
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	460a      	mov	r2, r1
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <vTaskStartScheduler+0xc0>)
 8005a74:	4824      	ldr	r0, [pc, #144]	; (8005b08 <vTaskStartScheduler+0xc4>)
 8005a76:	f7ff fd35 	bl	80054e4 <xTaskCreateStatic>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <vTaskStartScheduler+0xc8>)
 8005a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a80:	4b22      	ldr	r3, [pc, #136]	; (8005b0c <vTaskStartScheduler+0xc8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e001      	b.n	8005a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a98:	f000 fe32 	bl	8006700 <xTimerCreateTimerTask>
 8005a9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11b      	bne.n	8005adc <vTaskStartScheduler+0x98>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <vTaskStartScheduler+0xcc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3354      	adds	r3, #84	; 0x54
 8005abe:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <vTaskStartScheduler+0xd0>)
 8005ac0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <vTaskStartScheduler+0xd4>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <vTaskStartScheduler+0xd8>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ad0:	4b13      	ldr	r3, [pc, #76]	; (8005b20 <vTaskStartScheduler+0xdc>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ad6:	f001 f9b3 	bl	8006e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ada:	e00e      	b.n	8005afa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d10a      	bne.n	8005afa <vTaskStartScheduler+0xb6>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <vTaskStartScheduler+0xb4>
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08007818 	.word	0x08007818
 8005b08:	08006151 	.word	0x08006151
 8005b0c:	20000e70 	.word	0x20000e70
 8005b10:	20000978 	.word	0x20000978
 8005b14:	20000028 	.word	0x20000028
 8005b18:	20000e6c 	.word	0x20000e6c
 8005b1c:	20000e58 	.word	0x20000e58
 8005b20:	20000e50 	.word	0x20000e50

08005b24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <vTaskSuspendAll+0x18>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a03      	ldr	r2, [pc, #12]	; (8005b3c <vTaskSuspendAll+0x18>)
 8005b30:	6013      	str	r3, [r2, #0]
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000e74 	.word	0x20000e74

08005b40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b4e:	4b42      	ldr	r3, [pc, #264]	; (8005c58 <xTaskResumeAll+0x118>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	603b      	str	r3, [r7, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b6c:	f001 fa0a 	bl	8006f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b70:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <xTaskResumeAll+0x118>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	4a38      	ldr	r2, [pc, #224]	; (8005c58 <xTaskResumeAll+0x118>)
 8005b78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b7a:	4b37      	ldr	r3, [pc, #220]	; (8005c58 <xTaskResumeAll+0x118>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d162      	bne.n	8005c48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b82:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <xTaskResumeAll+0x11c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d05e      	beq.n	8005c48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b8a:	e02f      	b.n	8005bec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b8c:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <xTaskResumeAll+0x120>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3318      	adds	r3, #24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fcab 	bl	80044f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fca6 	bl	80044f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <xTaskResumeAll+0x124>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <xTaskResumeAll+0x7c>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4a2a      	ldr	r2, [pc, #168]	; (8005c64 <xTaskResumeAll+0x124>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <xTaskResumeAll+0x128>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7fe fc31 	bl	800443a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <xTaskResumeAll+0x12c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005be6:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <xTaskResumeAll+0x130>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <xTaskResumeAll+0x120>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1cb      	bne.n	8005b8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bfa:	f000 fb63 	bl	80062c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <xTaskResumeAll+0x134>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c0a:	f000 f847 	bl	8005c9c <xTaskIncrementTick>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <xTaskResumeAll+0x130>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f1      	bne.n	8005c0a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <xTaskResumeAll+0x134>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <xTaskResumeAll+0x130>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <xTaskResumeAll+0x138>)
 8005c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c48:	f001 f9cc 	bl	8006fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000e74 	.word	0x20000e74
 8005c5c:	20000e4c 	.word	0x20000e4c
 8005c60:	20000e0c 	.word	0x20000e0c
 8005c64:	20000e54 	.word	0x20000e54
 8005c68:	2000097c 	.word	0x2000097c
 8005c6c:	20000978 	.word	0x20000978
 8005c70:	20000e60 	.word	0x20000e60
 8005c74:	20000e5c 	.word	0x20000e5c
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <xTaskGetTickCount+0x1c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c88:	687b      	ldr	r3, [r7, #4]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000e50 	.word	0x20000e50

08005c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca6:	4b51      	ldr	r3, [pc, #324]	; (8005dec <xTaskIncrementTick+0x150>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 808e 	bne.w	8005dcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb0:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <xTaskIncrementTick+0x154>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb8:	4a4d      	ldr	r2, [pc, #308]	; (8005df0 <xTaskIncrementTick+0x154>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d120      	bne.n	8005d06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc4:	4b4b      	ldr	r3, [pc, #300]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskIncrementTick+0x46>
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <xTaskIncrementTick+0x15c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a41      	ldr	r2, [pc, #260]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	4a41      	ldr	r2, [pc, #260]	; (8005df8 <xTaskIncrementTick+0x15c>)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <xTaskIncrementTick+0x160>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <xTaskIncrementTick+0x160>)
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	f000 fadf 	bl	80062c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xTaskIncrementTick+0x164>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d34e      	bcc.n	8005dae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d10:	4b38      	ldr	r3, [pc, #224]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <xTaskIncrementTick+0x82>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <xTaskIncrementTick+0x84>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d24:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <xTaskIncrementTick+0x164>)
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2a:	601a      	str	r2, [r3, #0]
					break;
 8005d2c:	e03f      	b.n	8005dae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d2e:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d203      	bcs.n	8005d4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d46:	4a2e      	ldr	r2, [pc, #184]	; (8005e00 <xTaskIncrementTick+0x164>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6013      	str	r3, [r2, #0]
						break;
 8005d4c:	e02f      	b.n	8005dae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fbce 	bl	80044f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	3318      	adds	r3, #24
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe fbc5 	bl	80044f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	4b25      	ldr	r3, [pc, #148]	; (8005e04 <xTaskIncrementTick+0x168>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d903      	bls.n	8005d7e <xTaskIncrementTick+0xe2>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	4a22      	ldr	r2, [pc, #136]	; (8005e04 <xTaskIncrementTick+0x168>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <xTaskIncrementTick+0x16c>)
 8005d8c:	441a      	add	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f7fe fb50 	bl	800443a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <xTaskIncrementTick+0x170>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d3b3      	bcc.n	8005d10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dac:	e7b0      	b.n	8005d10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dae:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <xTaskIncrementTick+0x170>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	4914      	ldr	r1, [pc, #80]	; (8005e08 <xTaskIncrementTick+0x16c>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d907      	bls.n	8005dd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e004      	b.n	8005dd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <xTaskIncrementTick+0x174>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <xTaskIncrementTick+0x174>)
 8005dd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <xTaskIncrementTick+0x178>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005de2:	697b      	ldr	r3, [r7, #20]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20000e74 	.word	0x20000e74
 8005df0:	20000e50 	.word	0x20000e50
 8005df4:	20000e04 	.word	0x20000e04
 8005df8:	20000e08 	.word	0x20000e08
 8005dfc:	20000e64 	.word	0x20000e64
 8005e00:	20000e6c 	.word	0x20000e6c
 8005e04:	20000e54 	.word	0x20000e54
 8005e08:	2000097c 	.word	0x2000097c
 8005e0c:	20000978 	.word	0x20000978
 8005e10:	20000e5c 	.word	0x20000e5c
 8005e14:	20000e60 	.word	0x20000e60

08005e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ec8 <vTaskSwitchContext+0xb0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <vTaskSwitchContext+0xb4>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e2c:	e046      	b.n	8005ebc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e2e:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <vTaskSwitchContext+0xb4>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e34:	4b26      	ldr	r3, [pc, #152]	; (8005ed0 <vTaskSwitchContext+0xb8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e010      	b.n	8005e5e <vTaskSwitchContext+0x46>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	607b      	str	r3, [r7, #4]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vTaskSwitchContext+0x3e>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	491d      	ldr	r1, [pc, #116]	; (8005ed4 <vTaskSwitchContext+0xbc>)
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0e4      	beq.n	8005e3c <vTaskSwitchContext+0x24>
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <vTaskSwitchContext+0xbc>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	3308      	adds	r3, #8
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d104      	bne.n	8005ea2 <vTaskSwitchContext+0x8a>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a0b      	ldr	r2, [pc, #44]	; (8005ed8 <vTaskSwitchContext+0xc0>)
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <vTaskSwitchContext+0xb8>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <vTaskSwitchContext+0xc0>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3354      	adds	r3, #84	; 0x54
 8005eb8:	4a08      	ldr	r2, [pc, #32]	; (8005edc <vTaskSwitchContext+0xc4>)
 8005eba:	6013      	str	r3, [r2, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000e74 	.word	0x20000e74
 8005ecc:	20000e60 	.word	0x20000e60
 8005ed0:	20000e54 	.word	0x20000e54
 8005ed4:	2000097c 	.word	0x2000097c
 8005ed8:	20000978 	.word	0x20000978
 8005edc:	20000028 	.word	0x20000028

08005ee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60fb      	str	r3, [r7, #12]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <vTaskPlaceOnEventList+0x44>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3318      	adds	r3, #24
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fe fab7 	bl	8004482 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f14:	2101      	movs	r1, #1
 8005f16:	6838      	ldr	r0, [r7, #0]
 8005f18:	f000 fb9e 	bl	8006658 <prvAddCurrentTaskToDelayedList>
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000978 	.word	0x20000978

08005f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3318      	adds	r3, #24
 8005f56:	4619      	mov	r1, r3
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7fe fa6e 	bl	800443a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295
 8005f68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68b8      	ldr	r0, [r7, #8]
 8005f6e:	f000 fb73 	bl	8006658 <prvAddCurrentTaskToDelayedList>
	}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000978 	.word	0x20000978

08005f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60fb      	str	r3, [r7, #12]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fa9f 	bl	80044f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <xTaskRemoveFromEventList+0xb0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11d      	bne.n	8005ffa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fa96 	bl	80044f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <xTaskRemoveFromEventList+0xb4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <xTaskRemoveFromEventList+0x5c>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <xTaskRemoveFromEventList+0xb4>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a13      	ldr	r2, [pc, #76]	; (8006038 <xTaskRemoveFromEventList+0xb8>)
 8005fea:	441a      	add	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fa21 	bl	800443a <vListInsertEnd>
 8005ff8:	e005      	b.n	8006006 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	4619      	mov	r1, r3
 8006000:	480e      	ldr	r0, [pc, #56]	; (800603c <xTaskRemoveFromEventList+0xbc>)
 8006002:	f7fe fa1a 	bl	800443a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <xTaskRemoveFromEventList+0xc0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	429a      	cmp	r2, r3
 8006012:	d905      	bls.n	8006020 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006014:	2301      	movs	r3, #1
 8006016:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <xTaskRemoveFromEventList+0xc4>)
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e001      	b.n	8006024 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006024:	697b      	ldr	r3, [r7, #20]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000e74 	.word	0x20000e74
 8006034:	20000e54 	.word	0x20000e54
 8006038:	2000097c 	.word	0x2000097c
 800603c:	20000e0c 	.word	0x20000e0c
 8006040:	20000978 	.word	0x20000978
 8006044:	20000e60 	.word	0x20000e60

08006048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <vTaskInternalSetTimeOutState+0x24>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <vTaskInternalSetTimeOutState+0x28>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000e64 	.word	0x20000e64
 8006070:	20000e50 	.word	0x20000e50

08006074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	613b      	str	r3, [r7, #16]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060b6:	f000 ff65 	bl	8006f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ba:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <xTaskCheckForTimeOut+0xbc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d102      	bne.n	80060da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	e023      	b.n	8006122 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <xTaskCheckForTimeOut+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d007      	beq.n	80060f6 <xTaskCheckForTimeOut+0x82>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	e015      	b.n	8006122 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d20b      	bcs.n	8006118 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff9b 	bl	8006048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e004      	b.n	8006122 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f000 ff5f 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8006126:	69fb      	ldr	r3, [r7, #28]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000e50 	.word	0x20000e50
 8006134:	20000e64 	.word	0x20000e64

08006138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <vTaskMissedYield+0x14>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	20000e60 	.word	0x20000e60

08006150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006158:	f000 f852 	bl	8006200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <prvIdleTask+0x28>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d9f9      	bls.n	8006158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <prvIdleTask+0x2c>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006174:	e7f0      	b.n	8006158 <prvIdleTask+0x8>
 8006176:	bf00      	nop
 8006178:	2000097c 	.word	0x2000097c
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006186:	2300      	movs	r3, #0
 8006188:	607b      	str	r3, [r7, #4]
 800618a:	e00c      	b.n	80061a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <prvInitialiseTaskLists+0x60>)
 8006198:	4413      	add	r3, r2
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f920 	bl	80043e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3301      	adds	r3, #1
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b37      	cmp	r3, #55	; 0x37
 80061aa:	d9ef      	bls.n	800618c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061ac:	480d      	ldr	r0, [pc, #52]	; (80061e4 <prvInitialiseTaskLists+0x64>)
 80061ae:	f7fe f917 	bl	80043e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <prvInitialiseTaskLists+0x68>)
 80061b4:	f7fe f914 	bl	80043e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061b8:	480c      	ldr	r0, [pc, #48]	; (80061ec <prvInitialiseTaskLists+0x6c>)
 80061ba:	f7fe f911 	bl	80043e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061be:	480c      	ldr	r0, [pc, #48]	; (80061f0 <prvInitialiseTaskLists+0x70>)
 80061c0:	f7fe f90e 	bl	80043e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c4:	480b      	ldr	r0, [pc, #44]	; (80061f4 <prvInitialiseTaskLists+0x74>)
 80061c6:	f7fe f90b 	bl	80043e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <prvInitialiseTaskLists+0x78>)
 80061cc:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <prvInitialiseTaskLists+0x64>)
 80061ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <prvInitialiseTaskLists+0x7c>)
 80061d2:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <prvInitialiseTaskLists+0x68>)
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	2000097c 	.word	0x2000097c
 80061e4:	20000ddc 	.word	0x20000ddc
 80061e8:	20000df0 	.word	0x20000df0
 80061ec:	20000e0c 	.word	0x20000e0c
 80061f0:	20000e20 	.word	0x20000e20
 80061f4:	20000e38 	.word	0x20000e38
 80061f8:	20000e04 	.word	0x20000e04
 80061fc:	20000e08 	.word	0x20000e08

08006200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006206:	e019      	b.n	800623c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006208:	f000 febc 	bl	8006f84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800620c:	4b10      	ldr	r3, [pc, #64]	; (8006250 <prvCheckTasksWaitingTermination+0x50>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3304      	adds	r3, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe f96b 	bl	80044f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800621e:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <prvCheckTasksWaitingTermination+0x54>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3b01      	subs	r3, #1
 8006224:	4a0b      	ldr	r2, [pc, #44]	; (8006254 <prvCheckTasksWaitingTermination+0x54>)
 8006226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <prvCheckTasksWaitingTermination+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	4a0a      	ldr	r2, [pc, #40]	; (8006258 <prvCheckTasksWaitingTermination+0x58>)
 8006230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006232:	f000 fed7 	bl	8006fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f810 	bl	800625c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <prvCheckTasksWaitingTermination+0x58>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e1      	bne.n	8006208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000e20 	.word	0x20000e20
 8006254:	20000e4c 	.word	0x20000e4c
 8006258:	20000e34 	.word	0x20000e34

0800625c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3354      	adds	r3, #84	; 0x54
 8006268:	4618      	mov	r0, r3
 800626a:	f001 f9d1 	bl	8007610 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006274:	2b00      	cmp	r3, #0
 8006276:	d108      	bne.n	800628a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4618      	mov	r0, r3
 800627e:	f001 f867 	bl	8007350 <vPortFree>
				vPortFree( pxTCB );
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f864 	bl	8007350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006288:	e018      	b.n	80062bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006290:	2b01      	cmp	r3, #1
 8006292:	d103      	bne.n	800629c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f85b 	bl	8007350 <vPortFree>
	}
 800629a:	e00f      	b.n	80062bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d00a      	beq.n	80062bc <prvDeleteTCB+0x60>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60fb      	str	r3, [r7, #12]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <prvDeleteTCB+0x5e>
	}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ca:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <prvResetNextTaskUnblockTime+0x44>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <prvResetNextTaskUnblockTime+0x14>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <prvResetNextTaskUnblockTime+0x16>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <prvResetNextTaskUnblockTime+0x48>)
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062e6:	e008      	b.n	80062fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <prvResetNextTaskUnblockTime+0x44>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4a05      	ldr	r2, [pc, #20]	; (800630c <prvResetNextTaskUnblockTime+0x48>)
 80062f8:	6013      	str	r3, [r2, #0]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000e04 	.word	0x20000e04
 800630c:	20000e6c 	.word	0x20000e6c

08006310 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <xTaskGetCurrentTaskHandle+0x1c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800631c:	687b      	ldr	r3, [r7, #4]
	}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000978 	.word	0x20000978

08006330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <xTaskGetSchedulerState+0x34>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800633e:	2301      	movs	r3, #1
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	e008      	b.n	8006356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006344:	4b08      	ldr	r3, [pc, #32]	; (8006368 <xTaskGetSchedulerState+0x38>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800634c:	2302      	movs	r3, #2
 800634e:	607b      	str	r3, [r7, #4]
 8006350:	e001      	b.n	8006356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006352:	2300      	movs	r3, #0
 8006354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006356:	687b      	ldr	r3, [r7, #4]
	}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20000e58 	.word	0x20000e58
 8006368:	20000e74 	.word	0x20000e74

0800636c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d056      	beq.n	8006430 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006386:	4b2d      	ldr	r3, [pc, #180]	; (800643c <xTaskPriorityInherit+0xd0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	429a      	cmp	r2, r3
 800638e:	d246      	bcs.n	800641e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	db06      	blt.n	80063a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006398:	4b28      	ldr	r3, [pc, #160]	; (800643c <xTaskPriorityInherit+0xd0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6959      	ldr	r1, [r3, #20]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a22      	ldr	r2, [pc, #136]	; (8006440 <xTaskPriorityInherit+0xd4>)
 80063b8:	4413      	add	r3, r2
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d101      	bne.n	80063c2 <xTaskPriorityInherit+0x56>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <xTaskPriorityInherit+0x58>
 80063c2:	2300      	movs	r3, #0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d022      	beq.n	800640e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe f891 	bl	80044f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063d2:	4b1a      	ldr	r3, [pc, #104]	; (800643c <xTaskPriorityInherit+0xd0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4b18      	ldr	r3, [pc, #96]	; (8006444 <xTaskPriorityInherit+0xd8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <xTaskPriorityInherit+0x84>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <xTaskPriorityInherit+0xd8>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4a10      	ldr	r2, [pc, #64]	; (8006440 <xTaskPriorityInherit+0xd4>)
 80063fe:	441a      	add	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fe f817 	bl	800443a <vListInsertEnd>
 800640c:	e004      	b.n	8006418 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <xTaskPriorityInherit+0xd0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e008      	b.n	8006430 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <xTaskPriorityInherit+0xd0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	429a      	cmp	r2, r3
 800642a:	d201      	bcs.n	8006430 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006430:	68fb      	ldr	r3, [r7, #12]
	}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000978 	.word	0x20000978
 8006440:	2000097c 	.word	0x2000097c
 8006444:	20000e54 	.word	0x20000e54

08006448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d056      	beq.n	800650c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800645e:	4b2e      	ldr	r3, [pc, #184]	; (8006518 <xTaskPriorityDisinherit+0xd0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	429a      	cmp	r2, r3
 8006466:	d00a      	beq.n	800647e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60fb      	str	r3, [r7, #12]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60bb      	str	r3, [r7, #8]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d02c      	beq.n	800650c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d128      	bne.n	800650c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3304      	adds	r3, #4
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe f818 	bl	80044f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <xTaskPriorityDisinherit+0xd4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d903      	bls.n	80064ec <xTaskPriorityDisinherit+0xa4>
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	4a0c      	ldr	r2, [pc, #48]	; (800651c <xTaskPriorityDisinherit+0xd4>)
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4a09      	ldr	r2, [pc, #36]	; (8006520 <xTaskPriorityDisinherit+0xd8>)
 80064fa:	441a      	add	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f7fd ff99 	bl	800443a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800650c:	697b      	ldr	r3, [r7, #20]
	}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000978 	.word	0x20000978
 800651c:	20000e54 	.word	0x20000e54
 8006520:	2000097c 	.word	0x2000097c

08006524 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006532:	2301      	movs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d06f      	beq.n	800661c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d902      	bls.n	800656a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e002      	b.n	8006570 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	429a      	cmp	r2, r3
 8006578:	d050      	beq.n	800661c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	429a      	cmp	r2, r3
 8006582:	d14b      	bne.n	800661c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	429a      	cmp	r2, r3
 800658c:	d10a      	bne.n	80065a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60bb      	str	r3, [r7, #8]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	db04      	blt.n	80065c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	6959      	ldr	r1, [r3, #20]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a15      	ldr	r2, [pc, #84]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80065d2:	4413      	add	r3, r2
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d101      	bne.n	80065dc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <vTaskPriorityDisinheritAfterTimeout+0xba>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01c      	beq.n	800661c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fd ff84 	bl	80044f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a0b      	ldr	r2, [pc, #44]	; (800662c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a06      	ldr	r2, [pc, #24]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800660e:	441a      	add	r2, r3
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fd ff0f 	bl	800443a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800661c:	bf00      	nop
 800661e:	3720      	adds	r7, #32
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20000978 	.word	0x20000978
 8006628:	2000097c 	.word	0x2000097c
 800662c:	20000e54 	.word	0x20000e54

08006630 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <pvTaskIncrementMutexHeldCount+0x24>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <pvTaskIncrementMutexHeldCount+0x24>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006642:	3201      	adds	r2, #1
 8006644:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006646:	4b03      	ldr	r3, [pc, #12]	; (8006654 <pvTaskIncrementMutexHeldCount+0x24>)
 8006648:	681b      	ldr	r3, [r3, #0]
	}
 800664a:	4618      	mov	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	20000978 	.word	0x20000978

08006658 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006662:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006668:	4b20      	ldr	r3, [pc, #128]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fd ff40 	bl	80044f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d10a      	bne.n	8006692 <prvAddCurrentTaskToDelayedList+0x3a>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006682:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3304      	adds	r3, #4
 8006688:	4619      	mov	r1, r3
 800668a:	4819      	ldr	r0, [pc, #100]	; (80066f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800668c:	f7fd fed5 	bl	800443a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006690:	e026      	b.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d209      	bcs.n	80066be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066aa:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f7fd fee3 	bl	8004482 <vListInsert>
}
 80066bc:	e010      	b.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066be:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <prvAddCurrentTaskToDelayedList+0x94>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fd fed9 	bl	8004482 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d202      	bcs.n	80066e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066da:	4a08      	ldr	r2, [pc, #32]	; (80066fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6013      	str	r3, [r2, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000e50 	.word	0x20000e50
 80066ec:	20000978 	.word	0x20000978
 80066f0:	20000e38 	.word	0x20000e38
 80066f4:	20000e08 	.word	0x20000e08
 80066f8:	20000e04 	.word	0x20000e04
 80066fc:	20000e6c 	.word	0x20000e6c

08006700 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800670a:	f000 facb 	bl	8006ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800670e:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <xTimerCreateTimerTask+0x80>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d021      	beq.n	800675a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800671e:	1d3a      	adds	r2, r7, #4
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	4618      	mov	r0, r3
 800672a:	f7fd fe3f 	bl	80043ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	9202      	str	r2, [sp, #8]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	2302      	movs	r3, #2
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	460a      	mov	r2, r1
 8006740:	4910      	ldr	r1, [pc, #64]	; (8006784 <xTimerCreateTimerTask+0x84>)
 8006742:	4811      	ldr	r0, [pc, #68]	; (8006788 <xTimerCreateTimerTask+0x88>)
 8006744:	f7fe fece 	bl	80054e4 <xTaskCreateStatic>
 8006748:	4603      	mov	r3, r0
 800674a:	4a10      	ldr	r2, [pc, #64]	; (800678c <xTimerCreateTimerTask+0x8c>)
 800674c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <xTimerCreateTimerTask+0x8c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006756:	2301      	movs	r3, #1
 8006758:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000ea8 	.word	0x20000ea8
 8006784:	08007820 	.word	0x08007820
 8006788:	080068ad 	.word	0x080068ad
 800678c:	20000eac 	.word	0x20000eac

08006790 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <xTimerGenericCommand+0x2e>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	623b      	str	r3, [r7, #32]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067be:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <xTimerGenericCommand+0x98>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d02a      	beq.n	800681c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	dc18      	bgt.n	800680a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067d8:	f7ff fdaa 	bl	8006330 <xTaskGetSchedulerState>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d109      	bne.n	80067f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <xTimerGenericCommand+0x98>)
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f107 0110 	add.w	r1, r7, #16
 80067ea:	2300      	movs	r3, #0
 80067ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ee:	f7fe f8a3 	bl	8004938 <xQueueGenericSend>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24
 80067f4:	e012      	b.n	800681c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <xTimerGenericCommand+0x98>)
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f107 0110 	add.w	r1, r7, #16
 80067fe:	2300      	movs	r3, #0
 8006800:	2200      	movs	r2, #0
 8006802:	f7fe f899 	bl	8004938 <xQueueGenericSend>
 8006806:	6278      	str	r0, [r7, #36]	; 0x24
 8006808:	e008      	b.n	800681c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800680a:	4b07      	ldr	r3, [pc, #28]	; (8006828 <xTimerGenericCommand+0x98>)
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f107 0110 	add.w	r1, r7, #16
 8006812:	2300      	movs	r3, #0
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	f7fe f98d 	bl	8004b34 <xQueueGenericSendFromISR>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000ea8 	.word	0x20000ea8

0800682c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006836:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <prvProcessExpiredTimer+0x7c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3304      	adds	r3, #4
 8006844:	4618      	mov	r0, r3
 8006846:	f7fd fe55 	bl	80044f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d122      	bne.n	8006898 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	18d1      	adds	r1, r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	6978      	ldr	r0, [r7, #20]
 8006860:	f000 f8c8 	bl	80069f4 <prvInsertTimerInActiveList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800686a:	2300      	movs	r3, #0
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	2100      	movs	r1, #0
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f7ff ff8b 	bl	8006790 <xTimerGenericCommand>
 800687a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60fb      	str	r3, [r7, #12]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	6978      	ldr	r0, [r7, #20]
 800689e:	4798      	blx	r3
}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000ea0 	.word	0x20000ea0

080068ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f857 	bl	800696c <prvGetNextExpireTime>
 80068be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4619      	mov	r1, r3
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f803 	bl	80068d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ca:	f000 f8d5 	bl	8006a78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068ce:	e7f1      	b.n	80068b4 <prvTimerTask+0x8>

080068d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068da:	f7ff f923 	bl	8005b24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 f866 	bl	80069b4 <prvSampleTimeNow>
 80068e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d130      	bne.n	8006952 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <prvProcessTimerOrBlockTask+0x3c>
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d806      	bhi.n	800690c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068fe:	f7ff f91f 	bl	8005b40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff91 	bl	800682c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800690a:	e024      	b.n	8006956 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <prvProcessTimerOrBlockTask+0x90>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <prvProcessTimerOrBlockTask+0x94>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4619      	mov	r1, r3
 8006932:	f7fe fda3 	bl	800547c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006936:	f7ff f903 	bl	8005b40 <xTaskResumeAll>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <prvProcessTimerOrBlockTask+0x98>)
 8006942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
}
 8006950:	e001      	b.n	8006956 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006952:	f7ff f8f5 	bl	8005b40 <xTaskResumeAll>
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000ea4 	.word	0x20000ea4
 8006964:	20000ea8 	.word	0x20000ea8
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <prvGetNextExpireTime+0x44>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <prvGetNextExpireTime+0x44>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e001      	b.n	80069a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000ea0 	.word	0x20000ea0

080069b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069bc:	f7ff f95e 	bl	8005c7c <xTaskGetTickCount>
 80069c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069c2:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <prvSampleTimeNow+0x3c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d205      	bcs.n	80069d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069cc:	f000 f908 	bl	8006be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e002      	b.n	80069de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069de:	4a04      	ldr	r2, [pc, #16]	; (80069f0 <prvSampleTimeNow+0x3c>)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000eb0 	.word	0x20000eb0

080069f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d812      	bhi.n	8006a40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e01b      	b.n	8006a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <prvInsertTimerInActiveList+0x7c>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7fd fd22 	bl	8004482 <vListInsert>
 8006a3e:	e012      	b.n	8006a66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d206      	bcs.n	8006a56 <prvInsertTimerInActiveList+0x62>
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d302      	bcc.n	8006a56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e007      	b.n	8006a66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvInsertTimerInActiveList+0x80>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f7fd fd0e 	bl	8004482 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000ea4 	.word	0x20000ea4
 8006a74:	20000ea0 	.word	0x20000ea0

08006a78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08e      	sub	sp, #56	; 0x38
 8006a7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a7e:	e09d      	b.n	8006bbc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da18      	bge.n	8006ab8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a86:	1d3b      	adds	r3, r7, #4
 8006a88:	3304      	adds	r3, #4
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	61fb      	str	r3, [r7, #28]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aae:	6850      	ldr	r0, [r2, #4]
 8006ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab2:	6892      	ldr	r2, [r2, #8]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	db7d      	blt.n	8006bba <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fd10 	bl	80044f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff ff6c 	bl	80069b4 <prvSampleTimeNow>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b09      	cmp	r3, #9
 8006ae2:	d86b      	bhi.n	8006bbc <prvProcessReceivedCommands+0x144>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <prvProcessReceivedCommands+0x74>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b15 	.word	0x08006b15
 8006af8:	08006bbd 	.word	0x08006bbd
 8006afc:	08006b71 	.word	0x08006b71
 8006b00:	08006ba9 	.word	0x08006ba9
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b15 	.word	0x08006b15
 8006b0c:	08006bbd 	.word	0x08006bbd
 8006b10:	08006b71 	.word	0x08006b71
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	18d1      	adds	r1, r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	f7ff ff67 	bl	80069f4 <prvInsertTimerInActiveList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d047      	beq.n	8006bbc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d13f      	bne.n	8006bbc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	441a      	add	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4e:	f7ff fe1f 	bl	8006790 <xTimerGenericCommand>
 8006b52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d130      	bne.n	8006bbc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	61bb      	str	r3, [r7, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	617b      	str	r3, [r7, #20]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	18d1      	adds	r1, r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba2:	f7ff ff27 	bl	80069f4 <prvInsertTimerInActiveList>
					break;
 8006ba6:	e009      	b.n	8006bbc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb4:	f000 fbcc 	bl	8007350 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bb8:	e000      	b.n	8006bbc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006bba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bbc:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <prvProcessReceivedCommands+0x164>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1d39      	adds	r1, r7, #4
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe f84d 	bl	8004c64 <xQueueReceive>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f47f af57 	bne.w	8006a80 <prvProcessReceivedCommands+0x8>
	}
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3730      	adds	r7, #48	; 0x30
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000ea8 	.word	0x20000ea8

08006be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006be6:	e045      	b.n	8006c74 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be8:	4b2c      	ldr	r3, [pc, #176]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd fc77 	bl	80044f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d12e      	bne.n	8006c74 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d90e      	bls.n	8006c46 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c34:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f7fd fc1f 	bl	8004482 <vListInsert>
 8006c44:	e016      	b.n	8006c74 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff fd9d 	bl	8006790 <xTimerGenericCommand>
 8006c56:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1b4      	bne.n	8006be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c7e:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <prvSwitchTimerLists+0xc0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <prvSwitchTimerLists+0xbc>)
 8006c8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c8c:	4a04      	ldr	r2, [pc, #16]	; (8006ca0 <prvSwitchTimerLists+0xc0>)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6013      	str	r3, [r2, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000ea0 	.word	0x20000ea0
 8006ca0:	20000ea4 	.word	0x20000ea4

08006ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006caa:	f000 f96b 	bl	8006f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d120      	bne.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cb6:	4814      	ldr	r0, [pc, #80]	; (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cb8:	f7fd fb92 	bl	80043e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cbc:	4813      	ldr	r0, [pc, #76]	; (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006cbe:	f7fd fb8f 	bl	80043e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <prvCheckForValidListAndQueue+0x6c>)
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cc8:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <prvCheckForValidListAndQueue+0x70>)
 8006cca:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <prvCheckForValidListAndQueue+0x74>)
 8006cd4:	4a11      	ldr	r2, [pc, #68]	; (8006d1c <prvCheckForValidListAndQueue+0x78>)
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	200a      	movs	r0, #10
 8006cda:	f7fd fc9d 	bl	8004618 <xQueueGenericCreateStatic>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4a08      	ldr	r2, [pc, #32]	; (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ce4:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	490b      	ldr	r1, [pc, #44]	; (8006d20 <prvCheckForValidListAndQueue+0x7c>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fb6e 	bl	80053d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f000 f974 	bl	8006fe4 <vPortExitCritical>
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000ea8 	.word	0x20000ea8
 8006d08:	20000e78 	.word	0x20000e78
 8006d0c:	20000e8c 	.word	0x20000e8c
 8006d10:	20000ea0 	.word	0x20000ea0
 8006d14:	20000ea4 	.word	0x20000ea4
 8006d18:	20000f54 	.word	0x20000f54
 8006d1c:	20000eb4 	.word	0x20000eb4
 8006d20:	08007828 	.word	0x08007828

08006d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3b04      	subs	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b04      	subs	r3, #4
 8006d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d54:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <pxPortInitialiseStack+0x64>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b14      	subs	r3, #20
 8006d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f06f 0202 	mvn.w	r2, #2
 8006d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3b20      	subs	r3, #32
 8006d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	08006d8d 	.word	0x08006d8d

08006d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <prvTaskExitError+0x54>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d00a      	beq.n	8006db6 <prvTaskExitError+0x2a>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <prvTaskExitError+0x28>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60bb      	str	r3, [r7, #8]
}
 8006dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dca:	bf00      	nop
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0fc      	beq.n	8006dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000024 	.word	0x20000024
	...

08006df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <pxCurrentTCBConst2>)
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	f380 8809 	msr	PSP, r0
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8811 	msr	BASEPRI, r0
 8006e0a:	4770      	bx	lr
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst2>:
 8006e10:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e18:	4808      	ldr	r0, [pc, #32]	; (8006e3c <prvPortStartFirstTask+0x24>)
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f380 8808 	msr	MSP, r0
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8814 	msr	CONTROL, r0
 8006e2a:	b662      	cpsie	i
 8006e2c:	b661      	cpsie	f
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	df00      	svc	0
 8006e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e3a:	bf00      	nop
 8006e3c:	e000ed08 	.word	0xe000ed08

08006e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e46:	4b46      	ldr	r3, [pc, #280]	; (8006f60 <xPortStartScheduler+0x120>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a46      	ldr	r2, [pc, #280]	; (8006f64 <xPortStartScheduler+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10a      	bne.n	8006e66 <xPortStartScheduler+0x26>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	613b      	str	r3, [r7, #16]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e66:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <xPortStartScheduler+0x120>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a3f      	ldr	r2, [pc, #252]	; (8006f68 <xPortStartScheduler+0x128>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10a      	bne.n	8006e86 <xPortStartScheduler+0x46>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <xPortStartScheduler+0x12c>)
 8006e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <xPortStartScheduler+0x130>)
 8006eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <xPortStartScheduler+0x134>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb4:	e009      	b.n	8006eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <xPortStartScheduler+0x134>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	4a2d      	ldr	r2, [pc, #180]	; (8006f74 <xPortStartScheduler+0x134>)
 8006ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b80      	cmp	r3, #128	; 0x80
 8006ed4:	d0ef      	beq.n	8006eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ed6:	4b27      	ldr	r3, [pc, #156]	; (8006f74 <xPortStartScheduler+0x134>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1c3 0307 	rsb	r3, r3, #7
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d00a      	beq.n	8006ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	60bb      	str	r3, [r7, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <xPortStartScheduler+0x134>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f2e:	f000 f8dd 	bl	80070ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <xPortStartScheduler+0x13c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f38:	f000 f8fc 	bl	8007134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <xPortStartScheduler+0x140>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <xPortStartScheduler+0x140>)
 8006f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f48:	f7ff ff66 	bl	8006e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f4c:	f7fe ff64 	bl	8005e18 <vTaskSwitchContext>
	prvTaskExitError();
 8006f50:	f7ff ff1c 	bl	8006d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed00 	.word	0xe000ed00
 8006f64:	410fc271 	.word	0x410fc271
 8006f68:	410fc270 	.word	0x410fc270
 8006f6c:	e000e400 	.word	0xe000e400
 8006f70:	20000fa4 	.word	0x20000fa4
 8006f74:	20000fa8 	.word	0x20000fa8
 8006f78:	e000ed20 	.word	0xe000ed20
 8006f7c:	20000024 	.word	0x20000024
 8006f80:	e000ef34 	.word	0xe000ef34

08006f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	607b      	str	r3, [r7, #4]
}
 8006f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <vPortEnterCritical+0x58>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <vPortEnterCritical+0x58>)
 8006fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <vPortEnterCritical+0x58>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10f      	bne.n	8006fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <vPortEnterCritical+0x5c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	603b      	str	r3, [r7, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <vPortEnterCritical+0x4a>
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	20000024 	.word	0x20000024
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <vPortExitCritical+0x50>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <vPortExitCritical+0x24>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	607b      	str	r3, [r7, #4]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <vPortExitCritical+0x50>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3b01      	subs	r3, #1
 800700e:	4a09      	ldr	r2, [pc, #36]	; (8007034 <vPortExitCritical+0x50>)
 8007010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <vPortExitCritical+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <vPortExitCritical+0x42>
 800701a:	2300      	movs	r3, #0
 800701c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f383 8811 	msr	BASEPRI, r3
}
 8007024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000024 	.word	0x20000024
	...

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007064:	f380 8811 	msr	BASEPRI, r0
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f7fe fed2 	bl	8005e18 <vTaskSwitchContext>
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	f380 8811 	msr	BASEPRI, r0
 800707c:	bc09      	pop	{r0, r3}
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6808      	ldr	r0, [r1, #0]
 8007082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007086:	f01e 0f10 	tst.w	lr, #16
 800708a:	bf08      	it	eq
 800708c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007090:	f380 8809 	msr	PSP, r0
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst>:
 80070a0:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c2:	f7fe fdeb 	bl	8005c9c <xTaskIncrementTick>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <SysTick_Handler+0x40>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f383 8811 	msr	BASEPRI, r3
}
 80070de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortSetupTimerInterrupt+0x38>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <vPortSetupTimerInterrupt+0x3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <vPortSetupTimerInterrupt+0x40>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <vPortSetupTimerInterrupt+0x44>)
 800710a:	3b01      	subs	r3, #1
 800710c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e000e010 	.word	0xe000e010
 8007124:	e000e018 	.word	0xe000e018
 8007128:	20000018 	.word	0x20000018
 800712c:	10624dd3 	.word	0x10624dd3
 8007130:	e000e014 	.word	0xe000e014

08007134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007144 <vPortEnableVFP+0x10>
 8007138:	6801      	ldr	r1, [r0, #0]
 800713a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800713e:	6001      	str	r1, [r0, #0]
 8007140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007142:	bf00      	nop
 8007144:	e000ed88 	.word	0xe000ed88

08007148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d914      	bls.n	8007184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800715a:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <vPortValidateInterruptPriority+0x70>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007164:	4b15      	ldr	r3, [pc, #84]	; (80071bc <vPortValidateInterruptPriority+0x74>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	429a      	cmp	r2, r3
 800716c:	d20a      	bcs.n	8007184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <vPortValidateInterruptPriority+0x78>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <vPortValidateInterruptPriority+0x7c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d90a      	bls.n	80071aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	603b      	str	r3, [r7, #0]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vPortValidateInterruptPriority+0x60>
	}
 80071aa:	bf00      	nop
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	e000e3f0 	.word	0xe000e3f0
 80071bc:	20000fa4 	.word	0x20000fa4
 80071c0:	e000ed0c 	.word	0xe000ed0c
 80071c4:	20000fa8 	.word	0x20000fa8

080071c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071d4:	f7fe fca6 	bl	8005b24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071d8:	4b58      	ldr	r3, [pc, #352]	; (800733c <pvPortMalloc+0x174>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071e0:	f000 f910 	bl	8007404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071e4:	4b56      	ldr	r3, [pc, #344]	; (8007340 <pvPortMalloc+0x178>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 808e 	bne.w	800730e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01d      	beq.n	8007234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071f8:	2208      	movs	r2, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4413      	add	r3, r2
 80071fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d014      	beq.n	8007234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	3308      	adds	r3, #8
 8007212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <pvPortMalloc+0x6c>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d069      	beq.n	800730e <pvPortMalloc+0x146>
 800723a:	4b42      	ldr	r3, [pc, #264]	; (8007344 <pvPortMalloc+0x17c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d864      	bhi.n	800730e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007244:	4b40      	ldr	r3, [pc, #256]	; (8007348 <pvPortMalloc+0x180>)
 8007246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007248:	4b3f      	ldr	r3, [pc, #252]	; (8007348 <pvPortMalloc+0x180>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800724e:	e004      	b.n	800725a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d903      	bls.n	800726c <pvPortMalloc+0xa4>
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f1      	bne.n	8007250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800726c:	4b33      	ldr	r3, [pc, #204]	; (800733c <pvPortMalloc+0x174>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	429a      	cmp	r2, r3
 8007274:	d04b      	beq.n	800730e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2208      	movs	r2, #8
 800727c:	4413      	add	r3, r2
 800727e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	2308      	movs	r3, #8
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	429a      	cmp	r2, r3
 8007296:	d91f      	bls.n	80072d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <pvPortMalloc+0xf8>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	613b      	str	r3, [r7, #16]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072d2:	69b8      	ldr	r0, [r7, #24]
 80072d4:	f000 f8f8 	bl	80074c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <pvPortMalloc+0x17c>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	4a18      	ldr	r2, [pc, #96]	; (8007344 <pvPortMalloc+0x17c>)
 80072e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072e6:	4b17      	ldr	r3, [pc, #92]	; (8007344 <pvPortMalloc+0x17c>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <pvPortMalloc+0x184>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d203      	bcs.n	80072fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072f2:	4b14      	ldr	r3, [pc, #80]	; (8007344 <pvPortMalloc+0x17c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a15      	ldr	r2, [pc, #84]	; (800734c <pvPortMalloc+0x184>)
 80072f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <pvPortMalloc+0x178>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	431a      	orrs	r2, r3
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800730e:	f7fe fc17 	bl	8005b40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <pvPortMalloc+0x16a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <pvPortMalloc+0x168>
	return pvReturn;
 8007332:	69fb      	ldr	r3, [r7, #28]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	; 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20005dd4 	.word	0x20005dd4
 8007340:	20005de0 	.word	0x20005de0
 8007344:	20005dd8 	.word	0x20005dd8
 8007348:	20005dcc 	.word	0x20005dcc
 800734c:	20005ddc 	.word	0x20005ddc

08007350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d048      	beq.n	80073f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007362:	2308      	movs	r3, #8
 8007364:	425b      	negs	r3, r3
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b21      	ldr	r3, [pc, #132]	; (80073fc <vPortFree+0xac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <vPortFree+0x44>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <vPortFree+0x62>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <vPortFree+0xac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d115      	bne.n	80073f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <vPortFree+0xac>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	401a      	ands	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073d8:	f7fe fba4 	bl	8005b24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vPortFree+0xb0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vPortFree+0xb0>)
 80073e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ea:	6938      	ldr	r0, [r7, #16]
 80073ec:	f000 f86c 	bl	80074c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073f0:	f7fe fba6 	bl	8005b40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073f4:	bf00      	nop
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20005de0 	.word	0x20005de0
 8007400:	20005dd8 	.word	0x20005dd8

08007404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800740a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800740e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007410:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <prvHeapInit+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <prvHeapInit+0xac>)
 8007434:	4413      	add	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <prvHeapInit+0xb0>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <prvHeapInit+0xb0>)
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007450:	2208      	movs	r2, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <prvHeapInit+0xb4>)
 8007464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvHeapInit+0xb4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvHeapInit+0xb4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvHeapInit+0xb8>)
 8007492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <prvHeapInit+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvHeapInit+0xc0>)
 800749e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000fac 	.word	0x20000fac
 80074b4:	20005dcc 	.word	0x20005dcc
 80074b8:	20005dd4 	.word	0x20005dd4
 80074bc:	20005ddc 	.word	0x20005ddc
 80074c0:	20005dd8 	.word	0x20005dd8
 80074c4:	20005de0 	.word	0x20005de0

080074c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <prvInsertBlockIntoFreeList+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <prvInsertBlockIntoFreeList+0x14>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f7      	bhi.n	80074d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d118      	bne.n	8007550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d00d      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e003      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d002      	beq.n	8007566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20005dcc 	.word	0x20005dcc
 8007578:	20005dd4 	.word	0x20005dd4

0800757c <__libc_init_array>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	4d0d      	ldr	r5, [pc, #52]	; (80075b4 <__libc_init_array+0x38>)
 8007580:	4c0d      	ldr	r4, [pc, #52]	; (80075b8 <__libc_init_array+0x3c>)
 8007582:	1b64      	subs	r4, r4, r5
 8007584:	10a4      	asrs	r4, r4, #2
 8007586:	2600      	movs	r6, #0
 8007588:	42a6      	cmp	r6, r4
 800758a:	d109      	bne.n	80075a0 <__libc_init_array+0x24>
 800758c:	4d0b      	ldr	r5, [pc, #44]	; (80075bc <__libc_init_array+0x40>)
 800758e:	4c0c      	ldr	r4, [pc, #48]	; (80075c0 <__libc_init_array+0x44>)
 8007590:	f000 f8f2 	bl	8007778 <_init>
 8007594:	1b64      	subs	r4, r4, r5
 8007596:	10a4      	asrs	r4, r4, #2
 8007598:	2600      	movs	r6, #0
 800759a:	42a6      	cmp	r6, r4
 800759c:	d105      	bne.n	80075aa <__libc_init_array+0x2e>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a4:	4798      	blx	r3
 80075a6:	3601      	adds	r6, #1
 80075a8:	e7ee      	b.n	8007588 <__libc_init_array+0xc>
 80075aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ae:	4798      	blx	r3
 80075b0:	3601      	adds	r6, #1
 80075b2:	e7f2      	b.n	800759a <__libc_init_array+0x1e>
 80075b4:	080079a0 	.word	0x080079a0
 80075b8:	080079a0 	.word	0x080079a0
 80075bc:	080079a0 	.word	0x080079a0
 80075c0:	080079a4 	.word	0x080079a4

080075c4 <__retarget_lock_acquire_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <__retarget_lock_release_recursive>:
 80075c6:	4770      	bx	lr

080075c8 <memcpy>:
 80075c8:	440a      	add	r2, r1
 80075ca:	4291      	cmp	r1, r2
 80075cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075d0:	d100      	bne.n	80075d4 <memcpy+0xc>
 80075d2:	4770      	bx	lr
 80075d4:	b510      	push	{r4, lr}
 80075d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075de:	4291      	cmp	r1, r2
 80075e0:	d1f9      	bne.n	80075d6 <memcpy+0xe>
 80075e2:	bd10      	pop	{r4, pc}

080075e4 <memset>:
 80075e4:	4402      	add	r2, r0
 80075e6:	4603      	mov	r3, r0
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d100      	bne.n	80075ee <memset+0xa>
 80075ec:	4770      	bx	lr
 80075ee:	f803 1b01 	strb.w	r1, [r3], #1
 80075f2:	e7f9      	b.n	80075e8 <memset+0x4>

080075f4 <cleanup_glue>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	460c      	mov	r4, r1
 80075f8:	6809      	ldr	r1, [r1, #0]
 80075fa:	4605      	mov	r5, r0
 80075fc:	b109      	cbz	r1, 8007602 <cleanup_glue+0xe>
 80075fe:	f7ff fff9 	bl	80075f4 <cleanup_glue>
 8007602:	4621      	mov	r1, r4
 8007604:	4628      	mov	r0, r5
 8007606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760a:	f000 b869 	b.w	80076e0 <_free_r>
	...

08007610 <_reclaim_reent>:
 8007610:	4b2c      	ldr	r3, [pc, #176]	; (80076c4 <_reclaim_reent+0xb4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4283      	cmp	r3, r0
 8007616:	b570      	push	{r4, r5, r6, lr}
 8007618:	4604      	mov	r4, r0
 800761a:	d051      	beq.n	80076c0 <_reclaim_reent+0xb0>
 800761c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800761e:	b143      	cbz	r3, 8007632 <_reclaim_reent+0x22>
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d14a      	bne.n	80076bc <_reclaim_reent+0xac>
 8007626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007628:	6819      	ldr	r1, [r3, #0]
 800762a:	b111      	cbz	r1, 8007632 <_reclaim_reent+0x22>
 800762c:	4620      	mov	r0, r4
 800762e:	f000 f857 	bl	80076e0 <_free_r>
 8007632:	6961      	ldr	r1, [r4, #20]
 8007634:	b111      	cbz	r1, 800763c <_reclaim_reent+0x2c>
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f852 	bl	80076e0 <_free_r>
 800763c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800763e:	b111      	cbz	r1, 8007646 <_reclaim_reent+0x36>
 8007640:	4620      	mov	r0, r4
 8007642:	f000 f84d 	bl	80076e0 <_free_r>
 8007646:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007648:	b111      	cbz	r1, 8007650 <_reclaim_reent+0x40>
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f848 	bl	80076e0 <_free_r>
 8007650:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007652:	b111      	cbz	r1, 800765a <_reclaim_reent+0x4a>
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f843 	bl	80076e0 <_free_r>
 800765a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800765c:	b111      	cbz	r1, 8007664 <_reclaim_reent+0x54>
 800765e:	4620      	mov	r0, r4
 8007660:	f000 f83e 	bl	80076e0 <_free_r>
 8007664:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007666:	b111      	cbz	r1, 800766e <_reclaim_reent+0x5e>
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f839 	bl	80076e0 <_free_r>
 800766e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007670:	b111      	cbz	r1, 8007678 <_reclaim_reent+0x68>
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f834 	bl	80076e0 <_free_r>
 8007678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800767a:	b111      	cbz	r1, 8007682 <_reclaim_reent+0x72>
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f82f 	bl	80076e0 <_free_r>
 8007682:	69a3      	ldr	r3, [r4, #24]
 8007684:	b1e3      	cbz	r3, 80076c0 <_reclaim_reent+0xb0>
 8007686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007688:	4620      	mov	r0, r4
 800768a:	4798      	blx	r3
 800768c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800768e:	b1b9      	cbz	r1, 80076c0 <_reclaim_reent+0xb0>
 8007690:	4620      	mov	r0, r4
 8007692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007696:	f7ff bfad 	b.w	80075f4 <cleanup_glue>
 800769a:	5949      	ldr	r1, [r1, r5]
 800769c:	b941      	cbnz	r1, 80076b0 <_reclaim_reent+0xa0>
 800769e:	3504      	adds	r5, #4
 80076a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a2:	2d80      	cmp	r5, #128	; 0x80
 80076a4:	68d9      	ldr	r1, [r3, #12]
 80076a6:	d1f8      	bne.n	800769a <_reclaim_reent+0x8a>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f819 	bl	80076e0 <_free_r>
 80076ae:	e7ba      	b.n	8007626 <_reclaim_reent+0x16>
 80076b0:	680e      	ldr	r6, [r1, #0]
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f814 	bl	80076e0 <_free_r>
 80076b8:	4631      	mov	r1, r6
 80076ba:	e7ef      	b.n	800769c <_reclaim_reent+0x8c>
 80076bc:	2500      	movs	r5, #0
 80076be:	e7ef      	b.n	80076a0 <_reclaim_reent+0x90>
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
 80076c2:	bf00      	nop
 80076c4:	20000028 	.word	0x20000028

080076c8 <__malloc_lock>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__malloc_lock+0x8>)
 80076ca:	f7ff bf7b 	b.w	80075c4 <__retarget_lock_acquire_recursive>
 80076ce:	bf00      	nop
 80076d0:	20005de4 	.word	0x20005de4

080076d4 <__malloc_unlock>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__malloc_unlock+0x8>)
 80076d6:	f7ff bf76 	b.w	80075c6 <__retarget_lock_release_recursive>
 80076da:	bf00      	nop
 80076dc:	20005de4 	.word	0x20005de4

080076e0 <_free_r>:
 80076e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e2:	2900      	cmp	r1, #0
 80076e4:	d044      	beq.n	8007770 <_free_r+0x90>
 80076e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ea:	9001      	str	r0, [sp, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f1a1 0404 	sub.w	r4, r1, #4
 80076f2:	bfb8      	it	lt
 80076f4:	18e4      	addlt	r4, r4, r3
 80076f6:	f7ff ffe7 	bl	80076c8 <__malloc_lock>
 80076fa:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <_free_r+0x94>)
 80076fc:	9801      	ldr	r0, [sp, #4]
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	b933      	cbnz	r3, 8007710 <_free_r+0x30>
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	6014      	str	r4, [r2, #0]
 8007706:	b003      	add	sp, #12
 8007708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800770c:	f7ff bfe2 	b.w	80076d4 <__malloc_unlock>
 8007710:	42a3      	cmp	r3, r4
 8007712:	d908      	bls.n	8007726 <_free_r+0x46>
 8007714:	6825      	ldr	r5, [r4, #0]
 8007716:	1961      	adds	r1, r4, r5
 8007718:	428b      	cmp	r3, r1
 800771a:	bf01      	itttt	eq
 800771c:	6819      	ldreq	r1, [r3, #0]
 800771e:	685b      	ldreq	r3, [r3, #4]
 8007720:	1949      	addeq	r1, r1, r5
 8007722:	6021      	streq	r1, [r4, #0]
 8007724:	e7ed      	b.n	8007702 <_free_r+0x22>
 8007726:	461a      	mov	r2, r3
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b10b      	cbz	r3, 8007730 <_free_r+0x50>
 800772c:	42a3      	cmp	r3, r4
 800772e:	d9fa      	bls.n	8007726 <_free_r+0x46>
 8007730:	6811      	ldr	r1, [r2, #0]
 8007732:	1855      	adds	r5, r2, r1
 8007734:	42a5      	cmp	r5, r4
 8007736:	d10b      	bne.n	8007750 <_free_r+0x70>
 8007738:	6824      	ldr	r4, [r4, #0]
 800773a:	4421      	add	r1, r4
 800773c:	1854      	adds	r4, r2, r1
 800773e:	42a3      	cmp	r3, r4
 8007740:	6011      	str	r1, [r2, #0]
 8007742:	d1e0      	bne.n	8007706 <_free_r+0x26>
 8007744:	681c      	ldr	r4, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	6053      	str	r3, [r2, #4]
 800774a:	4421      	add	r1, r4
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	e7da      	b.n	8007706 <_free_r+0x26>
 8007750:	d902      	bls.n	8007758 <_free_r+0x78>
 8007752:	230c      	movs	r3, #12
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	e7d6      	b.n	8007706 <_free_r+0x26>
 8007758:	6825      	ldr	r5, [r4, #0]
 800775a:	1961      	adds	r1, r4, r5
 800775c:	428b      	cmp	r3, r1
 800775e:	bf04      	itt	eq
 8007760:	6819      	ldreq	r1, [r3, #0]
 8007762:	685b      	ldreq	r3, [r3, #4]
 8007764:	6063      	str	r3, [r4, #4]
 8007766:	bf04      	itt	eq
 8007768:	1949      	addeq	r1, r1, r5
 800776a:	6021      	streq	r1, [r4, #0]
 800776c:	6054      	str	r4, [r2, #4]
 800776e:	e7ca      	b.n	8007706 <_free_r+0x26>
 8007770:	b003      	add	sp, #12
 8007772:	bd30      	pop	{r4, r5, pc}
 8007774:	20005de8 	.word	0x20005de8

08007778 <_init>:
 8007778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777a:	bf00      	nop
 800777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777e:	bc08      	pop	{r3}
 8007780:	469e      	mov	lr, r3
 8007782:	4770      	bx	lr

08007784 <_fini>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr
