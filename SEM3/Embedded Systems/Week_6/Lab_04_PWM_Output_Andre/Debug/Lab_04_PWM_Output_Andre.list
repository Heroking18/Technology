
Lab_04_PWM_Output_Andre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee0  08002ee0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ee0  08002ee0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ee0  08002ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e26  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016c6  00000000  00000000  00029e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef91  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c01  00000000  00000000  0004b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc21c  00000000  00000000  00054de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110ffe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a98  00000000  00000000  00111050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e90 	.word	0x08002e90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e90 	.word	0x08002e90

080001d4 <SetMode>:
	return millis_counter;
}

//*****************************************************************************
//                         Register settings for GPIO
void SetMode(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
 80001e0:	4613      	mov	r3, r2
 80001e2:	70bb      	strb	r3, [r7, #2]
	PORT->MODER |= (mode << (pin * 2)); // Times 2 because register occupies 2 bits for each MODER.
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	78b9      	ldrb	r1, [r7, #2]
 80001ea:	78fa      	ldrb	r2, [r7, #3]
 80001ec:	0052      	lsls	r2, r2, #1
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	431a      	orrs	r2, r3
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	601a      	str	r2, [r3, #0]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <SetType>:

void SetType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t type){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]
	PORT->OTYPER |= (type << pin);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	78b9      	ldrb	r1, [r7, #2]
 800021a:	78fa      	ldrb	r2, [r7, #3]
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	431a      	orrs	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	605a      	str	r2, [r3, #4]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <SetSpeed>:

void SetSpeed(GPIO_TypeDef * PORT, uint8_t pin, uint8_t speed){
 8000232:	b480      	push	{r7}
 8000234:	b083      	sub	sp, #12
 8000236:	af00      	add	r7, sp, #0
 8000238:	6078      	str	r0, [r7, #4]
 800023a:	460b      	mov	r3, r1
 800023c:	70fb      	strb	r3, [r7, #3]
 800023e:	4613      	mov	r3, r2
 8000240:	70bb      	strb	r3, [r7, #2]
	PORT->OSPEEDR |= (speed << (pin * 2));
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	78b9      	ldrb	r1, [r7, #2]
 8000248:	78fa      	ldrb	r2, [r7, #3]
 800024a:	0052      	lsls	r2, r2, #1
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	431a      	orrs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	609a      	str	r2, [r3, #8]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <SetPullType>:

void SetPullType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t pulltype){
 8000262:	b480      	push	{r7}
 8000264:	b083      	sub	sp, #12
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	460b      	mov	r3, r1
 800026c:	70fb      	strb	r3, [r7, #3]
 800026e:	4613      	mov	r3, r2
 8000270:	70bb      	strb	r3, [r7, #2]
	PORT->PUPDR |= (pulltype << (pin * 2));
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	78b9      	ldrb	r1, [r7, #2]
 8000278:	78fa      	ldrb	r2, [r7, #3]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	431a      	orrs	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	60da      	str	r2, [r3, #12]
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <SetPin>:

void SetPin(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pulltype){
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	4608      	mov	r0, r1
 800029c:	4611      	mov	r1, r2
 800029e:	461a      	mov	r2, r3
 80002a0:	4603      	mov	r3, r0
 80002a2:	70fb      	strb	r3, [r7, #3]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70bb      	strb	r3, [r7, #2]
 80002a8:	4613      	mov	r3, r2
 80002aa:	707b      	strb	r3, [r7, #1]
	SetMode(PORT, pin, mode);
 80002ac:	78ba      	ldrb	r2, [r7, #2]
 80002ae:	78fb      	ldrb	r3, [r7, #3]
 80002b0:	4619      	mov	r1, r3
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f7ff ff8e 	bl	80001d4 <SetMode>
	SetType(PORT, pin, type);
 80002b8:	787a      	ldrb	r2, [r7, #1]
 80002ba:	78fb      	ldrb	r3, [r7, #3]
 80002bc:	4619      	mov	r1, r3
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ffa0 	bl	8000204 <SetType>
	SetSpeed(PORT, pin, speed);
 80002c4:	7c3a      	ldrb	r2, [r7, #16]
 80002c6:	78fb      	ldrb	r3, [r7, #3]
 80002c8:	4619      	mov	r1, r3
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ffb1 	bl	8000232 <SetSpeed>
	SetPullType(PORT, pin, pulltype);
 80002d0:	7d3a      	ldrb	r2, [r7, #20]
 80002d2:	78fb      	ldrb	r3, [r7, #3]
 80002d4:	4619      	mov	r1, r3
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ffc3 	bl	8000262 <SetPullType>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <CMR_TIM2_config>:
}

//*****************************************************************************
//                         TIM2 Register CONFIG
void CMR_TIM2_config(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		// TIM2 clock enable register
 80002e8:	4b24      	ldr	r3, [pc, #144]	; (800037c <CMR_TIM2_config+0x98>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	4a23      	ldr	r2, [pc, #140]	; (800037c <CMR_TIM2_config+0x98>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	61d3      	str	r3, [r2, #28]
	TIM2->CR1 |= TIM_CR1_CEN;				// Enable counter
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] = 1<<12;					// GPIO alternate function low register
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <CMR_TIM2_config+0x9c>)
 8000306:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800030a:	621a      	str	r2, [r3, #32]

	// fclk = 72Mhz
	// PWM frquency = fclk/ARR/PSC
	// PWM Duty Cycle = CCR2/ARR
	TIM2->PSC = 72-1;					// prescaler
 800030c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000310:	2247      	movs	r2, #71	; 0x47
 8000312:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1;					// auto-reload register. Controls frequency of PWM.
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	f240 32e7 	movw	r2, #999	; 0x3e7
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;						// Reset counter
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->CCR2 = 750; //for 75%			// Capture/Compare 2 Value. Controls duty cycle of the PWM.
 8000326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800032e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCER |= TIM_CCER_CC2E;		// Capture/compare 2 interrupt enable
 8000330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6213      	str	r3, [r2, #32]

	// PWM mode 1
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_1;	// Bit 1
 8000340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2;	// Bit 2
 8000350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;		// Output Compare 2 Preload enable
 8000360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036e:	6193      	str	r3, [r2, #24]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	48000400 	.word	0x48000400

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN  | RCC_AHBENR_GPIOAEN; 								//enable the bus for port B.
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <main+0x50>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <main+0x50>)
 8000390:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000394:	6153      	str	r3, [r2, #20]

	// Pin Configurations.
	SetPin(GPIOA, 5, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); 	// (PB3) LED0
 8000396:	2300      	movs	r3, #0
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2300      	movs	r3, #0
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2300      	movs	r3, #0
 80003a0:	2201      	movs	r2, #1
 80003a2:	2105      	movs	r1, #5
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f7ff ff73 	bl	8000292 <SetPin>
	CMR_TIM2_config(); 												// Timer config
 80003ac:	f7ff ff9a 	bl	80002e4 <CMR_TIM2_config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 f9d8 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f810 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f000 f89c 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003bc:	f000 f86a 	bl	8000494 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIOA->BSRR |= GPIO_BSRR_BS_5;
 80003c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	e7f6      	b.n	80003c0 <main+0x3c>
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b0a6      	sub	sp, #152	; 0x98
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fd4a 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2258      	movs	r2, #88	; 0x58
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f002 fd3c 	bl	8002e80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	2302      	movs	r3, #2
 800040a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040c:	2301      	movs	r3, #1
 800040e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000410:	2310      	movs	r3, #16
 8000412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000424:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fc82 	bl	8000d40 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000442:	f000 f8bd 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2302      	movs	r3, #2
 800044c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000456:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fcc0 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800046e:	f000 f8a7 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000472:	2302      	movs	r3, #2
 8000474:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fee9 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000488:	f000 f89a 	bl	80005c0 <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3798      	adds	r7, #152	; 0x98
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART2_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART2_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART2_UART_Init+0x58>)
 80004d8:	f002 f8da 	bl	8002690 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f86d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_GPIO_Init+0xc4>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_GPIO_Init+0xc4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_GPIO_Init+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f000 fbcd 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0xc8>)
 800058e:	f000 fa35 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000592:	2320      	movs	r3, #32
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f000 fa26 	bl	80009fc <HAL_GPIO_Init>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000602:	2007      	movs	r0, #7
 8000604:	f000 f9c6 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_UART_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d128      	bne.n	8000688 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <HAL_UART_MspInit+0x80>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_UART_MspInit+0x80>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000666:	230c      	movs	r3, #12
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000676:	2307      	movs	r3, #7
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 f9ba 	bl	80009fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40004400 	.word	0x40004400
 8000694:	40021000 	.word	0x40021000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f884 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490e      	ldr	r1, [pc, #56]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0b      	ldr	r4, [pc, #44]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073a:	f7ff ffd7 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f002 fb7b 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fe1f 	bl	8000384 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	08002ee8 	.word	0x08002ee8
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	200000b0 	.word	0x200000b0

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f90d 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff24 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f917 	bl	80009e2 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f8ed 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	200000ac 	.word	0x200000ac

08000818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;  
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	200000ac 	.word	0x200000ac

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff8e 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff47 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff5c 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff8e 	bl	80008e8 <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffb0 	bl	8000950 <SysTick_Config>
 80009f0:	4603      	mov	r3, r0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e160      	b.n	8000cce <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8152 	beq.w	8000cc8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d005      	beq.n	8000a3c <HAL_GPIO_Init+0x40>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d130      	bne.n	8000a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a72:	2201      	movs	r2, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	f003 0201 	and.w	r2, r3, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d017      	beq.n	8000ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d123      	bne.n	8000b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	6939      	ldr	r1, [r7, #16]
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0203 	and.w	r2, r3, #3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 80ac 	beq.w	8000cc8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a5d      	ldr	r2, [pc, #372]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	; (8000cec <HAL_GPIO_Init+0x2f0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b88:	4a59      	ldr	r2, [pc, #356]	; (8000cf0 <HAL_GPIO_Init+0x2f4>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb2:	d025      	beq.n	8000c00 <HAL_GPIO_Init+0x204>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_GPIO_Init+0x2f8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d01f      	beq.n	8000bfc <HAL_GPIO_Init+0x200>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_GPIO_Init+0x2fc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d019      	beq.n	8000bf8 <HAL_GPIO_Init+0x1fc>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <HAL_GPIO_Init+0x300>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x304>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_GPIO_Init+0x308>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x30c>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1ec>
 8000be4:	2306      	movs	r3, #6
 8000be6:	e00c      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000be8:	2307      	movs	r3, #7
 8000bea:	e00a      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bec:	2305      	movs	r3, #5
 8000bee:	e008      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000c00:	2300      	movs	r3, #0
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c12:	4937      	ldr	r1, [pc, #220]	; (8000cf0 <HAL_GPIO_Init+0x2f4>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c44:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <HAL_GPIO_Init+0x310>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f47f ae97 	bne.w	8000a0c <HAL_GPIO_Init+0x10>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	48001000 	.word	0x48001000
 8000d04:	48001400 	.word	0x48001400
 8000d08:	48001800 	.word	0x48001800
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f001 b83a 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 816f 	beq.w	800105a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d7c:	4bb5      	ldr	r3, [pc, #724]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4bb2      	ldr	r3, [pc, #712]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d15c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x10e>
 8000d94:	4baf      	ldr	r3, [pc, #700]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d155      	bne.n	8000e4e <HAL_RCC_OscConfig+0x10e>
 8000da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000db6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	095b      	lsrs	r3, r3, #5
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d102      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x94>
 8000dce:	4ba1      	ldr	r3, [pc, #644]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	e015      	b.n	8000e00 <HAL_RCC_OscConfig+0xc0>
 8000dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ddc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000df0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000df4:	fa93 f3a3 	rbit	r3, r3
 8000df8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dfc:	4b95      	ldr	r3, [pc, #596]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e04:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e08:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e0c:	fa92 f2a2 	rbit	r2, r2
 8000e10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	f042 0220 	orr.w	r2, r2, #32
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	f002 021f 	and.w	r2, r2, #31
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8111 	beq.w	8001058 <HAL_RCC_OscConfig+0x318>
 8000e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8108 	bne.w	8001058 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	f000 bfc6 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12e>
 8000e60:	4b7c      	ldr	r3, [pc, #496]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a7b      	ldr	r2, [pc, #492]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e036      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x158>
 8000e7e:	4b75      	ldr	r3, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a74      	ldr	r2, [pc, #464]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b72      	ldr	r3, [pc, #456]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a71      	ldr	r2, [pc, #452]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e021      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x184>
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a69      	ldr	r2, [pc, #420]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a66      	ldr	r2, [pc, #408]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0x19c>
 8000ec4:	4b63      	ldr	r3, [pc, #396]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a62      	ldr	r2, [pc, #392]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b60      	ldr	r3, [pc, #384]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a5f      	ldr	r2, [pc, #380]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d059      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc94 	bl	8000818 <HAL_GetTick>
 8000ef0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	e00a      	b.n	8000f0c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fc8f 	bl	8000818 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d902      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f000 bf67 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 8000f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x1fe>
 8000f38:	4b46      	ldr	r3, [pc, #280]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	e015      	b.n	8000f6a <HAL_RCC_OscConfig+0x22a>
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f66:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f76:	fa92 f2a2 	rbit	r2, r2
 8000f7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f82:	fab2 f282 	clz	r2, r2
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	f002 021f 	and.w	r2, r2, #31
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0ab      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x1b6>
 8000f9e:	e05c      	b.n	800105a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fc3a 	bl	8000818 <HAL_GetTick>
 8000fa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000faa:	f7ff fc35 	bl	8000818 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d902      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	f000 bf0d 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 8000fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000fd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d102      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2b2>
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	e015      	b.n	800101e <HAL_RCC_OscConfig+0x2de>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800100e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_RCC_OscConfig+0x314>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001022:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001026:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800102a:	fa92 f2a2 	rbit	r2, r2
 800102e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001032:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	f042 0220 	orr.w	r2, r2, #32
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f002 021f 	and.w	r2, r2, #31
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1ab      	bne.n	8000faa <HAL_RCC_OscConfig+0x26a>
 8001052:	e002      	b.n	800105a <HAL_RCC_OscConfig+0x31a>
 8001054:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800105e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 817f 	beq.w	800136e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001070:	4ba7      	ldr	r3, [pc, #668]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800107c:	4ba4      	ldr	r3, [pc, #656]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d173      	bne.n	8001170 <HAL_RCC_OscConfig+0x430>
 8001088:	4ba1      	ldr	r3, [pc, #644]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001094:	d16c      	bne.n	8001170 <HAL_RCC_OscConfig+0x430>
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <HAL_RCC_OscConfig+0x386>
 80010c0:	4b93      	ldr	r3, [pc, #588]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	e013      	b.n	80010ee <HAL_RCC_OscConfig+0x3ae>
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010de:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010ea:	4b89      	ldr	r3, [pc, #548]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2202      	movs	r2, #2
 80010f0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001100:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f002 021f 	and.w	r2, r2, #31
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00a      	beq.n	8001136 <HAL_RCC_OscConfig+0x3f6>
 8001120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d002      	beq.n	8001136 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	f000 be52 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001142:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	21f8      	movs	r1, #248	; 0xf8
 800114c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001154:	fa91 f1a1 	rbit	r1, r1
 8001158:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800115c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001160:	fab1 f181 	clz	r1, r1
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	408b      	lsls	r3, r1
 8001168:	4969      	ldr	r1, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e0fe      	b.n	800136e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001174:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8088 	beq.w	8001292 <HAL_RCC_OscConfig+0x552>
 8001182:	2301      	movs	r3, #1
 8001184:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001188:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001194:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	461a      	mov	r2, r3
 80011aa:	2301      	movs	r3, #1
 80011ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb33 	bl	8000818 <HAL_GetTick>
 80011b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fb2e 	bl	8000818 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d902      	bls.n	80011ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f000 be06 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 80011ce:	2302      	movs	r3, #2
 80011d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80011e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d102      	bne.n	80011fe <HAL_RCC_OscConfig+0x4be>
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	e013      	b.n	8001226 <HAL_RCC_OscConfig+0x4e6>
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001216:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2202      	movs	r2, #2
 8001228:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800122c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001230:	fa92 f2a2 	rbit	r2, r2
 8001234:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001238:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800123c:	fab2 f282 	clz	r2, r2
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f042 0220 	orr.w	r2, r2, #32
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	f002 021f 	and.w	r2, r2, #31
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0af      	beq.n	80011b8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001264:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	21f8      	movs	r1, #248	; 0xf8
 800126e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001276:	fa91 f1a1 	rbit	r1, r1
 800127a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800127e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001282:	fab1 f181 	clz	r1, r1
 8001286:	b2c9      	uxtb	r1, r1
 8001288:	408b      	lsls	r3, r1
 800128a:	4921      	ldr	r1, [pc, #132]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e06d      	b.n	800136e <HAL_RCC_OscConfig+0x62e>
 8001292:	2301      	movs	r3, #1
 8001294:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	461a      	mov	r2, r3
 80012ba:	2300      	movs	r3, #0
 80012bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff faab 	bl	8000818 <HAL_GetTick>
 80012c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff faa6 	bl	8000818 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d902      	bls.n	80012de <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	f000 bd7e 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80012f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_RCC_OscConfig+0x5d4>
 8001308:	4b01      	ldr	r3, [pc, #4]	; (8001310 <HAL_RCC_OscConfig+0x5d0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e016      	b.n	800133c <HAL_RCC_OscConfig+0x5fc>
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800132c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001338:	4bbf      	ldr	r3, [pc, #764]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2202      	movs	r2, #2
 800133e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001342:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001346:	fa92 f2a2 	rbit	r2, r2
 800134a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800134e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001352:	fab2 f282 	clz	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f042 0220 	orr.w	r2, r2, #32
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	f002 021f 	and.w	r2, r2, #31
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ac      	bne.n	80012c8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8113 	beq.w	80015aa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d07c      	beq.n	800148e <HAL_RCC_OscConfig+0x74e>
 8001394:	2301      	movs	r3, #1
 8001396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800139e:	fa93 f3a3 	rbit	r3, r3
 80013a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4ba2      	ldr	r3, [pc, #648]	; (800163c <HAL_RCC_OscConfig+0x8fc>)
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	461a      	mov	r2, r3
 80013ba:	2301      	movs	r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fa2b 	bl	8000818 <HAL_GetTick>
 80013c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fa26 	bl	8000818 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d902      	bls.n	80013de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	f000 bcfe 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013e8:	fa93 f2a3 	rbit	r2, r3
 80013ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800142a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001438:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800143c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 8001440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800144a:	2102      	movs	r1, #2
 800144c:	6019      	str	r1, [r3, #0]
 800144e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f1a3 	rbit	r1, r3
 800145c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001460:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001464:	6019      	str	r1, [r3, #0]
  return result;
 8001466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d09d      	beq.n	80013c8 <HAL_RCC_OscConfig+0x688>
 800148c:	e08d      	b.n	80015aa <HAL_RCC_OscConfig+0x86a>
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	fa93 f2a3 	rbit	r2, r3
 80014a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014b0:	601a      	str	r2, [r3, #0]
  return result;
 80014b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_RCC_OscConfig+0x8fc>)
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	461a      	mov	r2, r3
 80014cc:	2300      	movs	r3, #0
 80014ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff f9a2 	bl	8000818 <HAL_GetTick>
 80014d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff f99d 	bl	8000818 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d902      	bls.n	80014f0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f000 bc75 	b.w	8001dda <HAL_RCC_OscConfig+0x109a>
 80014f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014f8:	2202      	movs	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	fa93 f2a3 	rbit	r2, r3
 800150a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800151c:	2202      	movs	r2, #2
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800155a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 800155e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001568:	2102      	movs	r1, #2
 800156a:	6019      	str	r1, [r3, #0]
 800156c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f1a3 	rbit	r1, r3
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001582:	6019      	str	r1, [r3, #0]
  return result;
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d197      	bne.n	80014da <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 81a5 	beq.w	800190a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x8f8>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_RCC_OscConfig+0x900>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d121      	bne.n	8001650 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_OscConfig+0x900>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x900>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001618:	f7ff f8fe 	bl	8000818 <HAL_GetTick>
 800161c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e010      	b.n	8001644 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff f8f9 	bl	8000818 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d908      	bls.n	8001644 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e3d1      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	10908120 	.word	0x10908120
 8001640:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b8d      	ldr	r3, [pc, #564]	; (800187c <HAL_RCC_OscConfig+0xb3c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0e8      	beq.n	8001622 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001654:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x92e>
 8001660:	4b87      	ldr	r3, [pc, #540]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a86      	ldr	r2, [pc, #536]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e035      	b.n	80016da <HAL_RCC_OscConfig+0x99a>
 800166e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001672:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x958>
 800167e:	4b80      	ldr	r3, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a7f      	ldr	r2, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b7d      	ldr	r3, [pc, #500]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a7c      	ldr	r2, [pc, #496]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e020      	b.n	80016da <HAL_RCC_OscConfig+0x99a>
 8001698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d10c      	bne.n	80016c2 <HAL_RCC_OscConfig+0x982>
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a74      	ldr	r2, [pc, #464]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x99a>
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80016d4:	f023 0304 	bic.w	r3, r3, #4
 80016d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8081 	beq.w	80017ee <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff f894 	bl	8000818 <HAL_GetTick>
 80016f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f88f 	bl	8000818 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e365      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001736:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800173a:	2202      	movs	r2, #2
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800175e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d102      	bne.n	800177a <HAL_RCC_OscConfig+0xa3a>
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0xa62>
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017aa:	2102      	movs	r1, #2
 80017ac:	6011      	str	r1, [r2, #0]
 80017ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	fa92 f1a2 	rbit	r1, r2
 80017bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017c0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017c4:	6011      	str	r1, [r2, #0]
  return result;
 80017c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017ca:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	fab2 f282 	clz	r2, r2
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	f002 021f 	and.w	r2, r2, #31
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d084      	beq.n	80016f6 <HAL_RCC_OscConfig+0x9b6>
 80017ec:	e083      	b.n	80018f6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff f813 	bl	8000818 <HAL_GetTick>
 80017f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff f80e 	bl	8000818 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e2e4      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001818:	2202      	movs	r2, #2
 800181a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800183c:	2202      	movs	r2, #2
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001852:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001856:	601a      	str	r2, [r3, #0]
  return result;
 8001858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001860:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0xb44>
 8001876:	4b02      	ldr	r3, [pc, #8]	; (8001880 <HAL_RCC_OscConfig+0xb40>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	e017      	b.n	80018ac <HAL_RCC_OscConfig+0xb6c>
 800187c:	40007000 	.word	0x40007000
 8001880:	40021000 	.word	0x40021000
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800188c:	2202      	movs	r2, #2
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	fa93 f2a3 	rbit	r2, r3
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	4bb3      	ldr	r3, [pc, #716]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018b4:	2102      	movs	r1, #2
 80018b6:	6011      	str	r1, [r2, #0]
 80018b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	fa92 f1a2 	rbit	r1, r2
 80018c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018ca:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80018ce:	6011      	str	r1, [r2, #0]
  return result;
 80018d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018d4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f002 021f 	and.w	r2, r2, #31
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d180      	bne.n	80017f8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fe:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a9d      	ldr	r2, [pc, #628]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 825e 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b96      	ldr	r3, [pc, #600]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	f000 821f 	beq.w	8001d68 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b02      	cmp	r3, #2
 8001938:	f040 8170 	bne.w	8001c1c <HAL_RCC_OscConfig+0xedc>
 800193c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001940:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800196a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001976:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	461a      	mov	r2, r3
 800197e:	2300      	movs	r3, #0
 8001980:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7fe ff49 	bl	8000818 <HAL_GetTick>
 8001986:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	e009      	b.n	80019a0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe ff44 	bl	8000818 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e21c      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 80019a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019c4:	601a      	str	r2, [r3, #0]
  return result;
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0xcaa>
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e027      	b.n	8001a3a <HAL_RCC_OscConfig+0xcfa>
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a22:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a3e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a4c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fa92 f1a2 	rbit	r1, r2
 8001a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a5a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a5e:	6011      	str	r1, [r2, #0]
  return result;
 8001a60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a64:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	fab2 f282 	clz	r2, r2
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f042 0220 	orr.w	r2, r2, #32
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f002 021f 	and.w	r2, r2, #31
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d182      	bne.n	800198c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a19      	ldr	r1, [r3, #32]
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001acc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001af6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fe83 	bl	8000818 <HAL_GetTick>
 8001b12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7fe fe7e 	bl	8000818 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e156      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b50:	601a      	str	r2, [r3, #0]
  return result;
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <HAL_RCC_OscConfig+0xe3c>
 8001b70:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <HAL_RCC_OscConfig+0xe38>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	e02a      	b.n	8001bcc <HAL_RCC_OscConfig+0xe8c>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4b86      	ldr	r3, [pc, #536]	; (8001de4 <HAL_RCC_OscConfig+0x10a4>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd8:	6011      	str	r1, [r2, #0]
 8001bda:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bde:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	fa92 f1a2 	rbit	r1, r2
 8001be8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bec:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001bf0:	6011      	str	r1, [r2, #0]
  return result;
 8001bf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f43f af7f 	beq.w	8001b18 <HAL_RCC_OscConfig+0xdd8>
 8001c1a:	e0dd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1098>
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c4a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fdd9 	bl	8000818 <HAL_GetTick>
 8001c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe fdd4 	bl	8000818 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0ac      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ca4:	601a      	str	r2, [r3, #0]
  return result;
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0xf8a>
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x10a4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_OscConfig+0xfda>
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <HAL_RCC_OscConfig+0x10a4>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d26:	6011      	str	r1, [r2, #0]
 8001d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fa92 f1a2 	rbit	r1, r2
 8001d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d3e:	6011      	str	r1, [r2, #0]
  return result;
 8001d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d44:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d182      	bne.n	8001c6c <HAL_RCC_OscConfig+0xf2c>
 8001d66:	e037      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e02e      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_OscConfig+0x10a4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_RCC_OscConfig+0x10a4>)
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d90:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d117      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001da4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001da8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10b      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc0:	f003 020f 	and.w	r2, r3, #15
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b09e      	sub	sp, #120	; 0x78
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e162      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b90      	ldr	r3, [pc, #576]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	498b      	ldr	r1, [pc, #556]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e14a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	497f      	ldr	r1, [pc, #508]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80dc 	beq.w	8002014 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d13c      	bne.n	8001ede <HAL_RCC_ClockConfig+0xf6>
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xa6>
 8001e88:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e00f      	b.n	8001eae <HAL_RCC_ClockConfig+0xc6>
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d17b      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0f3      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d13c      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x178>
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x128>
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e00f      	b.n	8001f30 <HAL_RCC_ClockConfig+0x148>
 8001f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
 8001f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f34:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13a      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b2      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
 8001f60:	2302      	movs	r3, #2
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x1a0>
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1bc>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	2302      	movs	r3, #2
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	61ba      	str	r2, [r7, #24]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	fa92 f2a2 	rbit	r2, r2
 8001fae:	617a      	str	r2, [r7, #20]
  return result;
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e079      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	491a      	ldr	r1, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fc18 	bl	8000818 <HAL_GetTick>
 8001fe8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7fe fc14 	bl	8000818 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e061      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d214      	bcs.n	800204c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4906      	ldr	r1, [pc, #24]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e040      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	491a      	ldr	r1, [pc, #104]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4912      	ldr	r1, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800208a:	f000 f829 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800208e:	4601      	mov	r1, r0
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	22f0      	movs	r2, #240	; 0xf0
 800209a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	fa92 f2a2 	rbit	r2, r2
 80020a2:	60fa      	str	r2, [r7, #12]
  return result;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x2ec>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	fa21 f303 	lsr.w	r3, r1, r3
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_RCC_ClockConfig+0x2f0>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCC_ClockConfig+0x2f4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fb66 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3778      	adds	r7, #120	; 0x78
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08002ea8 	.word	0x08002ea8
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e03f      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	e03f      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800211c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002120:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	607a      	str	r2, [r7, #4]
  return result;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	40d3      	lsrs	r3, r2
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	220f      	movs	r2, #15
 8002144:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	fa92 f2a2 	rbit	r2, r2
 800214c:	60fa      	str	r2, [r7, #12]
  return result;
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	40d3      	lsrs	r3, r2
 8002158:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e007      	b.n	800218a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	623b      	str	r3, [r7, #32]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	6a3b      	ldr	r3, [r7, #32]
}
 8002198:	4618      	mov	r0, r3
 800219a:	372c      	adds	r7, #44	; 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002ec0 	.word	0x08002ec0
 80021b0:	08002ed0 	.word	0x08002ed0

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021d2:	f7ff ffef 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d6:	4601      	mov	r1, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	603a      	str	r2, [r7, #0]
  return result;
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_RCC_GetPCLK1Freq+0x40>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08002eb8 	.word	0x08002eb8

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002216:	f7ff ffcd 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002224:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002228:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	fa92 f2a2 	rbit	r2, r2
 8002230:	603a      	str	r2, [r7, #0]
  return result;
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	40d3      	lsrs	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x40>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08002eb8 	.word	0x08002eb8

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b092      	sub	sp, #72	; 0x48
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d4 	beq.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002278:	4b4e      	ldr	r3, [pc, #312]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10e      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a4a      	ldr	r2, [pc, #296]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	61d3      	str	r3, [r2, #28]
 8002290:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a41      	ldr	r2, [pc, #260]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7fe faad 	bl	8000818 <HAL_GetTick>
 80022be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe faa9 	bl	8000818 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1d6      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8084 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d07c      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002300:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	461a      	mov	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	461a      	mov	r2, r3
 800234e:	2300      	movs	r3, #0
 8002350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04b      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fa59 	bl	8000818 <HAL_GetTick>
 8002366:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fa55 	bl	8000818 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e180      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	61fb      	str	r3, [r7, #28]
  return result;
 8002398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d108      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023ae:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	e00d      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	10908100 	.word	0x10908100
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	4b9a      	ldr	r3, [pc, #616]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2202      	movs	r2, #2
 80023d2:	613a      	str	r2, [r7, #16]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	60fa      	str	r2, [r7, #12]
  return result;
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0b7      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023fa:	4b8f      	ldr	r3, [pc, #572]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	498c      	ldr	r1, [pc, #560]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a87      	ldr	r2, [pc, #540]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242c:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	497f      	ldr	r1, [pc, #508]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800244a:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4978      	ldr	r1, [pc, #480]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002468:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4970      	ldr	r1, [pc, #448]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f023 0210 	bic.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4969      	ldr	r1, [pc, #420]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024a4:	4b64      	ldr	r3, [pc, #400]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	4961      	ldr	r1, [pc, #388]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f023 0220 	bic.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	495a      	ldr	r1, [pc, #360]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e0:	4b55      	ldr	r3, [pc, #340]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	4952      	ldr	r1, [pc, #328]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024fe:	4b4e      	ldr	r3, [pc, #312]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	494b      	ldr	r1, [pc, #300]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4943      	ldr	r1, [pc, #268]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800253a:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	493c      	ldr	r1, [pc, #240]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	4934      	ldr	r1, [pc, #208]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002576:	4b30      	ldr	r3, [pc, #192]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	492d      	ldr	r1, [pc, #180]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	491e      	ldr	r1, [pc, #120]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	4916      	ldr	r1, [pc, #88]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	490f      	ldr	r1, [pc, #60]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	e002      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	4913      	ldr	r1, [pc, #76]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	490b      	ldr	r1, [pc, #44]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3748      	adds	r7, #72	; 0x48
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e040      	b.n	8002724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fd ffae 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f82c 	bl	800272c <UART_SetConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9f6 	bl	8002ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa7d 	bl	8002c1c <UART_CheckIdleState>
 8002722:	4603      	mov	r3, r0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <UART_SetConfig+0x274>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	430b      	orrs	r3, r1
 8002762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a80      	ldr	r2, [pc, #512]	; (80029a4 <UART_SetConfig+0x278>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d120      	bne.n	80027ea <UART_SetConfig+0xbe>
 80027a8:	4b7f      	ldr	r3, [pc, #508]	; (80029a8 <UART_SetConfig+0x27c>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d817      	bhi.n	80027e4 <UART_SetConfig+0xb8>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <UART_SetConfig+0x90>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027df 	.word	0x080027df
 80027c8:	080027d3 	.word	0x080027d3
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e0b5      	b.n	800293e <UART_SetConfig+0x212>
 80027d2:	2302      	movs	r3, #2
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e0b2      	b.n	800293e <UART_SetConfig+0x212>
 80027d8:	2304      	movs	r3, #4
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e0af      	b.n	800293e <UART_SetConfig+0x212>
 80027de:	2308      	movs	r3, #8
 80027e0:	77fb      	strb	r3, [r7, #31]
 80027e2:	e0ac      	b.n	800293e <UART_SetConfig+0x212>
 80027e4:	2310      	movs	r3, #16
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e0a9      	b.n	800293e <UART_SetConfig+0x212>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	; (80029ac <UART_SetConfig+0x280>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d124      	bne.n	800283e <UART_SetConfig+0x112>
 80027f4:	4b6c      	ldr	r3, [pc, #432]	; (80029a8 <UART_SetConfig+0x27c>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002800:	d011      	beq.n	8002826 <UART_SetConfig+0xfa>
 8002802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002806:	d817      	bhi.n	8002838 <UART_SetConfig+0x10c>
 8002808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800280c:	d011      	beq.n	8002832 <UART_SetConfig+0x106>
 800280e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002812:	d811      	bhi.n	8002838 <UART_SetConfig+0x10c>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <UART_SetConfig+0xf4>
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d006      	beq.n	800282c <UART_SetConfig+0x100>
 800281e:	e00b      	b.n	8002838 <UART_SetConfig+0x10c>
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e08b      	b.n	800293e <UART_SetConfig+0x212>
 8002826:	2302      	movs	r3, #2
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e088      	b.n	800293e <UART_SetConfig+0x212>
 800282c:	2304      	movs	r3, #4
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e085      	b.n	800293e <UART_SetConfig+0x212>
 8002832:	2308      	movs	r3, #8
 8002834:	77fb      	strb	r3, [r7, #31]
 8002836:	e082      	b.n	800293e <UART_SetConfig+0x212>
 8002838:	2310      	movs	r3, #16
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e07f      	b.n	800293e <UART_SetConfig+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <UART_SetConfig+0x284>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d124      	bne.n	8002892 <UART_SetConfig+0x166>
 8002848:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <UART_SetConfig+0x27c>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002850:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002854:	d011      	beq.n	800287a <UART_SetConfig+0x14e>
 8002856:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800285a:	d817      	bhi.n	800288c <UART_SetConfig+0x160>
 800285c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002860:	d011      	beq.n	8002886 <UART_SetConfig+0x15a>
 8002862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002866:	d811      	bhi.n	800288c <UART_SetConfig+0x160>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <UART_SetConfig+0x148>
 800286c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002870:	d006      	beq.n	8002880 <UART_SetConfig+0x154>
 8002872:	e00b      	b.n	800288c <UART_SetConfig+0x160>
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e061      	b.n	800293e <UART_SetConfig+0x212>
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e05e      	b.n	800293e <UART_SetConfig+0x212>
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e05b      	b.n	800293e <UART_SetConfig+0x212>
 8002886:	2308      	movs	r3, #8
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e058      	b.n	800293e <UART_SetConfig+0x212>
 800288c:	2310      	movs	r3, #16
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e055      	b.n	800293e <UART_SetConfig+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <UART_SetConfig+0x288>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d124      	bne.n	80028e6 <UART_SetConfig+0x1ba>
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <UART_SetConfig+0x27c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a8:	d011      	beq.n	80028ce <UART_SetConfig+0x1a2>
 80028aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028ae:	d817      	bhi.n	80028e0 <UART_SetConfig+0x1b4>
 80028b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b4:	d011      	beq.n	80028da <UART_SetConfig+0x1ae>
 80028b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ba:	d811      	bhi.n	80028e0 <UART_SetConfig+0x1b4>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <UART_SetConfig+0x19c>
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d006      	beq.n	80028d4 <UART_SetConfig+0x1a8>
 80028c6:	e00b      	b.n	80028e0 <UART_SetConfig+0x1b4>
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e037      	b.n	800293e <UART_SetConfig+0x212>
 80028ce:	2302      	movs	r3, #2
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e034      	b.n	800293e <UART_SetConfig+0x212>
 80028d4:	2304      	movs	r3, #4
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e031      	b.n	800293e <UART_SetConfig+0x212>
 80028da:	2308      	movs	r3, #8
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e02e      	b.n	800293e <UART_SetConfig+0x212>
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e02b      	b.n	800293e <UART_SetConfig+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <UART_SetConfig+0x28c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d124      	bne.n	800293a <UART_SetConfig+0x20e>
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <UART_SetConfig+0x27c>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80028f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fc:	d011      	beq.n	8002922 <UART_SetConfig+0x1f6>
 80028fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002902:	d817      	bhi.n	8002934 <UART_SetConfig+0x208>
 8002904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002908:	d011      	beq.n	800292e <UART_SetConfig+0x202>
 800290a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290e:	d811      	bhi.n	8002934 <UART_SetConfig+0x208>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <UART_SetConfig+0x1f0>
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d006      	beq.n	8002928 <UART_SetConfig+0x1fc>
 800291a:	e00b      	b.n	8002934 <UART_SetConfig+0x208>
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e00d      	b.n	800293e <UART_SetConfig+0x212>
 8002922:	2302      	movs	r3, #2
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e00a      	b.n	800293e <UART_SetConfig+0x212>
 8002928:	2304      	movs	r3, #4
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e007      	b.n	800293e <UART_SetConfig+0x212>
 800292e:	2308      	movs	r3, #8
 8002930:	77fb      	strb	r3, [r7, #31]
 8002932:	e004      	b.n	800293e <UART_SetConfig+0x212>
 8002934:	2310      	movs	r3, #16
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e001      	b.n	800293e <UART_SetConfig+0x212>
 800293a:	2310      	movs	r3, #16
 800293c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d16c      	bne.n	8002a22 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8002948:	7ffb      	ldrb	r3, [r7, #31]
 800294a:	2b08      	cmp	r3, #8
 800294c:	d838      	bhi.n	80029c0 <UART_SetConfig+0x294>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <UART_SetConfig+0x228>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002979 	.word	0x08002979
 8002958:	08002981 	.word	0x08002981
 800295c:	08002989 	.word	0x08002989
 8002960:	080029c1 	.word	0x080029c1
 8002964:	0800298f 	.word	0x0800298f
 8002968:	080029c1 	.word	0x080029c1
 800296c:	080029c1 	.word	0x080029c1
 8002970:	080029c1 	.word	0x080029c1
 8002974:	08002997 	.word	0x08002997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff fc28 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 800297c:	61b8      	str	r0, [r7, #24]
        break;
 800297e:	e024      	b.n	80029ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff fc46 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002984:	61b8      	str	r0, [r7, #24]
        break;
 8002986:	e020      	b.n	80029ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <UART_SetConfig+0x290>)
 800298a:	61bb      	str	r3, [r7, #24]
        break;
 800298c:	e01d      	b.n	80029ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298e:	f7ff fba7 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002992:	61b8      	str	r0, [r7, #24]
        break;
 8002994:	e019      	b.n	80029ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	61bb      	str	r3, [r7, #24]
        break;
 800299c:	e015      	b.n	80029ca <UART_SetConfig+0x29e>
 800299e:	bf00      	nop
 80029a0:	efff69f3 	.word	0xefff69f3
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40004400 	.word	0x40004400
 80029b0:	40004800 	.word	0x40004800
 80029b4:	40004c00 	.word	0x40004c00
 80029b8:	40005000 	.word	0x40005000
 80029bc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	77bb      	strb	r3, [r7, #30]
        break;
 80029c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d075      	beq.n	8002abc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	005a      	lsls	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	d916      	bls.n	8002a1c <UART_SetConfig+0x2f0>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d212      	bcs.n	8002a1c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f023 030f 	bic.w	r3, r3, #15
 80029fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	89fa      	ldrh	r2, [r7, #14]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	e04f      	b.n	8002abc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77bb      	strb	r3, [r7, #30]
 8002a20:	e04c      	b.n	8002abc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d828      	bhi.n	8002a7a <UART_SetConfig+0x34e>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x304>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a5d 	.word	0x08002a5d
 8002a38:	08002a65 	.word	0x08002a65
 8002a3c:	08002a7b 	.word	0x08002a7b
 8002a40:	08002a6b 	.word	0x08002a6b
 8002a44:	08002a7b 	.word	0x08002a7b
 8002a48:	08002a7b 	.word	0x08002a7b
 8002a4c:	08002a7b 	.word	0x08002a7b
 8002a50:	08002a73 	.word	0x08002a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff fbba 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8002a58:	61b8      	str	r0, [r7, #24]
        break;
 8002a5a:	e013      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a5c:	f7ff fbd8 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002a60:	61b8      	str	r0, [r7, #24]
        break;
 8002a62:	e00f      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <UART_SetConfig+0x3a8>)
 8002a66:	61bb      	str	r3, [r7, #24]
        break;
 8002a68:	e00c      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6a:	f7ff fb39 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	61b8      	str	r0, [r7, #24]
        break;
 8002a70:	e008      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	61bb      	str	r3, [r7, #24]
        break;
 8002a78:	e004      	b.n	8002a84 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77bb      	strb	r3, [r7, #30]
        break;
 8002a82:	bf00      	nop
    }

    if (pclk != 0U)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d018      	beq.n	8002abc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	085a      	lsrs	r2, r3, #1
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d908      	bls.n	8002ab8 <UART_SetConfig+0x38c>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d204      	bcs.n	8002ab8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e001      	b.n	8002abc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	007a1200 	.word	0x007a1200

08002ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01a      	beq.n	8002bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd6:	d10a      	bne.n	8002bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c2c:	f7fd fdf4 	bl	8000818 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d10e      	bne.n	8002c5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f82d 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e023      	b.n	8002ca6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d10e      	bne.n	8002c8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f817 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e00d      	b.n	8002ca6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b09c      	sub	sp, #112	; 0x70
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	e0a5      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	f000 80a1 	beq.w	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fd fda5 	bl	8000818 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d13e      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d06:	e841 2300 	strex	r3, r2, [r1]
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e6      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3308      	adds	r3, #8
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d32:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e5      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e067      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d04f      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	d147      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
 8002da6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e6      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dd8:	623a      	str	r2, [r7, #32]
 8002dda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	69f9      	ldr	r1, [r7, #28]
 8002dde:	6a3a      	ldr	r2, [r7, #32]
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e5      	bne.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e010      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f43f af4a 	beq.w	8002cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3770      	adds	r7, #112	; 0x70
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	; (8002e70 <__libc_init_array+0x38>)
 8002e3c:	4c0d      	ldr	r4, [pc, #52]	; (8002e74 <__libc_init_array+0x3c>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	2600      	movs	r6, #0
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	4d0b      	ldr	r5, [pc, #44]	; (8002e78 <__libc_init_array+0x40>)
 8002e4a:	4c0c      	ldr	r4, [pc, #48]	; (8002e7c <__libc_init_array+0x44>)
 8002e4c:	f000 f820 	bl	8002e90 <_init>
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	2600      	movs	r6, #0
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08002ee0 	.word	0x08002ee0
 8002e74:	08002ee0 	.word	0x08002ee0
 8002e78:	08002ee0 	.word	0x08002ee0
 8002e7c:	08002ee4 	.word	0x08002ee4

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
