
Lab_03_Interrupts_Part_A_Andre_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800257c  0800257c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800257c  0800257c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800257c  0800257c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000003c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004738  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e2b  00000000  00000000  00024774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  000255a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000360  00000000  00000000  00025978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e793  00000000  00000000  00025cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b78  00000000  00000000  0004446b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb13a  00000000  00000000  00048fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010411d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ddc  00000000  00000000  00104170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002534 	.word	0x08002534

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002534 	.word	0x08002534

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <SysTick_Init>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

// SYsTick Config
void SysTick_Init(uint32_t ticks){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;			// Disable SysTick
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SysTick_Init+0x54>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = ticks - 1;  // Set reload register
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <SysTick_Init+0x54>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3b01      	subs	r3, #1
 8000278:	6053      	str	r3, [r2, #4]

	// Set interrupt priority of SysTick to least urgency (i.e., largest priority value)
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
 800027a:	210f      	movs	r1, #15
 800027c:	f04f 30ff 	mov.w	r0, #4294967295
 8000280:	f7ff ffc6 	bl	8000210 <__NVIC_SetPriority>

    SysTick->VAL = 0;             // Reset the SysTick counter value. Software should always clear during the initialization.
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SysTick_Init+0x54>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]

    // Select processor clock: 1 = processor clock; 0 = external clock
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <SysTick_Init+0x54>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SysTick_Init+0x54>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6013      	str	r3, [r2, #0]

    // Enables SysTick interrupt, 1 = Enable, 0 = Disable
    SysTick->CTRL |= SysTick_CTRL_TICKINT;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <SysTick_Init+0x54>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <SysTick_Init+0x54>)
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	6013      	str	r3, [r2, #0]

    // Enable SysTick
    SysTick->CTRL |= SysTick_CTRL_ENABLE;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SysTick_Init+0x54>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <SysTick_Init+0x54>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <millis>:

uint32_t millis()
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	return millis_counter;
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <millis+0x14>)
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <SetMode>:

// Register settings for GPIO
void SetMode(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
 80002e0:	4613      	mov	r3, r2
 80002e2:	70bb      	strb	r3, [r7, #2]
	PORT->MODER |= (mode << (pin * 2)); // Times 2 because register occupies 2 bits for each MODER.
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	78b9      	ldrb	r1, [r7, #2]
 80002ea:	78fa      	ldrb	r2, [r7, #3]
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <SetType>:

void SetType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t type){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
 8000310:	4613      	mov	r3, r2
 8000312:	70bb      	strb	r3, [r7, #2]
	PORT->OTYPER |= (type << pin);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	78b9      	ldrb	r1, [r7, #2]
 800031a:	78fa      	ldrb	r2, [r7, #3]
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	605a      	str	r2, [r3, #4]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <SetSpeed>:

void SetSpeed(GPIO_TypeDef * PORT, uint8_t pin, uint8_t speed){
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	70fb      	strb	r3, [r7, #3]
 800033e:	4613      	mov	r3, r2
 8000340:	70bb      	strb	r3, [r7, #2]
	PORT->OSPEEDR |= (speed << (pin * 2));
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	78b9      	ldrb	r1, [r7, #2]
 8000348:	78fa      	ldrb	r2, [r7, #3]
 800034a:	0052      	lsls	r2, r2, #1
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <SetPullType>:

void SetPullType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t pulltype){
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	70fb      	strb	r3, [r7, #3]
 800036e:	4613      	mov	r3, r2
 8000370:	70bb      	strb	r3, [r7, #2]
	PORT->PUPDR |= (pulltype << (pin * 2));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	78b9      	ldrb	r1, [r7, #2]
 8000378:	78fa      	ldrb	r2, [r7, #3]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	431a      	orrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60da      	str	r2, [r3, #12]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <SetPin>:

void SetPin(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pulltype){
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	4608      	mov	r0, r1
 800039c:	4611      	mov	r1, r2
 800039e:	461a      	mov	r2, r3
 80003a0:	4603      	mov	r3, r0
 80003a2:	70fb      	strb	r3, [r7, #3]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70bb      	strb	r3, [r7, #2]
 80003a8:	4613      	mov	r3, r2
 80003aa:	707b      	strb	r3, [r7, #1]
	SetMode(PORT, pin, mode);
 80003ac:	78ba      	ldrb	r2, [r7, #2]
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	4619      	mov	r1, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ff8e 	bl	80002d4 <SetMode>
	SetType(PORT, pin, type);
 80003b8:	787a      	ldrb	r2, [r7, #1]
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	4619      	mov	r1, r3
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f7ff ffa0 	bl	8000304 <SetType>
	SetSpeed(PORT, pin, speed);
 80003c4:	7c3a      	ldrb	r2, [r7, #16]
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	4619      	mov	r1, r3
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ffb1 	bl	8000332 <SetSpeed>
	SetPullType(PORT, pin, pulltype);
 80003d0:	7d3a      	ldrb	r2, [r7, #20]
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	4619      	mov	r1, r3
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f7ff ffc3 	bl	8000362 <SetPullType>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <config_gpio_interrupt>:

void config_gpio_interrupt(GPIO_TypeDef *PORT, uint32_t pin, edge_select edge)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	4613      	mov	r3, r2
 80003f0:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;	//	9.4.7 APB2 peripheral clock enable register (RCC_APB2ENR)
 80003f2:	4b8f      	ldr	r3, [pc, #572]	; (8000630 <config_gpio_interrupt+0x24c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a8e      	ldr	r2, [pc, #568]	; (8000630 <config_gpio_interrupt+0x24c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]

	/*****************  PORTA configuration for SYSCFG_EXTICRx  **************/
	if(PORT == GPIOA)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000404:	d176      	bne.n	80004f4 <config_gpio_interrupt+0x110>
	{
		switch(pin)
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d874      	bhi.n	80004f6 <config_gpio_interrupt+0x112>
 800040c:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <config_gpio_interrupt+0x30>)
 800040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000412:	bf00      	nop
 8000414:	08000455 	.word	0x08000455
 8000418:	0800045f 	.word	0x0800045f
 800041c:	08000469 	.word	0x08000469
 8000420:	08000473 	.word	0x08000473
 8000424:	0800047d 	.word	0x0800047d
 8000428:	08000487 	.word	0x08000487
 800042c:	08000491 	.word	0x08000491
 8000430:	0800049b 	.word	0x0800049b
 8000434:	080004a5 	.word	0x080004a5
 8000438:	080004af 	.word	0x080004af
 800043c:	080004b9 	.word	0x080004b9
 8000440:	080004c3 	.word	0x080004c3
 8000444:	080004cd 	.word	0x080004cd
 8000448:	080004d7 	.word	0x080004d7
 800044c:	080004e1 	.word	0x080004e1
 8000450:	080004eb 	.word	0x080004eb
		{
		/*****************  Bit configuration for SYSCFG_EXTICR1 register  **************/
		case 0:
		SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0 & SYSCFG_EXTICR1_EXTI0_PA);	/*!< PA[0] pin */
 8000454:	4b77      	ldr	r3, [pc, #476]	; (8000634 <config_gpio_interrupt+0x250>)
 8000456:	4a77      	ldr	r2, [pc, #476]	; (8000634 <config_gpio_interrupt+0x250>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	6093      	str	r3, [r2, #8]
		break;
 800045c:	e04b      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 1:
		SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1 & SYSCFG_EXTICR1_EXTI1_PA);	/*!< PA[1] pin */
 800045e:	4b75      	ldr	r3, [pc, #468]	; (8000634 <config_gpio_interrupt+0x250>)
 8000460:	4a74      	ldr	r2, [pc, #464]	; (8000634 <config_gpio_interrupt+0x250>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	60d3      	str	r3, [r2, #12]
		break;
 8000466:	e046      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 2:
		SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2 & SYSCFG_EXTICR1_EXTI2_PA);	/*!< PA[2] pin */
 8000468:	4b72      	ldr	r3, [pc, #456]	; (8000634 <config_gpio_interrupt+0x250>)
 800046a:	4a72      	ldr	r2, [pc, #456]	; (8000634 <config_gpio_interrupt+0x250>)
 800046c:	691b      	ldr	r3, [r3, #16]
 800046e:	6113      	str	r3, [r2, #16]
		break;
 8000470:	e041      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 3:
		SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3 & SYSCFG_EXTICR1_EXTI3_PA);	/*!< PA[3] pin */
 8000472:	4b70      	ldr	r3, [pc, #448]	; (8000634 <config_gpio_interrupt+0x250>)
 8000474:	4a6f      	ldr	r2, [pc, #444]	; (8000634 <config_gpio_interrupt+0x250>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	6153      	str	r3, [r2, #20]
		break;
 800047a:	e03c      	b.n	80004f6 <config_gpio_interrupt+0x112>
		/*****************  Bit configuration for SYSCFG_EXTICR2 register  **************/
		case 4:
		SYSCFG->EXTICR[4] |= (SYSCFG_EXTICR2_EXTI4 & SYSCFG_EXTICR2_EXTI4_PA);	/*!< PA[4] pin */
 800047c:	4b6d      	ldr	r3, [pc, #436]	; (8000634 <config_gpio_interrupt+0x250>)
 800047e:	4a6d      	ldr	r2, [pc, #436]	; (8000634 <config_gpio_interrupt+0x250>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	6193      	str	r3, [r2, #24]
		break;
 8000484:	e037      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 5:
		SYSCFG->EXTICR[5] |= (SYSCFG_EXTICR2_EXTI5 & SYSCFG_EXTICR2_EXTI5_PA);	/*!< PA[5] pin */
 8000486:	4b6b      	ldr	r3, [pc, #428]	; (8000634 <config_gpio_interrupt+0x250>)
 8000488:	4a6a      	ldr	r2, [pc, #424]	; (8000634 <config_gpio_interrupt+0x250>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	61d3      	str	r3, [r2, #28]
		break;
 800048e:	e032      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 6:
		SYSCFG->EXTICR[6] |= (SYSCFG_EXTICR2_EXTI6 & SYSCFG_EXTICR2_EXTI6_PA);	/*!< PA[6] pin */
 8000490:	4b68      	ldr	r3, [pc, #416]	; (8000634 <config_gpio_interrupt+0x250>)
 8000492:	4a68      	ldr	r2, [pc, #416]	; (8000634 <config_gpio_interrupt+0x250>)
 8000494:	6a1b      	ldr	r3, [r3, #32]
 8000496:	6213      	str	r3, [r2, #32]
		break;
 8000498:	e02d      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 7:
		SYSCFG->EXTICR[7] |= (SYSCFG_EXTICR2_EXTI7 & SYSCFG_EXTICR2_EXTI7_PA);	/*!< PA[7] pin */
 800049a:	4b66      	ldr	r3, [pc, #408]	; (8000634 <config_gpio_interrupt+0x250>)
 800049c:	4a65      	ldr	r2, [pc, #404]	; (8000634 <config_gpio_interrupt+0x250>)
 800049e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a0:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80004a2:	e028      	b.n	80004f6 <config_gpio_interrupt+0x112>
		/*****************  Bit configuration for SYSCFG_EXTICR3 register  **************/
		case 8:
		SYSCFG->EXTICR[8] |= (SYSCFG_EXTICR3_EXTI8 & SYSCFG_EXTICR3_EXTI8_PA);	/*!< PA[8] pin */
 80004a4:	4b63      	ldr	r3, [pc, #396]	; (8000634 <config_gpio_interrupt+0x250>)
 80004a6:	4a63      	ldr	r2, [pc, #396]	; (8000634 <config_gpio_interrupt+0x250>)
 80004a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004aa:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 80004ac:	e023      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 9:
		SYSCFG->EXTICR[9] |= (SYSCFG_EXTICR3_EXTI9 & SYSCFG_EXTICR3_EXTI9_PA);	/*!< PA[9] pin */
 80004ae:	4b61      	ldr	r3, [pc, #388]	; (8000634 <config_gpio_interrupt+0x250>)
 80004b0:	4a60      	ldr	r2, [pc, #384]	; (8000634 <config_gpio_interrupt+0x250>)
 80004b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b4:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80004b6:	e01e      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 10:
		SYSCFG->EXTICR[10] |= (SYSCFG_EXTICR3_EXTI10 & SYSCFG_EXTICR3_EXTI10_PA);	/*!< PA[10] pin */
 80004b8:	4b5e      	ldr	r3, [pc, #376]	; (8000634 <config_gpio_interrupt+0x250>)
 80004ba:	4a5e      	ldr	r2, [pc, #376]	; (8000634 <config_gpio_interrupt+0x250>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80004c0:	e019      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 11:
		SYSCFG->EXTICR[11] |= (SYSCFG_EXTICR3_EXTI11 & SYSCFG_EXTICR3_EXTI11_PA);	/*!< PA[11] pin */
 80004c2:	4b5c      	ldr	r3, [pc, #368]	; (8000634 <config_gpio_interrupt+0x250>)
 80004c4:	4a5b      	ldr	r2, [pc, #364]	; (8000634 <config_gpio_interrupt+0x250>)
 80004c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c8:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 80004ca:	e014      	b.n	80004f6 <config_gpio_interrupt+0x112>
		/*****************  Bit configuration for SYSCFG_EXTICR4 register  **************/
		case 12:
		SYSCFG->EXTICR[12] |= (SYSCFG_EXTICR4_EXTI12 & SYSCFG_EXTICR4_EXTI12_PA);	/*!< PA[12] pin */
 80004cc:	4b59      	ldr	r3, [pc, #356]	; (8000634 <config_gpio_interrupt+0x250>)
 80004ce:	4a59      	ldr	r2, [pc, #356]	; (8000634 <config_gpio_interrupt+0x250>)
 80004d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d2:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80004d4:	e00f      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 13:
		SYSCFG->EXTICR[13] |= (SYSCFG_EXTICR4_EXTI13 & SYSCFG_EXTICR4_EXTI13_PA);	/*!< PA[13] pin */
 80004d6:	4b57      	ldr	r3, [pc, #348]	; (8000634 <config_gpio_interrupt+0x250>)
 80004d8:	4a56      	ldr	r2, [pc, #344]	; (8000634 <config_gpio_interrupt+0x250>)
 80004da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004dc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80004de:	e00a      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 14:
		SYSCFG->EXTICR[14] |= (SYSCFG_EXTICR4_EXTI14 & SYSCFG_EXTICR4_EXTI14_PA);	/*!< PA[14] pin */
 80004e0:	4b54      	ldr	r3, [pc, #336]	; (8000634 <config_gpio_interrupt+0x250>)
 80004e2:	4a54      	ldr	r2, [pc, #336]	; (8000634 <config_gpio_interrupt+0x250>)
 80004e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80004e8:	e005      	b.n	80004f6 <config_gpio_interrupt+0x112>
		case 15:
		SYSCFG->EXTICR[15] |= (SYSCFG_EXTICR4_EXTI15 & SYSCFG_EXTICR4_EXTI15_PA);	/*!< PA[15] pin */
 80004ea:	4b52      	ldr	r3, [pc, #328]	; (8000634 <config_gpio_interrupt+0x250>)
 80004ec:	4a51      	ldr	r2, [pc, #324]	; (8000634 <config_gpio_interrupt+0x250>)
 80004ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f0:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 80004f2:	e000      	b.n	80004f6 <config_gpio_interrupt+0x112>
		}
	}
 80004f4:	bf00      	nop

	/*****************  PORTB configuration for SYSCFG_EXTICRx  **************/
	if(PORT == GPIOB)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4a4f      	ldr	r2, [pc, #316]	; (8000638 <config_gpio_interrupt+0x254>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	f040 809e 	bne.w	800063c <config_gpio_interrupt+0x258>
	{
		switch(pin)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b0f      	cmp	r3, #15
 8000504:	f200 809b 	bhi.w	800063e <config_gpio_interrupt+0x25a>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <config_gpio_interrupt+0x12c>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000551 	.word	0x08000551
 8000514:	0800055f 	.word	0x0800055f
 8000518:	0800056d 	.word	0x0800056d
 800051c:	0800057b 	.word	0x0800057b
 8000520:	08000589 	.word	0x08000589
 8000524:	08000597 	.word	0x08000597
 8000528:	080005a5 	.word	0x080005a5
 800052c:	080005b3 	.word	0x080005b3
 8000530:	080005c1 	.word	0x080005c1
 8000534:	080005cf 	.word	0x080005cf
 8000538:	080005dd 	.word	0x080005dd
 800053c:	080005eb 	.word	0x080005eb
 8000540:	080005f9 	.word	0x080005f9
 8000544:	08000607 	.word	0x08000607
 8000548:	08000615 	.word	0x08000615
 800054c:	08000623 	.word	0x08000623
		{
		/*****************  Bit configuration for SYSCFG_EXTICR1 register  **************/
		case 0:
		SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0 & SYSCFG_EXTICR1_EXTI0_PB);	/*!< PB[0] pin */
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <config_gpio_interrupt+0x250>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4a37      	ldr	r2, [pc, #220]	; (8000634 <config_gpio_interrupt+0x250>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6093      	str	r3, [r2, #8]
		break;
 800055c:	e06f      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 1:
		SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1 & SYSCFG_EXTICR1_EXTI1_PB);	/*!< PB[1] pin */
 800055e:	4b35      	ldr	r3, [pc, #212]	; (8000634 <config_gpio_interrupt+0x250>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	4a34      	ldr	r2, [pc, #208]	; (8000634 <config_gpio_interrupt+0x250>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	60d3      	str	r3, [r2, #12]
		break;
 800056a:	e068      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 2:
		SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2 & SYSCFG_EXTICR1_EXTI2_PB);	/*!< PB[2] pin */
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <config_gpio_interrupt+0x250>)
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	4a30      	ldr	r2, [pc, #192]	; (8000634 <config_gpio_interrupt+0x250>)
 8000572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000576:	6113      	str	r3, [r2, #16]
		break;
 8000578:	e061      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 3:
		SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3 & SYSCFG_EXTICR1_EXTI3_PB);	/*!< PB[3] pin */
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <config_gpio_interrupt+0x250>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a2d      	ldr	r2, [pc, #180]	; (8000634 <config_gpio_interrupt+0x250>)
 8000580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000584:	6153      	str	r3, [r2, #20]
		break;
 8000586:	e05a      	b.n	800063e <config_gpio_interrupt+0x25a>
		/*****************  Bit configuration for SYSCFG_EXTICR2 register  **************/
		case 4:
		SYSCFG->EXTICR[4] |= (SYSCFG_EXTICR2_EXTI4 & SYSCFG_EXTICR2_EXTI4_PB);	/*!< PB[4] pin */
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <config_gpio_interrupt+0x250>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <config_gpio_interrupt+0x250>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6193      	str	r3, [r2, #24]
		break;
 8000594:	e053      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 5:
		SYSCFG->EXTICR[5] |= (SYSCFG_EXTICR2_EXTI5 & SYSCFG_EXTICR2_EXTI5_PB);	/*!< PB[5] pin */
 8000596:	4b27      	ldr	r3, [pc, #156]	; (8000634 <config_gpio_interrupt+0x250>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a26      	ldr	r2, [pc, #152]	; (8000634 <config_gpio_interrupt+0x250>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	61d3      	str	r3, [r2, #28]
		break;
 80005a2:	e04c      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 6:
		SYSCFG->EXTICR[6] |= (SYSCFG_EXTICR2_EXTI6 & SYSCFG_EXTICR2_EXTI6_PB);	/*!< PB[6] pin */
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <config_gpio_interrupt+0x250>)
 80005a6:	6a1b      	ldr	r3, [r3, #32]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <config_gpio_interrupt+0x250>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	6213      	str	r3, [r2, #32]
		break;
 80005b0:	e045      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 7:
		SYSCFG->EXTICR[7] |= (SYSCFG_EXTICR2_EXTI7 & SYSCFG_EXTICR2_EXTI7_PB);	/*!< PB[7] pin */
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <config_gpio_interrupt+0x250>)
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <config_gpio_interrupt+0x250>)
 80005b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005bc:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80005be:	e03e      	b.n	800063e <config_gpio_interrupt+0x25a>
		/*****************  Bit configuration for SYSCFG_EXTICR3 register  **************/
		case 8:
		SYSCFG->EXTICR[8] |= (SYSCFG_EXTICR3_EXTI8 & SYSCFG_EXTICR3_EXTI8_PB);	/*!< PB[8] pin */
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <config_gpio_interrupt+0x250>)
 80005c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <config_gpio_interrupt+0x250>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 80005cc:	e037      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 9:
		SYSCFG->EXTICR[9] |= (SYSCFG_EXTICR3_EXTI9 & SYSCFG_EXTICR3_EXTI9_PB);	/*!< PB[9] pin */
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <config_gpio_interrupt+0x250>)
 80005d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <config_gpio_interrupt+0x250>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80005da:	e030      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 10:
		SYSCFG->EXTICR[10] |= (SYSCFG_EXTICR3_EXTI10 & SYSCFG_EXTICR3_EXTI10_PB);	/*!< PB[10] pin */
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <config_gpio_interrupt+0x250>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <config_gpio_interrupt+0x250>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80005e8:	e029      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 11:
		SYSCFG->EXTICR[11] |= (SYSCFG_EXTICR3_EXTI11 & SYSCFG_EXTICR3_EXTI11_PB);	/*!< PB[11] pin */
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <config_gpio_interrupt+0x250>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <config_gpio_interrupt+0x250>)
 80005f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f4:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 80005f6:	e022      	b.n	800063e <config_gpio_interrupt+0x25a>
		/*****************  Bit configuration for SYSCFG_EXTICR4 register  **************/
		case 12:
		SYSCFG->EXTICR[12] |= (SYSCFG_EXTICR4_EXTI12 & SYSCFG_EXTICR4_EXTI12_PB);	/*!< PB[12] pin */
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <config_gpio_interrupt+0x250>)
 80005fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <config_gpio_interrupt+0x250>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000604:	e01b      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 13:
		SYSCFG->EXTICR[13] |= (SYSCFG_EXTICR4_EXTI13 & SYSCFG_EXTICR4_EXTI13_PB);	/*!< PB[13] pin */
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <config_gpio_interrupt+0x250>)
 8000608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <config_gpio_interrupt+0x250>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000612:	e014      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 14:
		SYSCFG->EXTICR[14] |= (SYSCFG_EXTICR4_EXTI14 & SYSCFG_EXTICR4_EXTI14_PB);	/*!< PB[14] pin */
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <config_gpio_interrupt+0x250>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <config_gpio_interrupt+0x250>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000620:	e00d      	b.n	800063e <config_gpio_interrupt+0x25a>
		case 15:
		SYSCFG->EXTICR[15] |= (SYSCFG_EXTICR4_EXTI15 & SYSCFG_EXTICR4_EXTI15_PB);	/*!< PB[15] pin */
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <config_gpio_interrupt+0x250>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a03      	ldr	r2, [pc, #12]	; (8000634 <config_gpio_interrupt+0x250>)
 8000628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 800062e:	e006      	b.n	800063e <config_gpio_interrupt+0x25a>
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000
 8000638:	48000400 	.word	0x48000400
		}
	}
 800063c:	bf00      	nop

	/*****************  PORTC configuration for SYSCFG_EXTICRx  **************/
	if(PORT == GPIOC)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4a9c      	ldr	r2, [pc, #624]	; (80008b4 <config_gpio_interrupt+0x4d0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	f040 8098 	bne.w	8000778 <config_gpio_interrupt+0x394>
	{
		switch(pin)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	2b0f      	cmp	r3, #15
 800064c:	f200 8095 	bhi.w	800077a <config_gpio_interrupt+0x396>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <config_gpio_interrupt+0x274>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	08000699 	.word	0x08000699
 800065c:	080006a7 	.word	0x080006a7
 8000660:	080006b5 	.word	0x080006b5
 8000664:	080006c3 	.word	0x080006c3
 8000668:	080006d1 	.word	0x080006d1
 800066c:	080006df 	.word	0x080006df
 8000670:	080006ed 	.word	0x080006ed
 8000674:	080006fb 	.word	0x080006fb
 8000678:	08000709 	.word	0x08000709
 800067c:	08000717 	.word	0x08000717
 8000680:	08000725 	.word	0x08000725
 8000684:	08000733 	.word	0x08000733
 8000688:	08000741 	.word	0x08000741
 800068c:	0800074f 	.word	0x0800074f
 8000690:	0800075d 	.word	0x0800075d
 8000694:	0800076b 	.word	0x0800076b
		{
		/*****************  Bit configuration for SYSCFG_EXTICR1 register  **************/
		case 0:
		SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0 & SYSCFG_EXTICR1_EXTI0_PC);	/*!< PC[0] pin */
 8000698:	4b87      	ldr	r3, [pc, #540]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a86      	ldr	r2, [pc, #536]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	6093      	str	r3, [r2, #8]
		break;
 80006a4:	e069      	b.n	800077a <config_gpio_interrupt+0x396>
		case 1:
		SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1 & SYSCFG_EXTICR1_EXTI1_PC);	/*!< PC[1] pin */
 80006a6:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a83      	ldr	r2, [pc, #524]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	60d3      	str	r3, [r2, #12]
		break;
 80006b2:	e062      	b.n	800077a <config_gpio_interrupt+0x396>
		case 2:
		SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2 & SYSCFG_EXTICR1_EXTI2_PC);	/*!< PC[2] pin */
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	4a7f      	ldr	r2, [pc, #508]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006be:	6113      	str	r3, [r2, #16]
		break;
 80006c0:	e05b      	b.n	800077a <config_gpio_interrupt+0x396>
		case 3:
		SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3 & SYSCFG_EXTICR1_EXTI3_PC);	/*!< PC[3] pin */
 80006c2:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a7c      	ldr	r2, [pc, #496]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	6153      	str	r3, [r2, #20]
		break;
 80006ce:	e054      	b.n	800077a <config_gpio_interrupt+0x396>
		/*****************  Bit configuration for SYSCFG_EXTICR2 register  **************/
		case 4:
		SYSCFG->EXTICR[4] |= (SYSCFG_EXTICR2_EXTI4 & SYSCFG_EXTICR2_EXTI4_PC);	/*!< PC[4] pin */
 80006d0:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a78      	ldr	r2, [pc, #480]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006d6:	f043 0302 	orr.w	r3, r3, #2
 80006da:	6193      	str	r3, [r2, #24]
		break;
 80006dc:	e04d      	b.n	800077a <config_gpio_interrupt+0x396>
		case 5:
		SYSCFG->EXTICR[5] |= (SYSCFG_EXTICR2_EXTI5 & SYSCFG_EXTICR2_EXTI5_PC);	/*!< PC[5] pin */
 80006de:	4b76      	ldr	r3, [pc, #472]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a75      	ldr	r2, [pc, #468]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	61d3      	str	r3, [r2, #28]
		break;
 80006ea:	e046      	b.n	800077a <config_gpio_interrupt+0x396>
		case 6:
		SYSCFG->EXTICR[6] |= (SYSCFG_EXTICR2_EXTI6 & SYSCFG_EXTICR2_EXTI6_PC);	/*!< PC[6] pin */
 80006ec:	4b72      	ldr	r3, [pc, #456]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006ee:	6a1b      	ldr	r3, [r3, #32]
 80006f0:	4a71      	ldr	r2, [pc, #452]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6213      	str	r3, [r2, #32]
		break;
 80006f8:	e03f      	b.n	800077a <config_gpio_interrupt+0x396>
		case 7:
		SYSCFG->EXTICR[7] |= (SYSCFG_EXTICR2_EXTI7 & SYSCFG_EXTICR2_EXTI7_PC);	/*!< PC[7] pin */
 80006fa:	4b6f      	ldr	r3, [pc, #444]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	4a6e      	ldr	r2, [pc, #440]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000704:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000706:	e038      	b.n	800077a <config_gpio_interrupt+0x396>
		/*****************  Bit configuration for SYSCFG_EXTICR3 register  **************/
		case 8:
		SYSCFG->EXTICR[8] |= (SYSCFG_EXTICR3_EXTI8 & SYSCFG_EXTICR3_EXTI8_PC);	/*!< PC[8] pin */
 8000708:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070c:	4a6a      	ldr	r2, [pc, #424]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8000714:	e031      	b.n	800077a <config_gpio_interrupt+0x396>
		case 9:
		SYSCFG->EXTICR[9] |= (SYSCFG_EXTICR3_EXTI9 & SYSCFG_EXTICR3_EXTI9_PC);	/*!< PC[9] pin */
 8000716:	4b68      	ldr	r3, [pc, #416]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	4a67      	ldr	r2, [pc, #412]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8000722:	e02a      	b.n	800077a <config_gpio_interrupt+0x396>
		case 10:
		SYSCFG->EXTICR[10] |= (SYSCFG_EXTICR3_EXTI10 & SYSCFG_EXTICR3_EXTI10_PC);	/*!< PC[10] pin */
 8000724:	4b64      	ldr	r3, [pc, #400]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a63      	ldr	r2, [pc, #396]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000730:	e023      	b.n	800077a <config_gpio_interrupt+0x396>
		case 11:
		SYSCFG->EXTICR[11] |= (SYSCFG_EXTICR3_EXTI11 & SYSCFG_EXTICR3_EXTI11_PC);	/*!< PC[11] pin */
 8000732:	4b61      	ldr	r3, [pc, #388]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000736:	4a60      	ldr	r2, [pc, #384]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800073c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800073e:	e01c      	b.n	800077a <config_gpio_interrupt+0x396>
		/*****************  Bit configuration for SYSCFG_EXTICR4 register  **************/
		case 12:
		SYSCFG->EXTICR[12] |= (SYSCFG_EXTICR4_EXTI12 & SYSCFG_EXTICR4_EXTI12_PC);	/*!< PC[12] pin */
 8000740:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000744:	4a5c      	ldr	r2, [pc, #368]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800074c:	e015      	b.n	800077a <config_gpio_interrupt+0x396>
		case 13:
		SYSCFG->EXTICR[13] |= (SYSCFG_EXTICR4_EXTI13 & SYSCFG_EXTICR4_EXTI13_PC);	/*!< PC[13] pin */
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800075a:	e00e      	b.n	800077a <config_gpio_interrupt+0x396>
		case 14:
		SYSCFG->EXTICR[14] |= (SYSCFG_EXTICR4_EXTI14 & SYSCFG_EXTICR4_EXTI14_PC);	/*!< PC[14] pin */
 800075c:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a55      	ldr	r2, [pc, #340]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000768:	e007      	b.n	800077a <config_gpio_interrupt+0x396>
		case 15:
		SYSCFG->EXTICR[15] |= (SYSCFG_EXTICR4_EXTI15 & SYSCFG_EXTICR4_EXTI15_PC);	/*!< PC[15] pin */
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a52      	ldr	r2, [pc, #328]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8000776:	e000      	b.n	800077a <config_gpio_interrupt+0x396>
		}
	}
 8000778:	bf00      	nop

	/*****************  PORTD configuration for SYSCFG_EXTICRx  **************/
	if(PORT == GPIOD)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4a4f      	ldr	r2, [pc, #316]	; (80008bc <config_gpio_interrupt+0x4d8>)
 800077e:	4293      	cmp	r3, r2
 8000780:	f040 809e 	bne.w	80008c0 <config_gpio_interrupt+0x4dc>
	{
		switch(pin)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b0f      	cmp	r3, #15
 8000788:	f200 809b 	bhi.w	80008c2 <config_gpio_interrupt+0x4de>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <config_gpio_interrupt+0x3b0>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007d5 	.word	0x080007d5
 8000798:	080007e3 	.word	0x080007e3
 800079c:	080007f1 	.word	0x080007f1
 80007a0:	080007ff 	.word	0x080007ff
 80007a4:	0800080d 	.word	0x0800080d
 80007a8:	0800081b 	.word	0x0800081b
 80007ac:	08000829 	.word	0x08000829
 80007b0:	08000837 	.word	0x08000837
 80007b4:	08000845 	.word	0x08000845
 80007b8:	08000853 	.word	0x08000853
 80007bc:	08000861 	.word	0x08000861
 80007c0:	0800086f 	.word	0x0800086f
 80007c4:	0800087d 	.word	0x0800087d
 80007c8:	0800088b 	.word	0x0800088b
 80007cc:	08000899 	.word	0x08000899
 80007d0:	080008a7 	.word	0x080008a7
		{
		/*****************  Bit configuration for SYSCFG_EXTICR1 register  **************/
		case 0:
		SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0 & SYSCFG_EXTICR1_EXTI0_PD);	/*!< PD[0] pin */
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007da:	f043 0303 	orr.w	r3, r3, #3
 80007de:	6093      	str	r3, [r2, #8]
		break;
 80007e0:	e06f      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 1:
		SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1 & SYSCFG_EXTICR1_EXTI1_PD);	/*!< PD[1] pin */
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007ec:	60d3      	str	r3, [r2, #12]
		break;
 80007ee:	e068      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 2:
		SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2 & SYSCFG_EXTICR1_EXTI2_PD);	/*!< PD[2] pin */
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80007f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80007fa:	6113      	str	r3, [r2, #16]
		break;
 80007fc:	e061      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 3:
		SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3 & SYSCFG_EXTICR1_EXTI3_PD);	/*!< PD[3] pin */
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000804:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000808:	6153      	str	r3, [r2, #20]
		break;
 800080a:	e05a      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		/*****************  Bit configuration for SYSCFG_EXTICR2 register  **************/
		case 4:
		SYSCFG->EXTICR[4] |= (SYSCFG_EXTICR2_EXTI4 & SYSCFG_EXTICR2_EXTI4_PD);	/*!< PD[4] pin */
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000812:	f043 0303 	orr.w	r3, r3, #3
 8000816:	6193      	str	r3, [r2, #24]
		break;
 8000818:	e053      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 5:
		SYSCFG->EXTICR[5] |= (SYSCFG_EXTICR2_EXTI5 & SYSCFG_EXTICR2_EXTI5_PD);	/*!< PD[5] pin */
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000820:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000824:	61d3      	str	r3, [r2, #28]
		break;
 8000826:	e04c      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 6:
		SYSCFG->EXTICR[6] |= (SYSCFG_EXTICR2_EXTI6 & SYSCFG_EXTICR2_EXTI6_PD);	/*!< PD[6] pin */
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800082e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000832:	6213      	str	r3, [r2, #32]
		break;
 8000834:	e045      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 7:
		SYSCFG->EXTICR[7] |= (SYSCFG_EXTICR2_EXTI7 & SYSCFG_EXTICR2_EXTI7_PD);	/*!< PD[7] pin */
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800083c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000840:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000842:	e03e      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		/*****************  Bit configuration for SYSCFG_EXTICR3 register  **************/
		case 8:
		SYSCFG->EXTICR[8] |= (SYSCFG_EXTICR3_EXTI8 & SYSCFG_EXTICR3_EXTI8_PD);	/*!< PD[8] pin */
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	4a1b      	ldr	r2, [pc, #108]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800084a:	f043 0303 	orr.w	r3, r3, #3
 800084e:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8000850:	e037      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 9:
		SYSCFG->EXTICR[9] |= (SYSCFG_EXTICR3_EXTI9 & SYSCFG_EXTICR3_EXTI9_PD);	/*!< PD[9] pin */
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000858:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800085c:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 800085e:	e030      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 10:
		SYSCFG->EXTICR[10] |= (SYSCFG_EXTICR3_EXTI10 & SYSCFG_EXTICR3_EXTI10_PD);	/*!< PD[10] pin */
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000866:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800086c:	e029      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 11:
		SYSCFG->EXTICR[11] |= (SYSCFG_EXTICR3_EXTI11 & SYSCFG_EXTICR3_EXTI11_PD);	/*!< PD[11] pin */
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000874:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000878:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800087a:	e022      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		/*****************  Bit configuration for SYSCFG_EXTICR4 register  **************/
		case 12:
		SYSCFG->EXTICR[12] |= (SYSCFG_EXTICR4_EXTI12 & SYSCFG_EXTICR4_EXTI12_PD);	/*!< PD[12] pin */
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000882:	f043 0303 	orr.w	r3, r3, #3
 8000886:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000888:	e01b      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 13:
		SYSCFG->EXTICR[13] |= (SYSCFG_EXTICR4_EXTI13 & SYSCFG_EXTICR4_EXTI13_PD);	/*!< PD[13] pin */
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800088c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 8000890:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000894:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000896:	e014      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 14:
		SYSCFG->EXTICR[14] |= (SYSCFG_EXTICR4_EXTI14 & SYSCFG_EXTICR4_EXTI14_PD);	/*!< PD[14] pin */
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 800089e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80008a4:	e00d      	b.n	80008c2 <config_gpio_interrupt+0x4de>
		case 15:
		SYSCFG->EXTICR[15] |= (SYSCFG_EXTICR4_EXTI15 & SYSCFG_EXTICR4_EXTI15_PD);	/*!< PD[15] pin */
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a03      	ldr	r2, [pc, #12]	; (80008b8 <config_gpio_interrupt+0x4d4>)
 80008ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 80008b2:	e006      	b.n	80008c2 <config_gpio_interrupt+0x4de>
 80008b4:	48000800 	.word	0x48000800
 80008b8:	40010000 	.word	0x40010000
 80008bc:	48000c00 	.word	0x48000c00
		}
	}
 80008c0:	bf00      	nop

	/*****************  PORTF configuration for SYSCFG_EXTICRx  **************/
	if(PORT == GPIOF)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	4a69      	ldr	r2, [pc, #420]	; (8000a6c <config_gpio_interrupt+0x688>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	f040 8098 	bne.w	80009fc <config_gpio_interrupt+0x618>
	{
		switch(pin)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	f200 8095 	bhi.w	80009fe <config_gpio_interrupt+0x61a>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <config_gpio_interrupt+0x4f8>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	0800091d 	.word	0x0800091d
 80008e0:	0800092b 	.word	0x0800092b
 80008e4:	08000939 	.word	0x08000939
 80008e8:	08000947 	.word	0x08000947
 80008ec:	08000955 	.word	0x08000955
 80008f0:	08000963 	.word	0x08000963
 80008f4:	08000971 	.word	0x08000971
 80008f8:	0800097f 	.word	0x0800097f
 80008fc:	0800098d 	.word	0x0800098d
 8000900:	0800099b 	.word	0x0800099b
 8000904:	080009a9 	.word	0x080009a9
 8000908:	080009b7 	.word	0x080009b7
 800090c:	080009c5 	.word	0x080009c5
 8000910:	080009d3 	.word	0x080009d3
 8000914:	080009e1 	.word	0x080009e1
 8000918:	080009ef 	.word	0x080009ef
		{
		/*****************  Bit configuration for SYSCFG_EXTICR1 register  **************/
		case 0:
		SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0 & SYSCFG_EXTICR1_EXTI0_PF);	/*!< PF[0] pin */
 800091c:	4b54      	ldr	r3, [pc, #336]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	4a53      	ldr	r2, [pc, #332]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000922:	f043 0305 	orr.w	r3, r3, #5
 8000926:	6093      	str	r3, [r2, #8]
		break;
 8000928:	e069      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 1:
		SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR1_EXTI1 & SYSCFG_EXTICR1_EXTI1_PF);	/*!< PF[1] pin */
 800092a:	4b51      	ldr	r3, [pc, #324]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000930:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000934:	60d3      	str	r3, [r2, #12]
		break;
 8000936:	e062      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 2:
		SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR1_EXTI2 & SYSCFG_EXTICR1_EXTI2_PF);	/*!< PF[2] pin */
 8000938:	4b4d      	ldr	r3, [pc, #308]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	4a4c      	ldr	r2, [pc, #304]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800093e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000942:	6113      	str	r3, [r2, #16]
		break;
 8000944:	e05b      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 3:
		SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR1_EXTI3 & SYSCFG_EXTICR1_EXTI3_PF);	/*!< PF[3] pin */
 8000946:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800094c:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000950:	6153      	str	r3, [r2, #20]
		break;
 8000952:	e054      	b.n	80009fe <config_gpio_interrupt+0x61a>
		/*****************  Bit configuration for SYSCFG_EXTICR2 register  **************/
		case 4:
		SYSCFG->EXTICR[4] |= (SYSCFG_EXTICR2_EXTI4 & SYSCFG_EXTICR2_EXTI4_PF);	/*!< PF[4] pin */
 8000954:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a45      	ldr	r2, [pc, #276]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800095a:	f043 0305 	orr.w	r3, r3, #5
 800095e:	6193      	str	r3, [r2, #24]
		break;
 8000960:	e04d      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 5:
		SYSCFG->EXTICR[5] |= (SYSCFG_EXTICR2_EXTI5 & SYSCFG_EXTICR2_EXTI5_PF);	/*!< PF[5] pin */
 8000962:	4b43      	ldr	r3, [pc, #268]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a42      	ldr	r2, [pc, #264]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000968:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800096c:	61d3      	str	r3, [r2, #28]
		break;
 800096e:	e046      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 6:
		SYSCFG->EXTICR[6] |= (SYSCFG_EXTICR2_EXTI6 & SYSCFG_EXTICR2_EXTI6_PF);	/*!< PF[6] pin */
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000972:	6a1b      	ldr	r3, [r3, #32]
 8000974:	4a3e      	ldr	r2, [pc, #248]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000976:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800097a:	6213      	str	r3, [r2, #32]
		break;
 800097c:	e03f      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 7:
		SYSCFG->EXTICR[7] |= (SYSCFG_EXTICR2_EXTI7 & SYSCFG_EXTICR2_EXTI7_PF);	/*!< PF[7] pin */
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	4a3b      	ldr	r2, [pc, #236]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000984:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000988:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 800098a:	e038      	b.n	80009fe <config_gpio_interrupt+0x61a>
		/*****************  Bit configuration for SYSCFG_EXTICR3 register  **************/
		case 8:
		SYSCFG->EXTICR[8] |= (SYSCFG_EXTICR3_EXTI8 & SYSCFG_EXTICR3_EXTI8_PF);	/*!< PF[8] pin */
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	4a37      	ldr	r2, [pc, #220]	; (8000a70 <config_gpio_interrupt+0x68c>)
 8000992:	f043 0305 	orr.w	r3, r3, #5
 8000996:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8000998:	e031      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 9:
		SYSCFG->EXTICR[9] |= (SYSCFG_EXTICR3_EXTI9 & SYSCFG_EXTICR3_EXTI9_PF);	/*!< PF[9] pin */
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <config_gpio_interrupt+0x68c>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	4a34      	ldr	r2, [pc, #208]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009a0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80009a6:	e02a      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 10:
		SYSCFG->EXTICR[10] |= (SYSCFG_EXTICR3_EXTI10 & SYSCFG_EXTICR3_EXTI10_PF);	/*!< PF[10] pin */
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009ae:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80009b4:	e023      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 11:
		SYSCFG->EXTICR[11] |= (SYSCFG_EXTICR3_EXTI11 & SYSCFG_EXTICR3_EXTI11_PF);	/*!< PF[11] pin */
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ba:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009bc:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80009c0:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 80009c2:	e01c      	b.n	80009fe <config_gpio_interrupt+0x61a>
		/*****************  Bit configuration for SYSCFG_EXTICR4 register  **************/
		case 12:
		SYSCFG->EXTICR[12] |= (SYSCFG_EXTICR4_EXTI12 & SYSCFG_EXTICR4_EXTI12_PF);	/*!< PF[12] pin */
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009ca:	f043 0305 	orr.w	r3, r3, #5
 80009ce:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 80009d0:	e015      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 13:
		SYSCFG->EXTICR[13] |= (SYSCFG_EXTICR4_EXTI13 & SYSCFG_EXTICR4_EXTI13_PF);	/*!< PF[13] pin */
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d6:	4a26      	ldr	r2, [pc, #152]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009d8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80009dc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80009de:	e00e      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 14:
		SYSCFG->EXTICR[14] |= (SYSCFG_EXTICR4_EXTI14 & SYSCFG_EXTICR4_EXTI14_PF);	/*!< PF[14] pin */
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009e6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80009ec:	e007      	b.n	80009fe <config_gpio_interrupt+0x61a>
		case 15:
		SYSCFG->EXTICR[15] |= (SYSCFG_EXTICR4_EXTI15 & SYSCFG_EXTICR4_EXTI15_PF);	/*!< PF[15] pin */
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <config_gpio_interrupt+0x68c>)
 80009f4:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 80009fa:	e000      	b.n	80009fe <config_gpio_interrupt+0x61a>
		}
	}
 80009fc:	bf00      	nop

	/*****************  Rising/Falling Trigger configuration register  **************/
	if(edge == RISING_EDGE){
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d109      	bne.n	8000a18 <config_gpio_interrupt+0x634>
		EXTI->RTSR |= 1<<pin;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a14:	430b      	orrs	r3, r1
 8000a16:	6093      	str	r3, [r2, #8]
	}
	if(edge == FALLING_EDGE){
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d109      	bne.n	8000a32 <config_gpio_interrupt+0x64e>
		EXTI->FTSR |= 1<<pin;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	2101      	movs	r1, #1
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	60d3      	str	r3, [r2, #12]
	}
	if(edge == RISING_FALLING_EDGE){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d113      	bne.n	8000a60 <config_gpio_interrupt+0x67c>
		EXTI->RTSR |= 1<<pin;
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= 1<<pin;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2101      	movs	r1, #1
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	fa01 f202 	lsl.w	r2, r1, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <config_gpio_interrupt+0x690>)
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	60d3      	str	r3, [r2, #12]
	}
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	48001400 	.word	0x48001400
 8000a70:	40010000 	.word	0x40010000
 8000a74:	40010400 	.word	0x40010400

08000a78 <enable_gpio_interrupt>:

void enable_gpio_interrupt(uint32_t pin, IRQn_Type irqNum, uint8_t setPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
 8000a84:	4613      	mov	r3, r2
 8000a86:	70bb      	strb	r3, [r7, #2]
	/*****************  Interrupt mask configuration register  **************/
	EXTI->IMR |= 1<<pin;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <enable_gpio_interrupt+0x44>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <enable_gpio_interrupt+0x44>)
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6013      	str	r3, [r2, #0]
	/*****************  Interrupt NVIC SetPriority configuration register  **************/
	NVIC_SetPriority(irqNum, setPriority);
 8000a9c:	78ba      	ldrb	r2, [r7, #2]
 8000a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbb3 	bl	8000210 <__NVIC_SetPriority>
	/*****************  Interrupt NVIC irqNum configuration register  **************/
	NVIC_EnableIRQ(irqNum);
 8000aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fb90 	bl	80001d4 <__NVIC_EnableIRQ>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40010400 	.word	0x40010400

08000ac0 <reset_interrupt>:

void reset_interrupt(uint32_t pin)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	/*****************  Interrupt Reset configuration register  **************/
	EXTI->PR |= 1<<pin;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <reset_interrupt+0x28>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	2101      	movs	r1, #1
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <reset_interrupt+0x28>)
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	6153      	str	r3, [r2, #20]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40010400 	.word	0x40010400

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SysTick_Init(16000);
 8000af2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000af6:	f7ff fbb5 	bl	8000264 <SysTick_Init>
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //enable the bus for port A.
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <main+0xac>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <main+0xac>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable the bus for port B.
 8000b06:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <main+0xac>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <main+0xac>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b10:	6153      	str	r3, [r2, #20]

	// Pin Configurations.
	SetPin(GPIOA, 10, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); // (PA10) LED0
 8000b12:	2300      	movs	r3, #0
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	210a      	movs	r1, #10
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f7ff fc35 	bl	8000392 <SetPin>
	SetPin(GPIOA, 4, INPUT, PUSHPULL, LOWSPEED, PULLUP); // (PA4) BUTTON0
 8000b28:	2301      	movs	r3, #1
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2104      	movs	r1, #4
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f7ff fc2a 	bl	8000392 <SetPin>

	SetPin(GPIOB, 5, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); // (PB5) LED1
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2201      	movs	r2, #1
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <main+0xb0>)
 8000b4e:	f7ff fc20 	bl	8000392 <SetPin>
	SetPin(GPIOB, 0, INPUT, PUSHPULL, LOWSPEED, PULLUP); // (PB0) BUTTON1
 8000b52:	2301      	movs	r3, #1
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	480e      	ldr	r0, [pc, #56]	; (8000b9c <main+0xb0>)
 8000b62:	f7ff fc16 	bl	8000392 <SetPin>

	// Interrupt Configuration
	config_gpio_interrupt(GPIOA, 4, RISING_FALLING_EDGE); // (PA4) BUTTON0
 8000b66:	2202      	movs	r2, #2
 8000b68:	2104      	movs	r1, #4
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f7ff fc39 	bl	80003e4 <config_gpio_interrupt>
	enable_gpio_interrupt(4, EXTI4_IRQn, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210a      	movs	r1, #10
 8000b76:	2004      	movs	r0, #4
 8000b78:	f7ff ff7e 	bl	8000a78 <enable_gpio_interrupt>

	config_gpio_interrupt(GPIOB, 0, RISING_FALLING_EDGE); // (PB0) BUTTON1
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <main+0xb0>)
 8000b82:	f7ff fc2f 	bl	80003e4 <config_gpio_interrupt>
	enable_gpio_interrupt(0, EXTI0_IRQn, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2106      	movs	r1, #6
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff ff74 	bl	8000a78 <enable_gpio_interrupt>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f806 	bl	8000ba0 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0xa8>
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2228      	movs	r2, #40	; 0x28
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fcb8 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa46 	bl	8001068 <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000be2:	f000 f816 	bl	8000c12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	2307      	movs	r3, #7
 8000be8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fa88 	bl	8002110 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c06:	f000 f804 	bl	8000c12 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3740      	adds	r7, #64	; 0x40
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c16:	b672      	cpsid	i
}
 8000c18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <Error_Handler+0x8>

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
//  /* USER CODE BEGIN SysTick_IRQn 0 */

	//	Systick counter incrementations.
	millis_counter++;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <SysTick_Handler+0x2c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <SysTick_Handler+0x2c>)
 8000c50:	6013      	str	r3, [r2, #0]
	timerCounter++;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SysTick_Handler+0x30>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <SysTick_Handler+0x30>)
 8000c5a:	6013      	str	r3, [r2, #0]
	timerCounter2++;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SysTick_Handler+0x34>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SysTick_Handler+0x34>)
 8000c64:	6013      	str	r3, [r2, #0]
//  /* USER CODE END SysTick_IRQn 0 */

//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	2000002c 	.word	0x2000002c
 8000c74:	20000030 	.word	0x20000030
 8000c78:	20000038 	.word	0x20000038

08000c7c <Button0_Press>:
/******************************************************************************/

/* USER CODE BEGIN 1 */

void Button0_Press()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	//	Wait for the interrupt to set the flag and then reset it before taking any action.
	flag = 0;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <Button0_Press+0x88>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	if((millis() - previous_button0_time) >= 20) // Debouncing using millis()
 8000c86:	f7ff fb19 	bl	80002bc <millis>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <Button0_Press+0x8c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b13      	cmp	r3, #19
 8000c94:	d934      	bls.n	8000d00 <Button0_Press+0x84>
	{
		  if((GPIOA->IDR & GPIO_IDR_4) == 0)
 8000c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <Button0_Press+0x2e>
		  {
			  timerCounter = 0; //	Resets counter when button is not pressed
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <Button0_Press+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	  	  }

		  //	Button toggle depending on how long its pressed
		  if((GPIOA->IDR & GPIO_IDR_4) != 0)
 8000caa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d023      	beq.n	8000d00 <Button0_Press+0x84>
		  {
		  	  if(timerCounter > 500)
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <Button0_Press+0x90>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cc0:	dd08      	ble.n	8000cd4 <Button0_Press+0x58>
		  	  {
			  	  GPIOA->BSRR |= GPIO_BSRR_BR_10;
 8000cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	e010      	b.n	8000cf6 <Button0_Press+0x7a>
		  	  }
		  	  else if((timerCounter >= 20) && (timerCounter <= 500))
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <Button0_Press+0x90>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b13      	cmp	r3, #19
 8000cda:	dd0c      	ble.n	8000cf6 <Button0_Press+0x7a>
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <Button0_Press+0x90>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ce4:	dc07      	bgt.n	8000cf6 <Button0_Press+0x7a>
		  	  {
			  	  GPIOA->BSRR |= GPIO_BSRR_BS_10;
 8000ce6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf4:	6193      	str	r3, [r2, #24]
		  	  }
		  	  previous_button0_time = millis(); //	current time will be saved to previous time to reset debouncing
 8000cf6:	f7ff fae1 	bl	80002bc <millis>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a02      	ldr	r2, [pc, #8]	; (8000d08 <Button0_Press+0x8c>)
 8000cfe:	6013      	str	r3, [r2, #0]
		  }
	}
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000028 	.word	0x20000028
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	20000030 	.word	0x20000030

08000d10 <Button1_Press>:

void Button1_Press()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//	Wait for the interrupt to set the flag2 and then reset it before taking any action.
	flag2 = 0;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <Button1_Press+0x7c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	if((millis() - previous_button1_time) >= 20) //	Debouncing using millis()
 8000d1a:	f7ff facf 	bl	80002bc <millis>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <Button1_Press+0x80>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b13      	cmp	r3, #19
 8000d28:	d92e      	bls.n	8000d88 <Button1_Press+0x78>
	{
		  if((GPIOB->IDR & GPIO_IDR_0) == 0)
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <Button1_Press+0x84>)
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <Button1_Press+0x2c>
		  {
			  timerCounter2 = 0; //	Resets counter when button is not pressed
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <Button1_Press+0x88>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	  	  }

		  //	Button toggle depending on how long its pressed
		  if((GPIOB->IDR & GPIO_IDR_0) != 0)
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <Button1_Press+0x84>)
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01a      	beq.n	8000d7e <Button1_Press+0x6e>
		  {
		  	  if(timerCounter2 > 500)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <Button1_Press+0x88>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d50:	dd06      	ble.n	8000d60 <Button1_Press+0x50>
		  	  {
		  		GPIOB->BSRR |= GPIO_BSRR_BR_5;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <Button1_Press+0x84>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <Button1_Press+0x84>)
 8000d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	e00e      	b.n	8000d7e <Button1_Press+0x6e>
		  	  }
		  	  else if(timerCounter2 >= 20 && timerCounter2 <= 500)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <Button1_Press+0x88>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b13      	cmp	r3, #19
 8000d66:	dd0a      	ble.n	8000d7e <Button1_Press+0x6e>
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <Button1_Press+0x88>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d70:	dc05      	bgt.n	8000d7e <Button1_Press+0x6e>
		  	  {
		  		GPIOB->BSRR |= GPIO_BSRR_BS_5;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <Button1_Press+0x84>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <Button1_Press+0x84>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6193      	str	r3, [r2, #24]
		  	  }
		  }
		previous_button1_time = millis(); //	current time will be saved to previous time to reset debouncing
 8000d7e:	f7ff fa9d 	bl	80002bc <millis>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a02      	ldr	r2, [pc, #8]	; (8000d90 <Button1_Press+0x80>)
 8000d86:	6013      	str	r3, [r2, #0]
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000034 	.word	0x20000034
 8000d90:	20000040 	.word	0x20000040
 8000d94:	48000400 	.word	0x48000400
 8000d98:	20000038 	.word	0x20000038

08000d9c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	// Reset interrupt flag of EXTI4.
	if(EXTI->PR & EXTI_PR_PR4)
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <EXTI4_IRQHandler+0x30>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <EXTI4_IRQHandler+0x16>
		{
		reset_interrupt(4);
 8000dac:	2004      	movs	r0, #4
 8000dae:	f7ff fe87 	bl	8000ac0 <reset_interrupt>
		}
	//	Enable flag when button interrupt occurs
	flag = 1;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <EXTI4_IRQHandler+0x34>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
	if(flag)
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <EXTI4_IRQHandler+0x34>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <EXTI4_IRQHandler+0x2a>
	{
		Button0_Press();
 8000dc2:	f7ff ff5b 	bl	8000c7c <Button0_Press>
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400
 8000dd0:	20000028 	.word	0x20000028

08000dd4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	// Reset interrupt flag of EXTI0.
	if(EXTI->PR & EXTI_PR_PR0)
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <EXTI0_IRQHandler+0x30>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <EXTI0_IRQHandler+0x16>
		{
		reset_interrupt(0);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff fe6b 	bl	8000ac0 <reset_interrupt>
		}
	//	Enable flag2 when button interrupt occurs
	flag2 = 1;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <EXTI0_IRQHandler+0x34>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
	if(flag2)
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <EXTI0_IRQHandler+0x34>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <EXTI0_IRQHandler+0x2a>
	{
		Button1_Press();
 8000dfa:	f7ff ff89 	bl	8000d10 <Button1_Press>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40010400 	.word	0x40010400
 8000e08:	20000034 	.word	0x20000034

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f001 fb3d 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fe43 	bl	8000aec <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e74:	08002584 	.word	0x08002584
  ldr r2, =_sbss
 8000e78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e7c:	20000048 	.word	0x20000048

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x54>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x58>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f8d4 	bl	8001050 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f8aa 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <HAL_InitTick+0x5c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000044 	.word	0x20000044

08000efc <__NVIC_GetPriorityGrouping>:
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_SetPriority>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff67 	bl	8000efc <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ff99 	bl	8000f6c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff68 	bl	8000f18 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ffbb 	bl	8000fd4 <SysTick_Config>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800106e:	af00      	add	r7, sp, #0
 8001070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001078:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800107a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800107e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	f001 b83a 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 816f 	beq.w	8001382 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010a4:	4bb5      	ldr	r3, [pc, #724]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4bb2      	ldr	r3, [pc, #712]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d15c      	bne.n	8001176 <HAL_RCC_OscConfig+0x10e>
 80010bc:	4baf      	ldr	r3, [pc, #700]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d155      	bne.n	8001176 <HAL_RCC_OscConfig+0x10e>
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	095b      	lsrs	r3, r3, #5
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d102      	bne.n	80010fc <HAL_RCC_OscConfig+0x94>
 80010f6:	4ba1      	ldr	r3, [pc, #644]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	e015      	b.n	8001128 <HAL_RCC_OscConfig+0xc0>
 80010fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001100:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001118:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001124:	4b95      	ldr	r3, [pc, #596]	; (800137c <HAL_RCC_OscConfig+0x314>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800112c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001130:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001134:	fa92 f2a2 	rbit	r2, r2
 8001138:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800113c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001140:	fab2 f282 	clz	r2, r2
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	f042 0220 	orr.w	r2, r2, #32
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	f002 021f 	and.w	r2, r2, #31
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8111 	beq.w	8001380 <HAL_RCC_OscConfig+0x318>
 800115e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 8108 	bne.w	8001380 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f000 bfc6 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x12e>
 8001188:	4b7c      	ldr	r3, [pc, #496]	; (800137c <HAL_RCC_OscConfig+0x314>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a7b      	ldr	r2, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x314>)
 800118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e036      	b.n	8001204 <HAL_RCC_OscConfig+0x19c>
 8001196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x158>
 80011a6:	4b75      	ldr	r3, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a74      	ldr	r2, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b72      	ldr	r3, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a71      	ldr	r2, [pc, #452]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e021      	b.n	8001204 <HAL_RCC_OscConfig+0x19c>
 80011c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x184>
 80011d2:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a69      	ldr	r2, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a66      	ldr	r2, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0x19c>
 80011ec:	4b63      	ldr	r3, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a62      	ldr	r2, [pc, #392]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b60      	ldr	r3, [pc, #384]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a5f      	ldr	r2, [pc, #380]	; (800137c <HAL_RCC_OscConfig+0x314>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d059      	beq.n	80012c8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fe66 	bl	8000ee4 <HAL_GetTick>
 8001218:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121e:	f7ff fe61 	bl	8000ee4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d902      	bls.n	8001234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	f000 bf67 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 8001234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001238:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001248:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x1fe>
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x314>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	e015      	b.n	8001292 <HAL_RCC_OscConfig+0x22a>
 8001266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001282:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x314>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001296:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800129a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0ab      	beq.n	800121e <HAL_RCC_OscConfig+0x1b6>
 80012c6:	e05c      	b.n	8001382 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fe0c 	bl	8000ee4 <HAL_GetTick>
 80012cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d2:	f7ff fe07 	bl	8000ee4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d902      	bls.n	80012e8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	f000 bf0d 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 80012e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001300:	fab3 f383 	clz	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <HAL_RCC_OscConfig+0x2b2>
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_OscConfig+0x314>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x2de>
 800131a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800131e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800132e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001332:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001336:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_RCC_OscConfig+0x314>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800134a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800134e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800135a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ab      	bne.n	80012d2 <HAL_RCC_OscConfig+0x26a>
 800137a:	e002      	b.n	8001382 <HAL_RCC_OscConfig+0x31a>
 800137c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001386:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 817f 	beq.w	8001696 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001398:	4ba7      	ldr	r3, [pc, #668]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00c      	beq.n	80013be <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a4:	4ba4      	ldr	r3, [pc, #656]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d173      	bne.n	8001498 <HAL_RCC_OscConfig+0x430>
 80013b0:	4ba1      	ldr	r3, [pc, #644]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013bc:	d16c      	bne.n	8001498 <HAL_RCC_OscConfig+0x430>
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80013d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d102      	bne.n	80013ee <HAL_RCC_OscConfig+0x386>
 80013e8:	4b93      	ldr	r3, [pc, #588]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	e013      	b.n	8001416 <HAL_RCC_OscConfig+0x3ae>
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001406:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	2202      	movs	r2, #2
 8001418:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800141c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001420:	fa92 f2a2 	rbit	r2, r2
 8001424:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001428:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f002 021f 	and.w	r2, r2, #31
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00a      	beq.n	800145e <HAL_RCC_OscConfig+0x3f6>
 8001448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d002      	beq.n	800145e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	f000 be52 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	21f8      	movs	r1, #248	; 0xf8
 8001474:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800147c:	fa91 f1a1 	rbit	r1, r1
 8001480:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001484:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001488:	fab1 f181 	clz	r1, r1
 800148c:	b2c9      	uxtb	r1, r1
 800148e:	408b      	lsls	r3, r1
 8001490:	4969      	ldr	r1, [pc, #420]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e0fe      	b.n	8001696 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8088 	beq.w	80015ba <HAL_RCC_OscConfig+0x552>
 80014aa:	2301      	movs	r3, #1
 80014ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c0:	fab3 f383 	clz	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	2301      	movs	r3, #1
 80014d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fd05 	bl	8000ee4 <HAL_GetTick>
 80014da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fd00 	bl	8000ee4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d902      	bls.n	80014f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f000 be06 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001508:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	095b      	lsrs	r3, r3, #5
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d102      	bne.n	8001526 <HAL_RCC_OscConfig+0x4be>
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	e013      	b.n	800154e <HAL_RCC_OscConfig+0x4e6>
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800153e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2202      	movs	r2, #2
 8001550:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001554:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001558:	fa92 f2a2 	rbit	r2, r2
 800155c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001560:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001564:	fab2 f282 	clz	r2, r2
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	f002 021f 	and.w	r2, r2, #31
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0af      	beq.n	80014e0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	21f8      	movs	r1, #248	; 0xf8
 8001596:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800159e:	fa91 f1a1 	rbit	r1, r1
 80015a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015aa:	fab1 f181 	clz	r1, r1
 80015ae:	b2c9      	uxtb	r1, r1
 80015b0:	408b      	lsls	r3, r1
 80015b2:	4921      	ldr	r1, [pc, #132]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e06d      	b.n	8001696 <HAL_RCC_OscConfig+0x62e>
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80015cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	461a      	mov	r2, r3
 80015e2:	2300      	movs	r3, #0
 80015e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc7d 	bl	8000ee4 <HAL_GetTick>
 80015ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc78 	bl	8000ee4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d902      	bls.n	8001606 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	f000 bd7e 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x5d4>
 8001630:	4b01      	ldr	r3, [pc, #4]	; (8001638 <HAL_RCC_OscConfig+0x5d0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	e016      	b.n	8001664 <HAL_RCC_OscConfig+0x5fc>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001654:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001658:	fa93 f3a3 	rbit	r3, r3
 800165c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001660:	4bbf      	ldr	r3, [pc, #764]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2202      	movs	r2, #2
 8001666:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800166a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800166e:	fa92 f2a2 	rbit	r2, r2
 8001672:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001676:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800167a:	fab2 f282 	clz	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f042 0220 	orr.w	r2, r2, #32
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f002 021f 	and.w	r2, r2, #31
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ac      	bne.n	80015f0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8113 	beq.w	80018d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d07c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x74e>
 80016bc:	2301      	movs	r3, #1
 80016be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80016ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4ba2      	ldr	r3, [pc, #648]	; (8001964 <HAL_RCC_OscConfig+0x8fc>)
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbfd 	bl	8000ee4 <HAL_GetTick>
 80016ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fbf8 	bl	8000ee4 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d902      	bls.n	8001706 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	f000 bcfe 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001718:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fa93 f2a3 	rbit	r2, r3
 8001738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800174a:	2202      	movs	r2, #2
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001760:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001764:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 8001768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001772:	2102      	movs	r1, #2
 8001774:	6019      	str	r1, [r3, #0]
 8001776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	fa93 f1a3 	rbit	r1, r3
 8001784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001788:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800178c:	6019      	str	r1, [r3, #0]
  return result;
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d09d      	beq.n	80016f0 <HAL_RCC_OscConfig+0x688>
 80017b4:	e08d      	b.n	80018d2 <HAL_RCC_OscConfig+0x86a>
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fa93 f2a3 	rbit	r2, r3
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017d8:	601a      	str	r2, [r3, #0]
  return result;
 80017da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x8fc>)
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	461a      	mov	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb74 	bl	8000ee4 <HAL_GetTick>
 80017fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fb6f 	bl	8000ee4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d902      	bls.n	8001818 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	f000 bc75 	b.w	8002102 <HAL_RCC_OscConfig+0x109a>
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001882:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 8001886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001890:	2102      	movs	r1, #2
 8001892:	6019      	str	r1, [r3, #0]
 8001894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001898:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f1a3 	rbit	r1, r3
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018aa:	6019      	str	r1, [r3, #0]
  return result;
 80018ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d197      	bne.n	8001802 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 81a5 	beq.w	8001c32 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_RCC_OscConfig+0x8f8>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001920:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_RCC_OscConfig+0x900>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d121      	bne.n	8001978 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x900>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x900>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001940:	f7ff fad0 	bl	8000ee4 <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e010      	b.n	800196c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff facb 	bl	8000ee4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e3d1      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	10908120 	.word	0x10908120
 8001968:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b8d      	ldr	r3, [pc, #564]	; (8001ba4 <HAL_RCC_OscConfig+0xb3c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0e8      	beq.n	800194a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x92e>
 8001988:	4b87      	ldr	r3, [pc, #540]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a86      	ldr	r2, [pc, #536]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e035      	b.n	8001a02 <HAL_RCC_OscConfig+0x99a>
 8001996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x958>
 80019a6:	4b80      	ldr	r3, [pc, #512]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a7f      	ldr	r2, [pc, #508]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a7c      	ldr	r2, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	e020      	b.n	8001a02 <HAL_RCC_OscConfig+0x99a>
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x982>
 80019d0:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a74      	ldr	r2, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a71      	ldr	r2, [pc, #452]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e00b      	b.n	8001a02 <HAL_RCC_OscConfig+0x99a>
 80019ea:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a6e      	ldr	r2, [pc, #440]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4b6c      	ldr	r3, [pc, #432]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 80019fc:	f023 0304 	bic.w	r3, r3, #4
 8001a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8081 	beq.w	8001b16 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa66 	bl	8000ee4 <HAL_GetTick>
 8001a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fa61 	bl	8000ee4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e365      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a3e:	2202      	movs	r2, #2
 8001a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a46:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a7c:	601a      	str	r2, [r3, #0]
  return result;
 8001a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0xa3a>
 8001a9c:	4b42      	ldr	r3, [pc, #264]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0xa62>
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fa93 f2a3 	rbit	r2, r3
 8001abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ace:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	6011      	str	r1, [r2, #0]
 8001ad6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ada:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fa92 f1a2 	rbit	r1, r2
 8001ae4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ae8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001aec:	6011      	str	r1, [r2, #0]
  return result;
 8001aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001af2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	f002 021f 	and.w	r2, r2, #31
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d084      	beq.n	8001a1e <HAL_RCC_OscConfig+0x9b6>
 8001b14:	e083      	b.n	8001c1e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f9e5 	bl	8000ee4 <HAL_GetTick>
 8001b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff f9e0 	bl	8000ee4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e2e4      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b64:	2202      	movs	r2, #2
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b7e:	601a      	str	r2, [r3, #0]
  return result;
 8001b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b84:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0xb44>
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_RCC_OscConfig+0xb40>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	e017      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb6c>
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	4bb3      	ldr	r3, [pc, #716]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bdc:	2102      	movs	r1, #2
 8001bde:	6011      	str	r1, [r2, #0]
 8001be0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	fa92 f1a2 	rbit	r1, r2
 8001bee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bf6:	6011      	str	r1, [r2, #0]
  return result;
 8001bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bfc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f002 021f 	and.w	r2, r2, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d180      	bne.n	8001b20 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c1e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c26:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a9d      	ldr	r2, [pc, #628]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 825e 	beq.w	8002100 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c44:	4b96      	ldr	r3, [pc, #600]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	f000 821f 	beq.w	8002090 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	f040 8170 	bne.w	8001f44 <HAL_RCC_OscConfig+0xedc>
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c88:	601a      	str	r2, [r3, #0]
  return result;
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c92:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f91b 	bl	8000ee4 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff f916 	bl	8000ee4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e21c      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cec:	601a      	str	r2, [r3, #0]
  return result;
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_OscConfig+0xcaa>
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e027      	b.n	8001d62 <HAL_RCC_OscConfig+0xcfa>
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d6e:	6011      	str	r1, [r2, #0]
 8001d70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	fa92 f1a2 	rbit	r1, r2
 8001d7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d82:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d86:	6011      	str	r1, [r2, #0]
  return result;
 8001d88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d8c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d182      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dae:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	f023 020f 	bic.w	r2, r3, #15
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a19      	ldr	r1, [r3, #32]
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	492d      	ldr	r1, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e14:	601a      	str	r2, [r3, #0]
  return result;
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e1e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7ff f855 	bl	8000ee4 <HAL_GetTick>
 8001e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f850 	bl	8000ee4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e156      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe3c>
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <HAL_RCC_OscConfig+0xe38>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	e02a      	b.n	8001ef4 <HAL_RCC_OscConfig+0xe8c>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ece:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001edc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4b86      	ldr	r3, [pc, #536]	; (800210c <HAL_RCC_OscConfig+0x10a4>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001efc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f00:	6011      	str	r1, [r2, #0]
 8001f02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	fa92 f1a2 	rbit	r1, r2
 8001f10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f14:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f18:	6011      	str	r1, [r2, #0]
  return result;
 8001f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f1e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f43f af7f 	beq.w	8001e40 <HAL_RCC_OscConfig+0xdd8>
 8001f42:	e0dd      	b.n	8002100 <HAL_RCC_OscConfig+0x1098>
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f68:	601a      	str	r2, [r3, #0]
  return result;
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe ffab 	bl	8000ee4 <HAL_GetTick>
 8001f8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ffa6 	bl	8000ee4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0ac      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fcc:	601a      	str	r2, [r3, #0]
  return result;
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xf8a>
 8001fec:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x10a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e027      	b.n	8002042 <HAL_RCC_OscConfig+0xfda>
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCC_OscConfig+0x10a4>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002046:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800204a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800204e:	6011      	str	r1, [r2, #0]
 8002050:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002054:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002062:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002066:	6011      	str	r1, [r2, #0]
  return result;
 8002068:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800206c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d182      	bne.n	8001f94 <HAL_RCC_OscConfig+0xf2c>
 800208e:	e037      	b.n	8002100 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e02e      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x10a4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_RCC_OscConfig+0x10a4>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020b8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d117      	bne.n	80020fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020d0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d10b      	bne.n	80020fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80020e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b09e      	sub	sp, #120	; 0x78
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e162      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b90      	ldr	r3, [pc, #576]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	498b      	ldr	r1, [pc, #556]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b89      	ldr	r3, [pc, #548]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e14a      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002164:	4b82      	ldr	r3, [pc, #520]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	497f      	ldr	r1, [pc, #508]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80dc 	beq.w	800233c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d13c      	bne.n	8002206 <HAL_RCC_ClockConfig+0xf6>
 800218c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002190:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800219a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xa6>
 80021b0:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e00f      	b.n	80021d6 <HAL_RCC_ClockConfig+0xc6>
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	667b      	str	r3, [r7, #100]	; 0x64
 80021c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c8:	663b      	str	r3, [r7, #96]	; 0x60
 80021ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021da:	65ba      	str	r2, [r7, #88]	; 0x58
 80021dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021de:	fa92 f2a2 	rbit	r2, r2
 80021e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e6:	fab2 f282 	clz	r2, r2
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f002 021f 	and.w	r2, r2, #31
 80021f6:	2101      	movs	r1, #1
 80021f8:	fa01 f202 	lsl.w	r2, r1, r2
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d17b      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0f3      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d13c      	bne.n	8002288 <HAL_RCC_ClockConfig+0x178>
 800220e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800221c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_ClockConfig+0x128>
 8002232:	4b4f      	ldr	r3, [pc, #316]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e00f      	b.n	8002258 <HAL_RCC_ClockConfig+0x148>
 8002238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
 800224c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225c:	63ba      	str	r2, [r7, #56]	; 0x38
 800225e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d13a      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b2      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1a0>
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	e00d      	b.n	80022cc <HAL_RCC_ClockConfig+0x1bc>
 80022b0:	2302      	movs	r3, #2
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	61ba      	str	r2, [r7, #24]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	fa92 f2a2 	rbit	r2, r2
 80022d6:	617a      	str	r2, [r7, #20]
  return result;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e079      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 0203 	bic.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	491a      	ldr	r1, [pc, #104]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800230c:	f7fe fdea 	bl	8000ee4 <HAL_GetTick>
 8002310:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	e00a      	b.n	800232a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fe fde6 	bl	8000ee4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e061      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_RCC_ClockConfig+0x260>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 020c 	and.w	r2, r3, #12
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	429a      	cmp	r2, r3
 800233a:	d1eb      	bne.n	8002314 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d214      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4906      	ldr	r1, [pc, #24]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_RCC_ClockConfig+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e040      	b.n	80023ee <HAL_RCC_ClockConfig+0x2de>
 800236c:	40022000 	.word	0x40022000
 8002370:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	491a      	ldr	r1, [pc, #104]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4912      	ldr	r1, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023b2:	f000 f829 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023b6:	4601      	mov	r1, r0
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_ClockConfig+0x2e8>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c0:	22f0      	movs	r2, #240	; 0xf0
 80023c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	fa92 f2a2 	rbit	r2, r2
 80023ca:	60fa      	str	r2, [r7, #12]
  return result;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	40d3      	lsrs	r3, r2
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x2ec>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	fa21 f303 	lsr.w	r3, r1, r3
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_RCC_ClockConfig+0x2f0>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x2f4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fd4c 	bl	8000e84 <HAL_InitTick>
  
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3778      	adds	r7, #120	; 0x78
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	0800254c 	.word	0x0800254c
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x30>
 8002432:	2b08      	cmp	r3, #8
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x36>
 8002436:	e03f      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800243a:	623b      	str	r3, [r7, #32]
      break;
 800243c:	e03f      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002444:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002448:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	607a      	str	r2, [r7, #4]
  return result;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	40d3      	lsrs	r3, r2
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	220f      	movs	r2, #15
 800246c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	60fa      	str	r2, [r7, #12]
  return result;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	40d3      	lsrs	r3, r2
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	fbb2 f2f3 	udiv	r2, r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
 80024a0:	e007      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	623b      	str	r3, [r7, #32]
      break;
 80024b6:	e002      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ba:	623b      	str	r3, [r7, #32]
      break;
 80024bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024be:	6a3b      	ldr	r3, [r7, #32]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	372c      	adds	r7, #44	; 0x2c
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	0800255c 	.word	0x0800255c
 80024d8:	0800256c 	.word	0x0800256c

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	4d0d      	ldr	r5, [pc, #52]	; (8002514 <__libc_init_array+0x38>)
 80024e0:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <__libc_init_array+0x3c>)
 80024e2:	1b64      	subs	r4, r4, r5
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	2600      	movs	r6, #0
 80024e8:	42a6      	cmp	r6, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	4d0b      	ldr	r5, [pc, #44]	; (800251c <__libc_init_array+0x40>)
 80024ee:	4c0c      	ldr	r4, [pc, #48]	; (8002520 <__libc_init_array+0x44>)
 80024f0:	f000 f820 	bl	8002534 <_init>
 80024f4:	1b64      	subs	r4, r4, r5
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	2600      	movs	r6, #0
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f855 3b04 	ldr.w	r3, [r5], #4
 8002504:	4798      	blx	r3
 8002506:	3601      	adds	r6, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f855 3b04 	ldr.w	r3, [r5], #4
 800250e:	4798      	blx	r3
 8002510:	3601      	adds	r6, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	0800257c 	.word	0x0800257c
 8002518:	0800257c 	.word	0x0800257c
 800251c:	0800257c 	.word	0x0800257c
 8002520:	08002580 	.word	0x08002580

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
