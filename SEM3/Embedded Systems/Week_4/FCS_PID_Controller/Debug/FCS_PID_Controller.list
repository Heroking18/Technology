
FCS_PID_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001614  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001744  08001744  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001744  08001744  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001744  08001744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800174c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001758  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000200e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b31  00000000  00000000  00022042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00022b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00022e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe2e  00000000  00000000  00023110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003bbe  00000000  00000000  00032f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006006e  00000000  00000000  00036afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096b6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009c8  00000000  00000000  00096bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080016bc 	.word	0x080016bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080016bc 	.word	0x080016bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0a5b      	lsrs	r3, r3, #9
 8000228:	024e      	lsls	r6, r1, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	004f      	lsls	r7, r1, #1
 800022e:	00da      	lsls	r2, r3, #3
 8000230:	0fc4      	lsrs	r4, r0, #31
 8000232:	469c      	mov	ip, r3
 8000234:	0a70      	lsrs	r0, r6, #9
 8000236:	4690      	mov	r8, r2
 8000238:	b500      	push	{lr}
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	0e3f      	lsrs	r7, r7, #24
 800023e:	0fc9      	lsrs	r1, r1, #31
 8000240:	09b6      	lsrs	r6, r6, #6
 8000242:	428c      	cmp	r4, r1
 8000244:	d04b      	beq.n	80002de <__aeabi_fadd+0xbe>
 8000246:	1bea      	subs	r2, r5, r7
 8000248:	2a00      	cmp	r2, #0
 800024a:	dd36      	ble.n	80002ba <__aeabi_fadd+0x9a>
 800024c:	2f00      	cmp	r7, #0
 800024e:	d061      	beq.n	8000314 <__aeabi_fadd+0xf4>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d100      	bne.n	8000256 <__aeabi_fadd+0x36>
 8000254:	e0ad      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	04db      	lsls	r3, r3, #19
 800025a:	431e      	orrs	r6, r3
 800025c:	2a1b      	cmp	r2, #27
 800025e:	dc00      	bgt.n	8000262 <__aeabi_fadd+0x42>
 8000260:	e0d3      	b.n	800040a <__aeabi_fadd+0x1ea>
 8000262:	2001      	movs	r0, #1
 8000264:	4643      	mov	r3, r8
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	0143      	lsls	r3, r0, #5
 800026a:	d400      	bmi.n	800026e <__aeabi_fadd+0x4e>
 800026c:	e08c      	b.n	8000388 <__aeabi_fadd+0x168>
 800026e:	0180      	lsls	r0, r0, #6
 8000270:	0987      	lsrs	r7, r0, #6
 8000272:	0038      	movs	r0, r7
 8000274:	f000 fae6 	bl	8000844 <__clzsi2>
 8000278:	3805      	subs	r0, #5
 800027a:	4087      	lsls	r7, r0
 800027c:	4285      	cmp	r5, r0
 800027e:	dc00      	bgt.n	8000282 <__aeabi_fadd+0x62>
 8000280:	e0b6      	b.n	80003f0 <__aeabi_fadd+0x1d0>
 8000282:	1a2d      	subs	r5, r5, r0
 8000284:	48b3      	ldr	r0, [pc, #716]	; (8000554 <__aeabi_fadd+0x334>)
 8000286:	4038      	ands	r0, r7
 8000288:	0743      	lsls	r3, r0, #29
 800028a:	d004      	beq.n	8000296 <__aeabi_fadd+0x76>
 800028c:	230f      	movs	r3, #15
 800028e:	4003      	ands	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d000      	beq.n	8000296 <__aeabi_fadd+0x76>
 8000294:	3004      	adds	r0, #4
 8000296:	0143      	lsls	r3, r0, #5
 8000298:	d400      	bmi.n	800029c <__aeabi_fadd+0x7c>
 800029a:	e078      	b.n	800038e <__aeabi_fadd+0x16e>
 800029c:	1c6a      	adds	r2, r5, #1
 800029e:	2dfe      	cmp	r5, #254	; 0xfe
 80002a0:	d065      	beq.n	800036e <__aeabi_fadd+0x14e>
 80002a2:	0180      	lsls	r0, r0, #6
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	469c      	mov	ip, r3
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	4663      	mov	r3, ip
 80002ac:	05d0      	lsls	r0, r2, #23
 80002ae:	4318      	orrs	r0, r3
 80002b0:	07e4      	lsls	r4, r4, #31
 80002b2:	4320      	orrs	r0, r4
 80002b4:	bc80      	pop	{r7}
 80002b6:	46b8      	mov	r8, r7
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d035      	beq.n	800032a <__aeabi_fadd+0x10a>
 80002be:	1b7a      	subs	r2, r7, r5
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fadd+0xa6>
 80002c4:	e0af      	b.n	8000426 <__aeabi_fadd+0x206>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e0a7      	b.n	800041e <__aeabi_fadd+0x1fe>
 80002ce:	1e53      	subs	r3, r2, #1
 80002d0:	2a01      	cmp	r2, #1
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e12f      	b.n	8000536 <__aeabi_fadd+0x316>
 80002d6:	2aff      	cmp	r2, #255	; 0xff
 80002d8:	d069      	beq.n	80003ae <__aeabi_fadd+0x18e>
 80002da:	001a      	movs	r2, r3
 80002dc:	e0aa      	b.n	8000434 <__aeabi_fadd+0x214>
 80002de:	1be9      	subs	r1, r5, r7
 80002e0:	2900      	cmp	r1, #0
 80002e2:	dd70      	ble.n	80003c6 <__aeabi_fadd+0x1a6>
 80002e4:	2f00      	cmp	r7, #0
 80002e6:	d037      	beq.n	8000358 <__aeabi_fadd+0x138>
 80002e8:	2dff      	cmp	r5, #255	; 0xff
 80002ea:	d062      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	04db      	lsls	r3, r3, #19
 80002f0:	431e      	orrs	r6, r3
 80002f2:	291b      	cmp	r1, #27
 80002f4:	dc00      	bgt.n	80002f8 <__aeabi_fadd+0xd8>
 80002f6:	e0b0      	b.n	800045a <__aeabi_fadd+0x23a>
 80002f8:	2001      	movs	r0, #1
 80002fa:	4440      	add	r0, r8
 80002fc:	0143      	lsls	r3, r0, #5
 80002fe:	d543      	bpl.n	8000388 <__aeabi_fadd+0x168>
 8000300:	3501      	adds	r5, #1
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d033      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000306:	2301      	movs	r3, #1
 8000308:	4a93      	ldr	r2, [pc, #588]	; (8000558 <__aeabi_fadd+0x338>)
 800030a:	4003      	ands	r3, r0
 800030c:	0840      	lsrs	r0, r0, #1
 800030e:	4010      	ands	r0, r2
 8000310:	4318      	orrs	r0, r3
 8000312:	e7b9      	b.n	8000288 <__aeabi_fadd+0x68>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d100      	bne.n	800031a <__aeabi_fadd+0xfa>
 8000318:	e083      	b.n	8000422 <__aeabi_fadd+0x202>
 800031a:	1e51      	subs	r1, r2, #1
 800031c:	2a01      	cmp	r2, #1
 800031e:	d100      	bne.n	8000322 <__aeabi_fadd+0x102>
 8000320:	e0d8      	b.n	80004d4 <__aeabi_fadd+0x2b4>
 8000322:	2aff      	cmp	r2, #255	; 0xff
 8000324:	d045      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000326:	000a      	movs	r2, r1
 8000328:	e798      	b.n	800025c <__aeabi_fadd+0x3c>
 800032a:	27fe      	movs	r7, #254	; 0xfe
 800032c:	1c6a      	adds	r2, r5, #1
 800032e:	4217      	tst	r7, r2
 8000330:	d000      	beq.n	8000334 <__aeabi_fadd+0x114>
 8000332:	e086      	b.n	8000442 <__aeabi_fadd+0x222>
 8000334:	2d00      	cmp	r5, #0
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0x11a>
 8000338:	e0b7      	b.n	80004aa <__aeabi_fadd+0x28a>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x122>
 8000340:	e0f3      	b.n	800052a <__aeabi_fadd+0x30a>
 8000342:	2200      	movs	r2, #0
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0b0      	beq.n	80002aa <__aeabi_fadd+0x8a>
 8000348:	1b98      	subs	r0, r3, r6
 800034a:	0143      	lsls	r3, r0, #5
 800034c:	d400      	bmi.n	8000350 <__aeabi_fadd+0x130>
 800034e:	e0fa      	b.n	8000546 <__aeabi_fadd+0x326>
 8000350:	4643      	mov	r3, r8
 8000352:	000c      	movs	r4, r1
 8000354:	1af0      	subs	r0, r6, r3
 8000356:	e797      	b.n	8000288 <__aeabi_fadd+0x68>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d100      	bne.n	800035e <__aeabi_fadd+0x13e>
 800035c:	e0c8      	b.n	80004f0 <__aeabi_fadd+0x2d0>
 800035e:	1e4a      	subs	r2, r1, #1
 8000360:	2901      	cmp	r1, #1
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x146>
 8000364:	e0ae      	b.n	80004c4 <__aeabi_fadd+0x2a4>
 8000366:	29ff      	cmp	r1, #255	; 0xff
 8000368:	d023      	beq.n	80003b2 <__aeabi_fadd+0x192>
 800036a:	0011      	movs	r1, r2
 800036c:	e7c1      	b.n	80002f2 <__aeabi_fadd+0xd2>
 800036e:	2300      	movs	r3, #0
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	469c      	mov	ip, r3
 8000374:	e799      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000376:	21fe      	movs	r1, #254	; 0xfe
 8000378:	1c6a      	adds	r2, r5, #1
 800037a:	4211      	tst	r1, r2
 800037c:	d077      	beq.n	800046e <__aeabi_fadd+0x24e>
 800037e:	2aff      	cmp	r2, #255	; 0xff
 8000380:	d0f5      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000382:	0015      	movs	r5, r2
 8000384:	4446      	add	r6, r8
 8000386:	0870      	lsrs	r0, r6, #1
 8000388:	0743      	lsls	r3, r0, #29
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0x16e>
 800038c:	e77e      	b.n	800028c <__aeabi_fadd+0x6c>
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	2dff      	cmp	r5, #255	; 0xff
 8000392:	d00e      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000394:	025b      	lsls	r3, r3, #9
 8000396:	0a5b      	lsrs	r3, r3, #9
 8000398:	469c      	mov	ip, r3
 800039a:	b2ea      	uxtb	r2, r5
 800039c:	e785      	b.n	80002aa <__aeabi_fadd+0x8a>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d007      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	4213      	tst	r3, r2
 80003a8:	d003      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003aa:	4210      	tst	r0, r2
 80003ac:	d101      	bne.n	80003b2 <__aeabi_fadd+0x192>
 80003ae:	000c      	movs	r4, r1
 80003b0:	0003      	movs	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0db      	beq.n	800036e <__aeabi_fadd+0x14e>
 80003b6:	2080      	movs	r0, #128	; 0x80
 80003b8:	03c0      	lsls	r0, r0, #15
 80003ba:	4318      	orrs	r0, r3
 80003bc:	0240      	lsls	r0, r0, #9
 80003be:	0a43      	lsrs	r3, r0, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	22ff      	movs	r2, #255	; 0xff
 80003c4:	e771      	b.n	80002aa <__aeabi_fadd+0x8a>
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d0d5      	beq.n	8000376 <__aeabi_fadd+0x156>
 80003ca:	1b7a      	subs	r2, r7, r5
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d160      	bne.n	8000492 <__aeabi_fadd+0x272>
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d024      	beq.n	8000420 <__aeabi_fadd+0x200>
 80003d6:	1e53      	subs	r3, r2, #1
 80003d8:	2a01      	cmp	r2, #1
 80003da:	d073      	beq.n	80004c4 <__aeabi_fadd+0x2a4>
 80003dc:	2aff      	cmp	r2, #255	; 0xff
 80003de:	d0e7      	beq.n	80003b0 <__aeabi_fadd+0x190>
 80003e0:	001a      	movs	r2, r3
 80003e2:	2a1b      	cmp	r2, #27
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_fadd+0x1c8>
 80003e6:	e085      	b.n	80004f4 <__aeabi_fadd+0x2d4>
 80003e8:	2001      	movs	r0, #1
 80003ea:	003d      	movs	r5, r7
 80003ec:	1980      	adds	r0, r0, r6
 80003ee:	e785      	b.n	80002fc <__aeabi_fadd+0xdc>
 80003f0:	2320      	movs	r3, #32
 80003f2:	003a      	movs	r2, r7
 80003f4:	1b45      	subs	r5, r0, r5
 80003f6:	0038      	movs	r0, r7
 80003f8:	3501      	adds	r5, #1
 80003fa:	40ea      	lsrs	r2, r5
 80003fc:	1b5d      	subs	r5, r3, r5
 80003fe:	40a8      	lsls	r0, r5
 8000400:	1e43      	subs	r3, r0, #1
 8000402:	4198      	sbcs	r0, r3
 8000404:	2500      	movs	r5, #0
 8000406:	4310      	orrs	r0, r2
 8000408:	e73e      	b.n	8000288 <__aeabi_fadd+0x68>
 800040a:	2320      	movs	r3, #32
 800040c:	0030      	movs	r0, r6
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	0031      	movs	r1, r6
 8000412:	4098      	lsls	r0, r3
 8000414:	40d1      	lsrs	r1, r2
 8000416:	1e43      	subs	r3, r0, #1
 8000418:	4198      	sbcs	r0, r3
 800041a:	4308      	orrs	r0, r1
 800041c:	e722      	b.n	8000264 <__aeabi_fadd+0x44>
 800041e:	000c      	movs	r4, r1
 8000420:	0003      	movs	r3, r0
 8000422:	0015      	movs	r5, r2
 8000424:	e7b4      	b.n	8000390 <__aeabi_fadd+0x170>
 8000426:	2fff      	cmp	r7, #255	; 0xff
 8000428:	d0c1      	beq.n	80003ae <__aeabi_fadd+0x18e>
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	4640      	mov	r0, r8
 800042e:	04db      	lsls	r3, r3, #19
 8000430:	4318      	orrs	r0, r3
 8000432:	4680      	mov	r8, r0
 8000434:	2a1b      	cmp	r2, #27
 8000436:	dd51      	ble.n	80004dc <__aeabi_fadd+0x2bc>
 8000438:	2001      	movs	r0, #1
 800043a:	000c      	movs	r4, r1
 800043c:	003d      	movs	r5, r7
 800043e:	1a30      	subs	r0, r6, r0
 8000440:	e712      	b.n	8000268 <__aeabi_fadd+0x48>
 8000442:	4643      	mov	r3, r8
 8000444:	1b9f      	subs	r7, r3, r6
 8000446:	017b      	lsls	r3, r7, #5
 8000448:	d42b      	bmi.n	80004a2 <__aeabi_fadd+0x282>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x230>
 800044e:	e710      	b.n	8000272 <__aeabi_fadd+0x52>
 8000450:	2300      	movs	r3, #0
 8000452:	2400      	movs	r4, #0
 8000454:	2200      	movs	r2, #0
 8000456:	469c      	mov	ip, r3
 8000458:	e727      	b.n	80002aa <__aeabi_fadd+0x8a>
 800045a:	2320      	movs	r3, #32
 800045c:	0032      	movs	r2, r6
 800045e:	0030      	movs	r0, r6
 8000460:	40ca      	lsrs	r2, r1
 8000462:	1a59      	subs	r1, r3, r1
 8000464:	4088      	lsls	r0, r1
 8000466:	1e43      	subs	r3, r0, #1
 8000468:	4198      	sbcs	r0, r3
 800046a:	4310      	orrs	r0, r2
 800046c:	e745      	b.n	80002fa <__aeabi_fadd+0xda>
 800046e:	2d00      	cmp	r5, #0
 8000470:	d14a      	bne.n	8000508 <__aeabi_fadd+0x2e8>
 8000472:	4643      	mov	r3, r8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d063      	beq.n	8000540 <__aeabi_fadd+0x320>
 8000478:	2200      	movs	r2, #0
 800047a:	2e00      	cmp	r6, #0
 800047c:	d100      	bne.n	8000480 <__aeabi_fadd+0x260>
 800047e:	e714      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000480:	0030      	movs	r0, r6
 8000482:	4440      	add	r0, r8
 8000484:	0143      	lsls	r3, r0, #5
 8000486:	d400      	bmi.n	800048a <__aeabi_fadd+0x26a>
 8000488:	e77e      	b.n	8000388 <__aeabi_fadd+0x168>
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <__aeabi_fadd+0x334>)
 800048c:	3501      	adds	r5, #1
 800048e:	4018      	ands	r0, r3
 8000490:	e77a      	b.n	8000388 <__aeabi_fadd+0x168>
 8000492:	2fff      	cmp	r7, #255	; 0xff
 8000494:	d08c      	beq.n	80003b0 <__aeabi_fadd+0x190>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	4641      	mov	r1, r8
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	4319      	orrs	r1, r3
 800049e:	4688      	mov	r8, r1
 80004a0:	e79f      	b.n	80003e2 <__aeabi_fadd+0x1c2>
 80004a2:	4643      	mov	r3, r8
 80004a4:	000c      	movs	r4, r1
 80004a6:	1af7      	subs	r7, r6, r3
 80004a8:	e6e3      	b.n	8000272 <__aeabi_fadd+0x52>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fadd+0x292>
 80004b0:	e775      	b.n	800039e <__aeabi_fadd+0x17e>
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x298>
 80004b6:	e77a      	b.n	80003ae <__aeabi_fadd+0x18e>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	2400      	movs	r4, #0
 80004be:	469c      	mov	ip, r3
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	e6f2      	b.n	80002aa <__aeabi_fadd+0x8a>
 80004c4:	0030      	movs	r0, r6
 80004c6:	4440      	add	r0, r8
 80004c8:	2501      	movs	r5, #1
 80004ca:	0143      	lsls	r3, r0, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x2b0>
 80004ce:	e75b      	b.n	8000388 <__aeabi_fadd+0x168>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e718      	b.n	8000306 <__aeabi_fadd+0xe6>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2501      	movs	r5, #1
 80004d8:	1b98      	subs	r0, r3, r6
 80004da:	e6c5      	b.n	8000268 <__aeabi_fadd+0x48>
 80004dc:	2320      	movs	r3, #32
 80004de:	4644      	mov	r4, r8
 80004e0:	4640      	mov	r0, r8
 80004e2:	40d4      	lsrs	r4, r2
 80004e4:	1a9a      	subs	r2, r3, r2
 80004e6:	4090      	lsls	r0, r2
 80004e8:	1e43      	subs	r3, r0, #1
 80004ea:	4198      	sbcs	r0, r3
 80004ec:	4320      	orrs	r0, r4
 80004ee:	e7a4      	b.n	800043a <__aeabi_fadd+0x21a>
 80004f0:	000d      	movs	r5, r1
 80004f2:	e74d      	b.n	8000390 <__aeabi_fadd+0x170>
 80004f4:	2320      	movs	r3, #32
 80004f6:	4641      	mov	r1, r8
 80004f8:	4640      	mov	r0, r8
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	1a9a      	subs	r2, r3, r2
 80004fe:	4090      	lsls	r0, r2
 8000500:	1e43      	subs	r3, r0, #1
 8000502:	4198      	sbcs	r0, r3
 8000504:	4308      	orrs	r0, r1
 8000506:	e770      	b.n	80003ea <__aeabi_fadd+0x1ca>
 8000508:	4642      	mov	r2, r8
 800050a:	2a00      	cmp	r2, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x2f0>
 800050e:	e74f      	b.n	80003b0 <__aeabi_fadd+0x190>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x2f6>
 8000514:	e74d      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	03d2      	lsls	r2, r2, #15
 800051a:	4213      	tst	r3, r2
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x300>
 800051e:	e748      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000520:	4210      	tst	r0, r2
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0x306>
 8000524:	e745      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000526:	0003      	movs	r3, r0
 8000528:	e743      	b.n	80003b2 <__aeabi_fadd+0x192>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d090      	beq.n	8000450 <__aeabi_fadd+0x230>
 800052e:	000c      	movs	r4, r1
 8000530:	4684      	mov	ip, r0
 8000532:	2200      	movs	r2, #0
 8000534:	e6b9      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000536:	4643      	mov	r3, r8
 8000538:	000c      	movs	r4, r1
 800053a:	1af0      	subs	r0, r6, r3
 800053c:	3501      	adds	r5, #1
 800053e:	e693      	b.n	8000268 <__aeabi_fadd+0x48>
 8000540:	4684      	mov	ip, r0
 8000542:	2200      	movs	r2, #0
 8000544:	e6b1      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000546:	2800      	cmp	r0, #0
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x32c>
 800054a:	e71d      	b.n	8000388 <__aeabi_fadd+0x168>
 800054c:	2300      	movs	r3, #0
 800054e:	2400      	movs	r4, #0
 8000550:	469c      	mov	ip, r3
 8000552:	e6aa      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000554:	fbffffff 	.word	0xfbffffff
 8000558:	7dffffff 	.word	0x7dffffff

0800055c <__aeabi_fmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	464f      	mov	r7, r9
 8000560:	4646      	mov	r6, r8
 8000562:	46d6      	mov	lr, sl
 8000564:	0244      	lsls	r4, r0, #9
 8000566:	0045      	lsls	r5, r0, #1
 8000568:	b5c0      	push	{r6, r7, lr}
 800056a:	0a64      	lsrs	r4, r4, #9
 800056c:	1c0f      	adds	r7, r1, #0
 800056e:	0e2d      	lsrs	r5, r5, #24
 8000570:	0fc6      	lsrs	r6, r0, #31
 8000572:	2d00      	cmp	r5, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fmul+0x1c>
 8000576:	e08d      	b.n	8000694 <__aeabi_fmul+0x138>
 8000578:	2dff      	cmp	r5, #255	; 0xff
 800057a:	d100      	bne.n	800057e <__aeabi_fmul+0x22>
 800057c:	e092      	b.n	80006a4 <__aeabi_fmul+0x148>
 800057e:	2300      	movs	r3, #0
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	4699      	mov	r9, r3
 8000584:	469a      	mov	sl, r3
 8000586:	00e4      	lsls	r4, r4, #3
 8000588:	04c0      	lsls	r0, r0, #19
 800058a:	4304      	orrs	r4, r0
 800058c:	3d7f      	subs	r5, #127	; 0x7f
 800058e:	0278      	lsls	r0, r7, #9
 8000590:	0a43      	lsrs	r3, r0, #9
 8000592:	4698      	mov	r8, r3
 8000594:	007b      	lsls	r3, r7, #1
 8000596:	0e1b      	lsrs	r3, r3, #24
 8000598:	0fff      	lsrs	r7, r7, #31
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fmul+0x44>
 800059e:	e070      	b.n	8000682 <__aeabi_fmul+0x126>
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fmul+0x4a>
 80005a4:	e086      	b.n	80006b4 <__aeabi_fmul+0x158>
 80005a6:	4642      	mov	r2, r8
 80005a8:	00d0      	lsls	r0, r2, #3
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	3b7f      	subs	r3, #127	; 0x7f
 80005ae:	18ed      	adds	r5, r5, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	04d2      	lsls	r2, r2, #19
 80005b4:	4302      	orrs	r2, r0
 80005b6:	4690      	mov	r8, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	0031      	movs	r1, r6
 80005bc:	464b      	mov	r3, r9
 80005be:	4079      	eors	r1, r7
 80005c0:	1c68      	adds	r0, r5, #1
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d81c      	bhi.n	8000600 <__aeabi_fmul+0xa4>
 80005c6:	4a76      	ldr	r2, [pc, #472]	; (80007a0 <__aeabi_fmul+0x244>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	0039      	movs	r1, r7
 80005d0:	4644      	mov	r4, r8
 80005d2:	46e2      	mov	sl, ip
 80005d4:	4653      	mov	r3, sl
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d00f      	beq.n	80005fa <__aeabi_fmul+0x9e>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fmul+0x84>
 80005de:	e0d7      	b.n	8000790 <__aeabi_fmul+0x234>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d137      	bne.n	8000654 <__aeabi_fmul+0xf8>
 80005e4:	2000      	movs	r0, #0
 80005e6:	2400      	movs	r4, #0
 80005e8:	05c0      	lsls	r0, r0, #23
 80005ea:	4320      	orrs	r0, r4
 80005ec:	07c9      	lsls	r1, r1, #31
 80005ee:	4308      	orrs	r0, r1
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	2400      	movs	r4, #0
 80005fe:	e7f3      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000600:	0c26      	lsrs	r6, r4, #16
 8000602:	0424      	lsls	r4, r4, #16
 8000604:	0c22      	lsrs	r2, r4, #16
 8000606:	4644      	mov	r4, r8
 8000608:	0424      	lsls	r4, r4, #16
 800060a:	0c24      	lsrs	r4, r4, #16
 800060c:	4643      	mov	r3, r8
 800060e:	0027      	movs	r7, r4
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	4357      	muls	r7, r2
 8000614:	4374      	muls	r4, r6
 8000616:	435a      	muls	r2, r3
 8000618:	435e      	muls	r6, r3
 800061a:	1912      	adds	r2, r2, r4
 800061c:	0c3b      	lsrs	r3, r7, #16
 800061e:	189b      	adds	r3, r3, r2
 8000620:	429c      	cmp	r4, r3
 8000622:	d903      	bls.n	800062c <__aeabi_fmul+0xd0>
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	4694      	mov	ip, r2
 800062a:	4466      	add	r6, ip
 800062c:	043f      	lsls	r7, r7, #16
 800062e:	041a      	lsls	r2, r3, #16
 8000630:	0c3f      	lsrs	r7, r7, #16
 8000632:	19d2      	adds	r2, r2, r7
 8000634:	0194      	lsls	r4, r2, #6
 8000636:	1e67      	subs	r7, r4, #1
 8000638:	41bc      	sbcs	r4, r7
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	0e92      	lsrs	r2, r2, #26
 800063e:	199b      	adds	r3, r3, r6
 8000640:	4314      	orrs	r4, r2
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	431c      	orrs	r4, r3
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	d400      	bmi.n	800064c <__aeabi_fmul+0xf0>
 800064a:	e09b      	b.n	8000784 <__aeabi_fmul+0x228>
 800064c:	2301      	movs	r3, #1
 800064e:	0862      	lsrs	r2, r4, #1
 8000650:	401c      	ands	r4, r3
 8000652:	4314      	orrs	r4, r2
 8000654:	0002      	movs	r2, r0
 8000656:	327f      	adds	r2, #127	; 0x7f
 8000658:	2a00      	cmp	r2, #0
 800065a:	dd64      	ble.n	8000726 <__aeabi_fmul+0x1ca>
 800065c:	0763      	lsls	r3, r4, #29
 800065e:	d004      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000660:	230f      	movs	r3, #15
 8000662:	4023      	ands	r3, r4
 8000664:	2b04      	cmp	r3, #4
 8000666:	d000      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000668:	3404      	adds	r4, #4
 800066a:	0123      	lsls	r3, r4, #4
 800066c:	d503      	bpl.n	8000676 <__aeabi_fmul+0x11a>
 800066e:	0002      	movs	r2, r0
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <__aeabi_fmul+0x248>)
 8000672:	3280      	adds	r2, #128	; 0x80
 8000674:	401c      	ands	r4, r3
 8000676:	2afe      	cmp	r2, #254	; 0xfe
 8000678:	dcbf      	bgt.n	80005fa <__aeabi_fmul+0x9e>
 800067a:	01a4      	lsls	r4, r4, #6
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	b2d0      	uxtb	r0, r2
 8000680:	e7b2      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d13d      	bne.n	8000704 <__aeabi_fmul+0x1a8>
 8000688:	464a      	mov	r2, r9
 800068a:	3301      	adds	r3, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4691      	mov	r9, r2
 8000690:	469c      	mov	ip, r3
 8000692:	e792      	b.n	80005ba <__aeabi_fmul+0x5e>
 8000694:	2c00      	cmp	r4, #0
 8000696:	d129      	bne.n	80006ec <__aeabi_fmul+0x190>
 8000698:	2304      	movs	r3, #4
 800069a:	4699      	mov	r9, r3
 800069c:	3b03      	subs	r3, #3
 800069e:	2500      	movs	r5, #0
 80006a0:	469a      	mov	sl, r3
 80006a2:	e774      	b.n	800058e <__aeabi_fmul+0x32>
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d11b      	bne.n	80006e0 <__aeabi_fmul+0x184>
 80006a8:	2308      	movs	r3, #8
 80006aa:	4699      	mov	r9, r3
 80006ac:	3b06      	subs	r3, #6
 80006ae:	25ff      	movs	r5, #255	; 0xff
 80006b0:	469a      	mov	sl, r3
 80006b2:	e76c      	b.n	800058e <__aeabi_fmul+0x32>
 80006b4:	4643      	mov	r3, r8
 80006b6:	35ff      	adds	r5, #255	; 0xff
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10b      	bne.n	80006d4 <__aeabi_fmul+0x178>
 80006bc:	2302      	movs	r3, #2
 80006be:	464a      	mov	r2, r9
 80006c0:	431a      	orrs	r2, r3
 80006c2:	4691      	mov	r9, r2
 80006c4:	469c      	mov	ip, r3
 80006c6:	e778      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006c8:	4653      	mov	r3, sl
 80006ca:	0031      	movs	r1, r6
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x176>
 80006d0:	e783      	b.n	80005da <__aeabi_fmul+0x7e>
 80006d2:	e792      	b.n	80005fa <__aeabi_fmul+0x9e>
 80006d4:	2303      	movs	r3, #3
 80006d6:	464a      	mov	r2, r9
 80006d8:	431a      	orrs	r2, r3
 80006da:	4691      	mov	r9, r2
 80006dc:	469c      	mov	ip, r3
 80006de:	e76c      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006e0:	230c      	movs	r3, #12
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b09      	subs	r3, #9
 80006e6:	25ff      	movs	r5, #255	; 0xff
 80006e8:	469a      	mov	sl, r3
 80006ea:	e750      	b.n	800058e <__aeabi_fmul+0x32>
 80006ec:	0020      	movs	r0, r4
 80006ee:	f000 f8a9 	bl	8000844 <__clzsi2>
 80006f2:	2576      	movs	r5, #118	; 0x76
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409c      	lsls	r4, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	426d      	negs	r5, r5
 80006fc:	4699      	mov	r9, r3
 80006fe:	469a      	mov	sl, r3
 8000700:	1a2d      	subs	r5, r5, r0
 8000702:	e744      	b.n	800058e <__aeabi_fmul+0x32>
 8000704:	4640      	mov	r0, r8
 8000706:	f000 f89d 	bl	8000844 <__clzsi2>
 800070a:	4642      	mov	r2, r8
 800070c:	1f43      	subs	r3, r0, #5
 800070e:	409a      	lsls	r2, r3
 8000710:	2300      	movs	r3, #0
 8000712:	1a2d      	subs	r5, r5, r0
 8000714:	4690      	mov	r8, r2
 8000716:	469c      	mov	ip, r3
 8000718:	3d76      	subs	r5, #118	; 0x76
 800071a:	e74e      	b.n	80005ba <__aeabi_fmul+0x5e>
 800071c:	2480      	movs	r4, #128	; 0x80
 800071e:	2100      	movs	r1, #0
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	03e4      	lsls	r4, r4, #15
 8000724:	e760      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000726:	2301      	movs	r3, #1
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	2b1b      	cmp	r3, #27
 800072c:	dd00      	ble.n	8000730 <__aeabi_fmul+0x1d4>
 800072e:	e759      	b.n	80005e4 <__aeabi_fmul+0x88>
 8000730:	0022      	movs	r2, r4
 8000732:	309e      	adds	r0, #158	; 0x9e
 8000734:	40da      	lsrs	r2, r3
 8000736:	4084      	lsls	r4, r0
 8000738:	0013      	movs	r3, r2
 800073a:	1e62      	subs	r2, r4, #1
 800073c:	4194      	sbcs	r4, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	0763      	lsls	r3, r4, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fmul+0x1f2>
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fmul+0x1f2>
 800074c:	3404      	adds	r4, #4
 800074e:	0163      	lsls	r3, r4, #5
 8000750:	d51a      	bpl.n	8000788 <__aeabi_fmul+0x22c>
 8000752:	2001      	movs	r0, #1
 8000754:	2400      	movs	r4, #0
 8000756:	e747      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000758:	2080      	movs	r0, #128	; 0x80
 800075a:	03c0      	lsls	r0, r0, #15
 800075c:	4204      	tst	r4, r0
 800075e:	d009      	beq.n	8000774 <__aeabi_fmul+0x218>
 8000760:	4643      	mov	r3, r8
 8000762:	4203      	tst	r3, r0
 8000764:	d106      	bne.n	8000774 <__aeabi_fmul+0x218>
 8000766:	4644      	mov	r4, r8
 8000768:	4304      	orrs	r4, r0
 800076a:	0264      	lsls	r4, r4, #9
 800076c:	0039      	movs	r1, r7
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	0a64      	lsrs	r4, r4, #9
 8000772:	e739      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000774:	2080      	movs	r0, #128	; 0x80
 8000776:	03c0      	lsls	r0, r0, #15
 8000778:	4304      	orrs	r4, r0
 800077a:	0264      	lsls	r4, r4, #9
 800077c:	0031      	movs	r1, r6
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	e731      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000784:	0028      	movs	r0, r5
 8000786:	e765      	b.n	8000654 <__aeabi_fmul+0xf8>
 8000788:	01a4      	lsls	r4, r4, #6
 800078a:	2000      	movs	r0, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	e72b      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000790:	2080      	movs	r0, #128	; 0x80
 8000792:	03c0      	lsls	r0, r0, #15
 8000794:	4304      	orrs	r4, r0
 8000796:	0264      	lsls	r4, r4, #9
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	e724      	b.n	80005e8 <__aeabi_fmul+0x8c>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	080016f4 	.word	0x080016f4
 80007a4:	f7ffffff 	.word	0xf7ffffff

080007a8 <__aeabi_i2f>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d013      	beq.n	80007d6 <__aeabi_i2f+0x2e>
 80007ae:	17c3      	asrs	r3, r0, #31
 80007b0:	18c6      	adds	r6, r0, r3
 80007b2:	405e      	eors	r6, r3
 80007b4:	0fc4      	lsrs	r4, r0, #31
 80007b6:	0030      	movs	r0, r6
 80007b8:	f000 f844 	bl	8000844 <__clzsi2>
 80007bc:	239e      	movs	r3, #158	; 0x9e
 80007be:	0005      	movs	r5, r0
 80007c0:	1a1b      	subs	r3, r3, r0
 80007c2:	2b96      	cmp	r3, #150	; 0x96
 80007c4:	dc0f      	bgt.n	80007e6 <__aeabi_i2f+0x3e>
 80007c6:	2808      	cmp	r0, #8
 80007c8:	dd01      	ble.n	80007ce <__aeabi_i2f+0x26>
 80007ca:	3d08      	subs	r5, #8
 80007cc:	40ae      	lsls	r6, r5
 80007ce:	0276      	lsls	r6, r6, #9
 80007d0:	0a76      	lsrs	r6, r6, #9
 80007d2:	b2d8      	uxtb	r0, r3
 80007d4:	e002      	b.n	80007dc <__aeabi_i2f+0x34>
 80007d6:	2400      	movs	r4, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	2600      	movs	r6, #0
 80007dc:	05c0      	lsls	r0, r0, #23
 80007de:	4330      	orrs	r0, r6
 80007e0:	07e4      	lsls	r4, r4, #31
 80007e2:	4320      	orrs	r0, r4
 80007e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e6:	2b99      	cmp	r3, #153	; 0x99
 80007e8:	dd0c      	ble.n	8000804 <__aeabi_i2f+0x5c>
 80007ea:	2205      	movs	r2, #5
 80007ec:	0031      	movs	r1, r6
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	40d1      	lsrs	r1, r2
 80007f2:	000a      	movs	r2, r1
 80007f4:	0001      	movs	r1, r0
 80007f6:	0030      	movs	r0, r6
 80007f8:	311b      	adds	r1, #27
 80007fa:	4088      	lsls	r0, r1
 80007fc:	1e41      	subs	r1, r0, #1
 80007fe:	4188      	sbcs	r0, r1
 8000800:	4302      	orrs	r2, r0
 8000802:	0016      	movs	r6, r2
 8000804:	2d05      	cmp	r5, #5
 8000806:	dc12      	bgt.n	800082e <__aeabi_i2f+0x86>
 8000808:	0031      	movs	r1, r6
 800080a:	4f0d      	ldr	r7, [pc, #52]	; (8000840 <__aeabi_i2f+0x98>)
 800080c:	4039      	ands	r1, r7
 800080e:	0772      	lsls	r2, r6, #29
 8000810:	d009      	beq.n	8000826 <__aeabi_i2f+0x7e>
 8000812:	200f      	movs	r0, #15
 8000814:	4030      	ands	r0, r6
 8000816:	2804      	cmp	r0, #4
 8000818:	d005      	beq.n	8000826 <__aeabi_i2f+0x7e>
 800081a:	3104      	adds	r1, #4
 800081c:	014a      	lsls	r2, r1, #5
 800081e:	d502      	bpl.n	8000826 <__aeabi_i2f+0x7e>
 8000820:	239f      	movs	r3, #159	; 0x9f
 8000822:	4039      	ands	r1, r7
 8000824:	1b5b      	subs	r3, r3, r5
 8000826:	0189      	lsls	r1, r1, #6
 8000828:	0a4e      	lsrs	r6, r1, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7d6      	b.n	80007dc <__aeabi_i2f+0x34>
 800082e:	1f6a      	subs	r2, r5, #5
 8000830:	4096      	lsls	r6, r2
 8000832:	0031      	movs	r1, r6
 8000834:	4f02      	ldr	r7, [pc, #8]	; (8000840 <__aeabi_i2f+0x98>)
 8000836:	4039      	ands	r1, r7
 8000838:	0772      	lsls	r2, r6, #29
 800083a:	d0f4      	beq.n	8000826 <__aeabi_i2f+0x7e>
 800083c:	e7e9      	b.n	8000812 <__aeabi_i2f+0x6a>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	fbffffff 	.word	0xfbffffff

08000844 <__clzsi2>:
 8000844:	211c      	movs	r1, #28
 8000846:	2301      	movs	r3, #1
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	4298      	cmp	r0, r3
 800084c:	d301      	bcc.n	8000852 <__clzsi2+0xe>
 800084e:	0c00      	lsrs	r0, r0, #16
 8000850:	3910      	subs	r1, #16
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	4298      	cmp	r0, r3
 8000856:	d301      	bcc.n	800085c <__clzsi2+0x18>
 8000858:	0a00      	lsrs	r0, r0, #8
 800085a:	3908      	subs	r1, #8
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	4298      	cmp	r0, r3
 8000860:	d301      	bcc.n	8000866 <__clzsi2+0x22>
 8000862:	0900      	lsrs	r0, r0, #4
 8000864:	3904      	subs	r1, #4
 8000866:	a202      	add	r2, pc, #8	; (adr r2, 8000870 <__clzsi2+0x2c>)
 8000868:	5c10      	ldrb	r0, [r2, r0]
 800086a:	1840      	adds	r0, r0, r1
 800086c:	4770      	bx	lr
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	02020304 	.word	0x02020304
 8000874:	01010101 	.word	0x01010101
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f000 f98a 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f8d9 	bl	8000a3e <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		myPID(100);
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	f000 f801 	bl	8000894 <myPID>
 8000892:	e7fb      	b.n	800088c <main+0xc>

08000894 <myPID>:
  }
  /* USER CODE END 3 */
}

void myPID(int16_t desired_speed)
{
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af04      	add	r7, sp, #16
 800089a:	0002      	movs	r2, r0
 800089c:	1dbb      	adds	r3, r7, #6
 800089e:	801a      	strh	r2, [r3, #0]
	desired_speed=0;
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	2200      	movs	r2, #0
 80008a4:	801a      	strh	r2, [r3, #0]
	int16_t error=0, prev_error=0;
 80008a6:	2326      	movs	r3, #38	; 0x26
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	2200      	movs	r2, #0
 80008ac:	801a      	strh	r2, [r3, #0]
 80008ae:	2336      	movs	r3, #54	; 0x36
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]
	float kP=0, kI=0, kD=0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
	float integral=0, derivative=0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
	int16_t measured_speed=0;
 80008ca:	2334      	movs	r3, #52	; 0x34
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	801a      	strh	r2, [r3, #0]
	float power=0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	int16_t huge_value=0;
 80008d6:	2332      	movs	r3, #50	; 0x32
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2200      	movs	r2, #0
 80008dc:	801a      	strh	r2, [r3, #0]
	uint32_t time_elapsed, delay_time;
	delay_time = HAL_GetTick() + 20;
 80008de:	f000 f9b7 	bl	8000c50 <HAL_GetTick>
 80008e2:	0003      	movs	r3, r0
 80008e4:	3314      	adds	r3, #20
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(1)
	{
		time_elapsed = HAL_GetTick();
 80008e8:	f000 f9b2 	bl	8000c50 <HAL_GetTick>
 80008ec:	0003      	movs	r3, r0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
		if(time_elapsed >= delay_time)
 80008f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d3f7      	bcc.n	80008e8 <myPID+0x54>
		{
			error = desired_speed-measured_speed;
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	881a      	ldrh	r2, [r3, #0]
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	b29b      	uxth	r3, r3
 8000906:	b21a      	sxth	r2, r3
 8000908:	2426      	movs	r4, #38	; 0x26
 800090a:	193b      	adds	r3, r7, r4
 800090c:	801a      	strh	r2, [r3, #0]
			integral += error;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	5e9b      	ldrsh	r3, [r3, r2]
 8000914:	0018      	movs	r0, r3
 8000916:	f7ff ff47 	bl	80007a8 <__aeabi_i2f>
 800091a:	1c02      	adds	r2, r0, #0
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	1c19      	adds	r1, r3, #0
 8000920:	1c10      	adds	r0, r2, #0
 8000922:	f7ff fc7d 	bl	8000220 <__aeabi_fadd>
 8000926:	1c03      	adds	r3, r0, #0
 8000928:	617b      	str	r3, [r7, #20]
			if(error == 0 || error == desired_speed || error == huge_value)
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	5e9b      	ldrsh	r3, [r3, r2]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d010      	beq.n	8000956 <myPID+0xc2>
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	5e9b      	ldrsh	r3, [r3, r2]
 800093a:	1dba      	adds	r2, r7, #6
 800093c:	2100      	movs	r1, #0
 800093e:	5e52      	ldrsh	r2, [r2, r1]
 8000940:	429a      	cmp	r2, r3
 8000942:	d008      	beq.n	8000956 <myPID+0xc2>
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	5e9b      	ldrsh	r3, [r3, r2]
 800094a:	2232      	movs	r2, #50	; 0x32
 800094c:	18ba      	adds	r2, r7, r2
 800094e:	2100      	movs	r1, #0
 8000950:	5e52      	ldrsh	r2, [r2, r1]
 8000952:	429a      	cmp	r2, r3
 8000954:	d101      	bne.n	800095a <myPID+0xc6>
			{
				integral = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
			}
			derivative = error - prev_error;
 800095a:	2426      	movs	r4, #38	; 0x26
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	5e9b      	ldrsh	r3, [r3, r2]
 8000962:	001a      	movs	r2, r3
 8000964:	2536      	movs	r5, #54	; 0x36
 8000966:	197b      	adds	r3, r7, r5
 8000968:	2100      	movs	r1, #0
 800096a:	5e5b      	ldrsh	r3, [r3, r1]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff1a 	bl	80007a8 <__aeabi_i2f>
 8000974:	1c03      	adds	r3, r0, #0
 8000976:	613b      	str	r3, [r7, #16]
			prev_error = error;
 8000978:	197b      	adds	r3, r7, r5
 800097a:	0020      	movs	r0, r4
 800097c:	183a      	adds	r2, r7, r0
 800097e:	8812      	ldrh	r2, [r2, #0]
 8000980:	801a      	strh	r2, [r3, #0]
			executePID(&error, &kP, &kI, &kD, &integral, &derivative, &power);
 8000982:	2318      	movs	r3, #24
 8000984:	18fc      	adds	r4, r7, r3
 8000986:	231c      	movs	r3, #28
 8000988:	18fa      	adds	r2, r7, r3
 800098a:	2320      	movs	r3, #32
 800098c:	18f9      	adds	r1, r7, r3
 800098e:	1838      	adds	r0, r7, r0
 8000990:	250c      	movs	r5, #12
 8000992:	197b      	adds	r3, r7, r5
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2310      	movs	r3, #16
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2314      	movs	r3, #20
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	0023      	movs	r3, r4
 80009a4:	f000 f809 	bl	80009ba <executePID>
			controlServo(&power);
 80009a8:	197b      	adds	r3, r7, r5
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f83f 	bl	8000a2e <controlServo>
			time_elapsed = HAL_GetTick();
 80009b0:	f000 f94e 	bl	8000c50 <HAL_GetTick>
 80009b4:	0003      	movs	r3, r0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
		time_elapsed = HAL_GetTick();
 80009b8:	e796      	b.n	80008e8 <myPID+0x54>

080009ba <executePID>:
		}
	}
}

void executePID(int16_t* error_value, float* p_value, float* i_value, float* d_value, float* integral_val, float* derivative_val, float* power_val)
{
 80009ba:	b590      	push	{r4, r7, lr}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	603b      	str	r3, [r7, #0]
	*power_val=(*error_value)*(*p_value) + (*integral_val)*(*i_value) + (*derivative_val)*(*d_value);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	5e9b      	ldrsh	r3, [r3, r2]
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff feea 	bl	80007a8 <__aeabi_i2f>
 80009d4:	1c02      	adds	r2, r0, #0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1c19      	adds	r1, r3, #0
 80009dc:	1c10      	adds	r0, r2, #0
 80009de:	f7ff fdbd 	bl	800055c <__aeabi_fmul>
 80009e2:	1c03      	adds	r3, r0, #0
 80009e4:	1c1c      	adds	r4, r3, #0
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1c19      	adds	r1, r3, #0
 80009f0:	1c10      	adds	r0, r2, #0
 80009f2:	f7ff fdb3 	bl	800055c <__aeabi_fmul>
 80009f6:	1c03      	adds	r3, r0, #0
 80009f8:	1c19      	adds	r1, r3, #0
 80009fa:	1c20      	adds	r0, r4, #0
 80009fc:	f7ff fc10 	bl	8000220 <__aeabi_fadd>
 8000a00:	1c03      	adds	r3, r0, #0
 8000a02:	1c1c      	adds	r4, r3, #0
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1c19      	adds	r1, r3, #0
 8000a0e:	1c10      	adds	r0, r2, #0
 8000a10:	f7ff fda4 	bl	800055c <__aeabi_fmul>
 8000a14:	1c03      	adds	r3, r0, #0
 8000a16:	1c19      	adds	r1, r3, #0
 8000a18:	1c20      	adds	r0, r4, #0
 8000a1a:	f7ff fc01 	bl	8000220 <__aeabi_fadd>
 8000a1e:	1c03      	adds	r3, r0, #0
 8000a20:	1c1a      	adds	r2, r3, #0
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b005      	add	sp, #20
 8000a2c:	bd90      	pop	{r4, r7, pc}

08000a2e <controlServo>:
void controlServo(float* ctrl_val){}
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3e:	b590      	push	{r4, r7, lr}
 8000a40:	b091      	sub	sp, #68	; 0x44
 8000a42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a44:	2410      	movs	r4, #16
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2330      	movs	r3, #48	; 0x30
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f000 fe2c 	bl	80016ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	003b      	movs	r3, r7
 8000a56:	0018      	movs	r0, r3
 8000a58:	2310      	movs	r3, #16
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f000 fe25 	bl	80016ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2202      	movs	r2, #2
 8000a68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2210      	movs	r2, #16
 8000a74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f9a4 	bl	8000dcc <HAL_RCC_OscConfig>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000a88:	f000 f819 	bl	8000abe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2207      	movs	r2, #7
 8000a90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fca9 	bl	8001400 <HAL_RCC_ClockConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ab2:	f000 f804 	bl	8000abe <Error_Handler>
  }
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b011      	add	sp, #68	; 0x44
 8000abc:	bd90      	pop	{r4, r7, pc}

08000abe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac2:	b672      	cpsid	i
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <Error_Handler+0x8>

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	619a      	str	r2, [r3, #24]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	69da      	ldr	r2, [r3, #28]
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0549      	lsls	r1, r1, #21
 8000af0:	430a      	orrs	r2, r1
 8000af2:	61da      	str	r2, [r3, #28]
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_MspInit+0x44>)
 8000af6:	69da      	ldr	r2, [r3, #28]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	055b      	lsls	r3, r3, #21
 8000afc:	4013      	ands	r3, r2
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f87a 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b72:	f7ff ffe4 	bl	8000b3e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b76:	f000 fd75 	bl	8001664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fe81 	bl	8000880 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	0800174c 	.word	0x0800174c
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	2000002c 	.word	0x2000002c

08000b98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_COMP_IRQHandler>
	...

08000b9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <HAL_Init+0x24>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_Init+0x24>)
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f809 	bl	8000bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb2:	f7ff ff89 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_InitTick+0x5c>)
 8000bce:	681c      	ldr	r4, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x60>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	0098      	lsls	r0, r3, #2
 8000bda:	f7ff fa95 	bl	8000108 <__udivsi3>
 8000bde:	0003      	movs	r3, r0
 8000be0:	0019      	movs	r1, r3
 8000be2:	0020      	movs	r0, r4
 8000be4:	f7ff fa90 	bl	8000108 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8e1 	bl	8000db2 <HAL_SYSTICK_Config>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e00f      	b.n	8000c18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80b      	bhi.n	8000c16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f8be 	bl	8000d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_InitTick+0x64>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	18d2      	adds	r2, r2, r3
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000028 	.word	0x20000028

08000c50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000028 	.word	0x20000028

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7f      	cmp	r3, #127	; 0x7f
 8000c78:	d828      	bhi.n	8000ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	; (8000d38 <__NVIC_SetPriority+0xd4>)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	33c0      	adds	r3, #192	; 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	589b      	ldr	r3, [r3, r2]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	481f      	ldr	r0, [pc, #124]	; (8000d38 <__NVIC_SetPriority+0xd4>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	33c0      	adds	r3, #192	; 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cca:	e031      	b.n	8000d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <__NVIC_SetPriority+0xd8>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3306      	adds	r3, #6
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	; 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <__NVIC_SetPriority+0xd8>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	3b08      	subs	r3, #8
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	430a      	orrs	r2, r1
 8000d26:	3306      	adds	r3, #6
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18c3      	adds	r3, r0, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	045b      	lsls	r3, r3, #17
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d301      	bcc.n	8000d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d54:	2301      	movs	r3, #1
 8000d56:	e010      	b.n	8000d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <SysTick_Config+0x44>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2103      	movs	r1, #3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff ff7c 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x44>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	210f      	movs	r1, #15
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	1c02      	adds	r2, r0, #0
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ffbf 	bl	8000d40 <SysTick_Config>
 8000dc2:	0003      	movs	r3, r0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e301      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	d100      	bne.n	8000dea <HAL_RCC_OscConfig+0x1e>
 8000de8:	e08d      	b.n	8000f06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dea:	4bc3      	ldr	r3, [pc, #780]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	220c      	movs	r2, #12
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d00e      	beq.n	8000e14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df6:	4bc0      	ldr	r3, [pc, #768]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d116      	bne.n	8000e30 <HAL_RCC_OscConfig+0x64>
 8000e02:	4bbd      	ldr	r3, [pc, #756]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10d      	bne.n	8000e30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	4bb8      	ldr	r3, [pc, #736]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d100      	bne.n	8000e22 <HAL_RCC_OscConfig+0x56>
 8000e20:	e070      	b.n	8000f04 <HAL_RCC_OscConfig+0x138>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d000      	beq.n	8000e2c <HAL_RCC_OscConfig+0x60>
 8000e2a:	e06b      	b.n	8000f04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e2d8      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d107      	bne.n	8000e48 <HAL_RCC_OscConfig+0x7c>
 8000e38:	4baf      	ldr	r3, [pc, #700]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4bae      	ldr	r3, [pc, #696]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e02f      	b.n	8000ea8 <HAL_RCC_OscConfig+0xdc>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10c      	bne.n	8000e6a <HAL_RCC_OscConfig+0x9e>
 8000e50:	4ba9      	ldr	r3, [pc, #676]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4ba8      	ldr	r3, [pc, #672]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	49a9      	ldr	r1, [pc, #676]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	4ba6      	ldr	r3, [pc, #664]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4ba5      	ldr	r3, [pc, #660]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	49a7      	ldr	r1, [pc, #668]	; (8001100 <HAL_RCC_OscConfig+0x334>)
 8000e64:	400a      	ands	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e01e      	b.n	8000ea8 <HAL_RCC_OscConfig+0xdc>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d10e      	bne.n	8000e90 <HAL_RCC_OscConfig+0xc4>
 8000e72:	4ba1      	ldr	r3, [pc, #644]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4ba0      	ldr	r3, [pc, #640]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	02c9      	lsls	r1, r1, #11
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	4b9d      	ldr	r3, [pc, #628]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b9c      	ldr	r3, [pc, #624]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0xdc>
 8000e90:	4b99      	ldr	r3, [pc, #612]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b98      	ldr	r3, [pc, #608]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	4999      	ldr	r1, [pc, #612]	; (80010fc <HAL_RCC_OscConfig+0x330>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	4b96      	ldr	r3, [pc, #600]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b95      	ldr	r3, [pc, #596]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	4997      	ldr	r1, [pc, #604]	; (8001100 <HAL_RCC_OscConfig+0x334>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d014      	beq.n	8000eda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fece 	bl	8000c50 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff fec9 	bl	8000c50 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b64      	cmp	r3, #100	; 0x64
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e28a      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ecc:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0xee>
 8000ed8:	e015      	b.n	8000f06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eda:	f7ff feb9 	bl	8000c50 <HAL_GetTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff feb4 	bl	8000c50 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e275      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef6:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	029b      	lsls	r3, r3, #10
 8000efe:	4013      	ands	r3, r2
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x118>
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <HAL_RCC_OscConfig+0x146>
 8000f10:	e069      	b.n	8000fe6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f12:	4b79      	ldr	r3, [pc, #484]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	220c      	movs	r2, #12
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d00b      	beq.n	8000f34 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f1c:	4b76      	ldr	r3, [pc, #472]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	220c      	movs	r2, #12
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d11c      	bne.n	8000f62 <HAL_RCC_OscConfig+0x196>
 8000f28:	4b73      	ldr	r3, [pc, #460]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	025b      	lsls	r3, r3, #9
 8000f30:	4013      	ands	r3, r2
 8000f32:	d116      	bne.n	8000f62 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f34:	4b70      	ldr	r3, [pc, #448]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d005      	beq.n	8000f4a <HAL_RCC_OscConfig+0x17e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e24b      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	22f8      	movs	r2, #248	; 0xf8
 8000f50:	4393      	bics	r3, r2
 8000f52:	0019      	movs	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	00da      	lsls	r2, r3, #3
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	e041      	b.n	8000fe6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d024      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6a:	4b63      	ldr	r3, [pc, #396]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fe6b 	bl	8000c50 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fe66 	bl	8000c50 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e227      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f92:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2202      	movs	r2, #2
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f1      	beq.n	8000f80 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	22f8      	movs	r2, #248	; 0xf8
 8000fa2:	4393      	bics	r3, r2
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	00da      	lsls	r2, r3, #3
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e018      	b.n	8000fe6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb4:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fe46 	bl	8000c50 <HAL_GetTick>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fe41 	bl	8000c50 <HAL_GetTick>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e202      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d1f1      	bne.n	8000fca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2208      	movs	r2, #8
 8000fec:	4013      	ands	r3, r2
 8000fee:	d036      	beq.n	800105e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d019      	beq.n	800102c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff fe24 	bl	8000c50 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800100e:	f7ff fe1f 	bl	8000c50 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1e0      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	2202      	movs	r2, #2
 8001026:	4013      	ands	r3, r2
 8001028:	d0f1      	beq.n	800100e <HAL_RCC_OscConfig+0x242>
 800102a:	e018      	b.n	800105e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 800102e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001032:	2101      	movs	r1, #1
 8001034:	438a      	bics	r2, r1
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fe0a 	bl	8000c50 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001042:	f7ff fe05 	bl	8000c50 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1c6      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d1f1      	bne.n	8001042 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2204      	movs	r2, #4
 8001064:	4013      	ands	r3, r2
 8001066:	d100      	bne.n	800106a <HAL_RCC_OscConfig+0x29e>
 8001068:	e0b4      	b.n	80011d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106a:	201f      	movs	r0, #31
 800106c:	183b      	adds	r3, r7, r0
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	4013      	ands	r3, r2
 800107c:	d110      	bne.n	80010a0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001080:	69da      	ldr	r2, [r3, #28]
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0549      	lsls	r1, r1, #21
 8001088:	430a      	orrs	r2, r1
 800108a:	61da      	str	r2, [r3, #28]
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	055b      	lsls	r3, r3, #21
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800109a:	183b      	adds	r3, r7, r0
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_RCC_OscConfig+0x338>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	d11a      	bne.n	80010e2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_RCC_OscConfig+0x338>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_RCC_OscConfig+0x338>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0049      	lsls	r1, r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fdc9 	bl	8000c50 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c4:	f7ff fdc4 	bl	8000c50 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e185      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_RCC_OscConfig+0x338>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2380      	movs	r3, #128	; 0x80
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10e      	bne.n	8001108 <HAL_RCC_OscConfig+0x33c>
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	430a      	orrs	r2, r1
 80010f4:	621a      	str	r2, [r3, #32]
 80010f6:	e035      	b.n	8001164 <HAL_RCC_OscConfig+0x398>
 80010f8:	40021000 	.word	0x40021000
 80010fc:	fffeffff 	.word	0xfffeffff
 8001100:	fffbffff 	.word	0xfffbffff
 8001104:	40007000 	.word	0x40007000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10c      	bne.n	800112a <HAL_RCC_OscConfig+0x35e>
 8001110:	4bb6      	ldr	r3, [pc, #728]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001112:	6a1a      	ldr	r2, [r3, #32]
 8001114:	4bb5      	ldr	r3, [pc, #724]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001116:	2101      	movs	r1, #1
 8001118:	438a      	bics	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	4bb3      	ldr	r3, [pc, #716]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800111e:	6a1a      	ldr	r2, [r3, #32]
 8001120:	4bb2      	ldr	r3, [pc, #712]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001122:	2104      	movs	r1, #4
 8001124:	438a      	bics	r2, r1
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	e01c      	b.n	8001164 <HAL_RCC_OscConfig+0x398>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x380>
 8001132:	4bae      	ldr	r3, [pc, #696]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001134:	6a1a      	ldr	r2, [r3, #32]
 8001136:	4bad      	ldr	r3, [pc, #692]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001138:	2104      	movs	r1, #4
 800113a:	430a      	orrs	r2, r1
 800113c:	621a      	str	r2, [r3, #32]
 800113e:	4bab      	ldr	r3, [pc, #684]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001140:	6a1a      	ldr	r2, [r3, #32]
 8001142:	4baa      	ldr	r3, [pc, #680]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001144:	2101      	movs	r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	621a      	str	r2, [r3, #32]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0x398>
 800114c:	4ba7      	ldr	r3, [pc, #668]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4ba6      	ldr	r3, [pc, #664]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001152:	2101      	movs	r1, #1
 8001154:	438a      	bics	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	4ba4      	ldr	r3, [pc, #656]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800115e:	2104      	movs	r1, #4
 8001160:	438a      	bics	r2, r1
 8001162:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d014      	beq.n	8001196 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fd70 	bl	8000c50 <HAL_GetTick>
 8001170:	0003      	movs	r3, r0
 8001172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	e009      	b.n	800118a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fd6b 	bl	8000c50 <HAL_GetTick>
 800117a:	0002      	movs	r2, r0
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a9b      	ldr	r2, [pc, #620]	; (80013f0 <HAL_RCC_OscConfig+0x624>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e12b      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118a:	4b98      	ldr	r3, [pc, #608]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x3aa>
 8001194:	e013      	b.n	80011be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fd5b 	bl	8000c50 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119e:	e009      	b.n	80011b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fd56 	bl	8000c50 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a91      	ldr	r2, [pc, #580]	; (80013f0 <HAL_RCC_OscConfig+0x624>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e116      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	4b8d      	ldr	r3, [pc, #564]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f0      	bne.n	80011a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011be:	231f      	movs	r3, #31
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	4b87      	ldr	r3, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011ce:	4989      	ldr	r1, [pc, #548]	; (80013f4 <HAL_RCC_OscConfig+0x628>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	4013      	ands	r3, r2
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d12a      	bne.n	800123c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e6:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ea:	4b80      	ldr	r3, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011ec:	2104      	movs	r1, #4
 80011ee:	430a      	orrs	r2, r1
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011f2:	4b7e      	ldr	r3, [pc, #504]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fd27 	bl	8000c50 <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001208:	f7ff fd22 	bl	8000c50 <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e0e3      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d0f1      	beq.n	8001208 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001224:	4b71      	ldr	r3, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	22f8      	movs	r2, #248	; 0xf8
 800122a:	4393      	bics	r3, r2
 800122c:	0019      	movs	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	00da      	lsls	r2, r3, #3
 8001234:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
 800123a:	e034      	b.n	80012a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	3305      	adds	r3, #5
 8001242:	d111      	bne.n	8001268 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001244:	4b69      	ldr	r3, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800124a:	2104      	movs	r1, #4
 800124c:	438a      	bics	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001250:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	22f8      	movs	r2, #248	; 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001262:	430a      	orrs	r2, r1
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	e01e      	b.n	80012a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800126a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126c:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800126e:	2104      	movs	r1, #4
 8001270:	430a      	orrs	r2, r1
 8001272:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001274:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001278:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800127a:	2101      	movs	r1, #1
 800127c:	438a      	bics	r2, r1
 800127e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fce6 	bl	8000c50 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800128a:	f7ff fce1 	bl	8000c50 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e0a2      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d1f1      	bne.n	800128a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x4e4>
 80012ae:	e097      	b.n	80013e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b0:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d100      	bne.n	80012be <HAL_RCC_OscConfig+0x4f2>
 80012bc:	e06b      	b.n	8001396 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d14c      	bne.n	8001360 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80012cc:	494a      	ldr	r1, [pc, #296]	; (80013f8 <HAL_RCC_OscConfig+0x62c>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fcbd 	bl	8000c50 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012dc:	f7ff fcb8 	bl	8000c50 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e079      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	049b      	lsls	r3, r3, #18
 80012f6:	4013      	ands	r3, r2
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	220f      	movs	r2, #15
 8001300:	4393      	bics	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a3a      	ldr	r2, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x630>)
 8001314:	4013      	ands	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	431a      	orrs	r2, r3
 8001322:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001324:	430a      	orrs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	0449      	lsls	r1, r1, #17
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc8b 	bl	8000c50 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fc86 	bl	8000c50 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e047      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	049b      	lsls	r3, r3, #18
 800135a:	4013      	ands	r3, r2
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x574>
 800135e:	e03f      	b.n	80013e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 8001366:	4924      	ldr	r1, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x62c>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc70 	bl	8000c50 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fc6b 	bl	8000c50 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e02c      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	049b      	lsls	r3, r3, #18
 8001390:	4013      	ands	r3, r2
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x5aa>
 8001394:	e024      	b.n	80013e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e01f      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_RCC_OscConfig+0x620>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	025b      	lsls	r3, r3, #9
 80013b4:	401a      	ands	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10e      	bne.n	80013dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	220f      	movs	r2, #15
 80013c2:	401a      	ands	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	23f0      	movs	r3, #240	; 0xf0
 80013d0:	039b      	lsls	r3, r3, #14
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b008      	add	sp, #32
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40021000 	.word	0x40021000
 80013f0:	00001388 	.word	0x00001388
 80013f4:	efffffff 	.word	0xefffffff
 80013f8:	feffffff 	.word	0xfeffffff
 80013fc:	ffc2ffff 	.word	0xffc2ffff

08001400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b3      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d911      	bls.n	8001446 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4393      	bics	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	4b55      	ldr	r3, [pc, #340]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d001      	beq.n	8001446 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e09a      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d015      	beq.n	800147c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2204      	movs	r2, #4
 8001456:	4013      	ands	r3, r2
 8001458:	d006      	beq.n	8001468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800145a:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001460:	21e0      	movs	r1, #224	; 0xe0
 8001462:	00c9      	lsls	r1, r1, #3
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	22f0      	movs	r2, #240	; 0xf0
 800146e:	4393      	bics	r3, r2
 8001470:	0019      	movs	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d040      	beq.n	8001508 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	029b      	lsls	r3, r3, #10
 8001496:	4013      	ands	r3, r2
 8001498:	d114      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06e      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	049b      	lsls	r3, r3, #18
 80014ae:	4013      	ands	r3, r2
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e062      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e05b      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4393      	bics	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d8:	f7ff fbba 	bl	8000c50 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e2:	f7ff fbb5 	bl	8000c50 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_RCC_ClockConfig+0x18c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e042      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	220c      	movs	r2, #12
 80014fc:	401a      	ands	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ec      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d211      	bcs.n	800153a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x184>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e020      	b.n	800157c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d009      	beq.n	8001558 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_RCC_ClockConfig+0x190>)
 800154a:	4013      	ands	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001558:	f000 f820 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155c:	0001      	movs	r1, r0
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x188>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	220f      	movs	r2, #15
 8001566:	4013      	ands	r3, r2
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x194>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	000a      	movs	r2, r1
 800156e:	40da      	lsrs	r2, r3
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x198>)
 8001572:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff fb25 	bl	8000bc4 <HAL_InitTick>
  
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40022000 	.word	0x40022000
 8001588:	40021000 	.word	0x40021000
 800158c:	00001388 	.word	0x00001388
 8001590:	fffff8ff 	.word	0xfffff8ff
 8001594:	08001734 	.word	0x08001734
 8001598:	20000000 	.word	0x20000000

0800159c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b08f      	sub	sp, #60	; 0x3c
 80015a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015a2:	2314      	movs	r3, #20
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015aa:	c313      	stmia	r3!, {r0, r1, r4}
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015b6:	c313      	stmia	r3!, {r0, r1, r4}
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d002      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d003      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x50>
 80015e4:	e02d      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ea:	e02d      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	220f      	movs	r2, #15
 80015f2:	4013      	ands	r3, r2
 80015f4:	2214      	movs	r2, #20
 80015f6:	18ba      	adds	r2, r7, r2
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	220f      	movs	r2, #15
 8001602:	4013      	ands	r3, r2
 8001604:	1d3a      	adds	r2, r7, #4
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800160a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	4013      	ands	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001618:	f7fe fd76 	bl	8000108 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	001a      	movs	r2, r3
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	4353      	muls	r3, r2
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
 8001626:	e009      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800162a:	000a      	movs	r2, r1
 800162c:	0152      	lsls	r2, r2, #5
 800162e:	1a52      	subs	r2, r2, r1
 8001630:	0193      	lsls	r3, r2, #6
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	185b      	adds	r3, r3, r1
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001640:	e002      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001646:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b00f      	add	sp, #60	; 0x3c
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	080016d4 	.word	0x080016d4
 8001658:	080016e4 	.word	0x080016e4
 800165c:	40021000 	.word	0x40021000
 8001660:	007a1200 	.word	0x007a1200

08001664 <__libc_init_array>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	2600      	movs	r6, #0
 8001668:	4d0c      	ldr	r5, [pc, #48]	; (800169c <__libc_init_array+0x38>)
 800166a:	4c0d      	ldr	r4, [pc, #52]	; (80016a0 <__libc_init_array+0x3c>)
 800166c:	1b64      	subs	r4, r4, r5
 800166e:	10a4      	asrs	r4, r4, #2
 8001670:	42a6      	cmp	r6, r4
 8001672:	d109      	bne.n	8001688 <__libc_init_array+0x24>
 8001674:	2600      	movs	r6, #0
 8001676:	f000 f821 	bl	80016bc <_init>
 800167a:	4d0a      	ldr	r5, [pc, #40]	; (80016a4 <__libc_init_array+0x40>)
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <__libc_init_array+0x44>)
 800167e:	1b64      	subs	r4, r4, r5
 8001680:	10a4      	asrs	r4, r4, #2
 8001682:	42a6      	cmp	r6, r4
 8001684:	d105      	bne.n	8001692 <__libc_init_array+0x2e>
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	00b3      	lsls	r3, r6, #2
 800168a:	58eb      	ldr	r3, [r5, r3]
 800168c:	4798      	blx	r3
 800168e:	3601      	adds	r6, #1
 8001690:	e7ee      	b.n	8001670 <__libc_init_array+0xc>
 8001692:	00b3      	lsls	r3, r6, #2
 8001694:	58eb      	ldr	r3, [r5, r3]
 8001696:	4798      	blx	r3
 8001698:	3601      	adds	r6, #1
 800169a:	e7f2      	b.n	8001682 <__libc_init_array+0x1e>
 800169c:	08001744 	.word	0x08001744
 80016a0:	08001744 	.word	0x08001744
 80016a4:	08001744 	.word	0x08001744
 80016a8:	08001748 	.word	0x08001748

080016ac <memset>:
 80016ac:	0003      	movs	r3, r0
 80016ae:	1882      	adds	r2, r0, r2
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d100      	bne.n	80016b6 <memset+0xa>
 80016b4:	4770      	bx	lr
 80016b6:	7019      	strb	r1, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	e7f9      	b.n	80016b0 <memset+0x4>

080016bc <_init>:
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c2:	bc08      	pop	{r3}
 80016c4:	469e      	mov	lr, r3
 80016c6:	4770      	bx	lr

080016c8 <_fini>:
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ce:	bc08      	pop	{r3}
 80016d0:	469e      	mov	lr, r3
 80016d2:	4770      	bx	lr
