
Lab_02_SysTick_Part_B_Andre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c8c  08001c8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c8c  08001c8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c8c  08001c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c90  08001c90  00011c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003ce8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c13  00000000  00000000  00023d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a0  00000000  00000000  00024938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000338  00000000  00000000  00024cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb04  00000000  00000000  00025010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004159  00000000  00000000  00043b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba8b4  00000000  00000000  00047c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102521  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d30  00000000  00000000  00102574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001c44 	.word	0x08001c44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001c44 	.word	0x08001c44

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SysTick_Init(16000);
 800022e:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000232:	f000 f82b 	bl	800028c <SysTick_Init>
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable the bus for port B.
 8000236:	4b13      	ldr	r3, [pc, #76]	; (8000284 <main+0x5c>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <main+0x5c>)
 800023c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000240:	6153      	str	r3, [r2, #20]

	// Pin Configurations.
	SetPin(GPIOB, 5, OUTPUT, PUSHPULL, LOWSPEED, NOPULL); // (PB5) LED1
 8000242:	2300      	movs	r3, #0
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2300      	movs	r3, #0
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	2201      	movs	r2, #1
 800024e:	2105      	movs	r1, #5
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <main+0x60>)
 8000252:	f000 f8bc 	bl	80003ce <SetPin>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f8e3 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Toggling LED
		  GPIOB->BSRR |= GPIO_BSRR_BS_5;
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x60>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <main+0x60>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6193      	str	r3, [r2, #24]
		  Delay(500);
 8000266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026a:	f000 f83b 	bl	80002e4 <Delay>
		  GPIOB->BSRR |= GPIO_BSRR_BR_5;
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <main+0x60>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a05      	ldr	r2, [pc, #20]	; (8000288 <main+0x60>)
 8000274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000278:	6193      	str	r3, [r2, #24]
		  Delay(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027e:	f000 f831 	bl	80002e4 <Delay>
		  GPIOB->BSRR |= GPIO_BSRR_BS_5;
 8000282:	e7ea      	b.n	800025a <main+0x32>
 8000284:	40021000 	.word	0x40021000
 8000288:	48000400 	.word	0x48000400

0800028c <SysTick_Init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void SysTick_Init(uint32_t ticks){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;			// Disable SysTick
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <SysTick_Init+0x54>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = ticks - 1;  // Set reload register
 800029a:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <SysTick_Init+0x54>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3b01      	subs	r3, #1
 80002a0:	6053      	str	r3, [r2, #4]

	// Set interrupt priority of SysTick to least urgency (i.e., largest priority value)
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
 80002a2:	210f      	movs	r1, #15
 80002a4:	f04f 30ff 	mov.w	r0, #4294967295
 80002a8:	f7ff ff94 	bl	80001d4 <__NVIC_SetPriority>

    SysTick->VAL = 0;             // Reset the SysTick counter value. Software should always clear during the initialization.
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <SysTick_Init+0x54>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]

    // Select processor clock: 1 = processor clock; 0 = external clock
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <SysTick_Init+0x54>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <SysTick_Init+0x54>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6013      	str	r3, [r2, #0]

    // Enables SysTick interrupt, 1 = Enable, 0 = Disable
    SysTick->CTRL |= SysTick_CTRL_TICKINT;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <SysTick_Init+0x54>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <SysTick_Init+0x54>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6013      	str	r3, [r2, #0]

    // Enable SysTick
    SysTick->CTRL |= SysTick_CTRL_ENABLE;
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <SysTick_Init+0x54>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <SysTick_Init+0x54>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	e000e010 	.word	0xe000e010

080002e4 <Delay>:

void Delay(uint32_t nTime){ // Delay in ms
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	// nTime: Length of delay time
	// the Delay function initializes the TimeDelay variable, and waits until TimeDelay is decremented to 0 by SysTick_Handler
	TimeDelay = nTime;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <Delay+0x28>)
 80002f0:	6013      	str	r3, [r2, #0]
	while(TimeDelay != 0); // Waits until it reaches 0
 80002f2:	bf00      	nop
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <Delay+0x28>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1fb      	bne.n	80002f4 <Delay+0x10>
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000028 	.word	0x20000028

08000310 <SetMode>:

// Register settings for GPIO
void SetMode(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
 800031c:	4613      	mov	r3, r2
 800031e:	70bb      	strb	r3, [r7, #2]
	PORT->MODER |= (mode << (pin * 2)); // Times 2 because register occupies 2 bits for each MODER.
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	78b9      	ldrb	r1, [r7, #2]
 8000326:	78fa      	ldrb	r2, [r7, #3]
 8000328:	0052      	lsls	r2, r2, #1
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	431a      	orrs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <SetType>:

void SetType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t type){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
 800034c:	4613      	mov	r3, r2
 800034e:	70bb      	strb	r3, [r7, #2]
	PORT->OTYPER |= (type << pin);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	78b9      	ldrb	r1, [r7, #2]
 8000356:	78fa      	ldrb	r2, [r7, #3]
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	431a      	orrs	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <SetSpeed>:

void SetSpeed(GPIO_TypeDef * PORT, uint8_t pin, uint8_t speed){
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
 800037a:	4613      	mov	r3, r2
 800037c:	70bb      	strb	r3, [r7, #2]
	PORT->OSPEEDR |= (speed << (pin * 2));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	78b9      	ldrb	r1, [r7, #2]
 8000384:	78fa      	ldrb	r2, [r7, #3]
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	431a      	orrs	r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	609a      	str	r2, [r3, #8]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <SetPullType>:

void SetPullType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t pulltype){
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	70fb      	strb	r3, [r7, #3]
 80003aa:	4613      	mov	r3, r2
 80003ac:	70bb      	strb	r3, [r7, #2]
	PORT->PUPDR |= (pulltype << (pin * 2));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	78b9      	ldrb	r1, [r7, #2]
 80003b4:	78fa      	ldrb	r2, [r7, #3]
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	fa01 f202 	lsl.w	r2, r1, r2
 80003bc:	431a      	orrs	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	60da      	str	r2, [r3, #12]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <SetPin>:

void SetPin(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pulltype){
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	4608      	mov	r0, r1
 80003d8:	4611      	mov	r1, r2
 80003da:	461a      	mov	r2, r3
 80003dc:	4603      	mov	r3, r0
 80003de:	70fb      	strb	r3, [r7, #3]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70bb      	strb	r3, [r7, #2]
 80003e4:	4613      	mov	r3, r2
 80003e6:	707b      	strb	r3, [r7, #1]
	SetMode(PORT, pin, mode);
 80003e8:	78ba      	ldrb	r2, [r7, #2]
 80003ea:	78fb      	ldrb	r3, [r7, #3]
 80003ec:	4619      	mov	r1, r3
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff8e 	bl	8000310 <SetMode>
	SetType(PORT, pin, type);
 80003f4:	787a      	ldrb	r2, [r7, #1]
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	4619      	mov	r1, r3
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ffa0 	bl	8000340 <SetType>
	SetSpeed(PORT, pin, speed);
 8000400:	7c3a      	ldrb	r2, [r7, #16]
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	4619      	mov	r1, r3
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff ffb1 	bl	800036e <SetSpeed>
	SetPullType(PORT, pin, pulltype);
 800040c:	7d3a      	ldrb	r2, [r7, #20]
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	4619      	mov	r1, r3
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffc3 	bl	800039e <SetPullType>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	; 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fc00 	bl	8001c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	2301      	movs	r3, #1
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044a:	2310      	movs	r3, #16
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000458:	2300      	movs	r3, #0
 800045a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 f987 	bl	8000778 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000470:	f000 f818 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f001 f9c7 	bl	8001820 <HAL_RCC_ClockConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000498:	f000 f804 	bl	80004a4 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3740      	adds	r7, #64	; 0x40
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>

080004ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <NMI_Handler+0x4>

080004b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <HardFault_Handler+0x4>

080004ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <BusFault_Handler+0x4>

080004c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimeDelay > 0){	// Prevents SysTick to go negative value
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <SysTick_Handler+0x20>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dd04      	ble.n	800050e <SysTick_Handler+0x16>
		TimeDelay--;	// TimeDelay is a global volatile variable
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <SysTick_Handler+0x20>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3b01      	subs	r3, #1
 800050a:	4a03      	ldr	r2, [pc, #12]	; (8000518 <SysTick_Handler+0x20>)
 800050c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
//  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000028 	.word	0x20000028

0800051c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <SystemInit+0x20>)
 8000522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <SystemInit+0x20>)
 8000528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800052c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800056a:	f7ff ffd7 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f001 fb3d 	bl	8001bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000572:	f7ff fe59 	bl	8000228 <main>

08000576 <LoopForever>:

LoopForever:
    b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000578:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000584:	08001c94 	.word	0x08001c94
  ldr r2, =_sbss
 8000588:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800058c:	20000030 	.word	0x20000030

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x54>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f8d4 	bl	8000760 <HAL_SYSTICK_Config>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e00e      	b.n	80005e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d80a      	bhi.n	80005de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f000 f8aa 	bl	8000728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_InitTick+0x5c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	e000      	b.n	80005e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	2000002c 	.word	0x2000002c

0800060c <__NVIC_GetPriorityGrouping>:
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_SetPriority>:
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	db0a      	blt.n	8000652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2da      	uxtb	r2, r3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <__NVIC_SetPriority+0x4c>)
 8000642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000646:	0112      	lsls	r2, r2, #4
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	440b      	add	r3, r1
 800064c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000650:	e00a      	b.n	8000668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <__NVIC_SetPriority+0x50>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	3b04      	subs	r3, #4
 8000660:	0112      	lsls	r2, r2, #4
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	440b      	add	r3, r1
 8000666:	761a      	strb	r2, [r3, #24]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2b04      	cmp	r3, #4
 8000698:	bf28      	it	cs
 800069a:	2304      	movcs	r3, #4
 800069c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3304      	adds	r3, #4
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d902      	bls.n	80006ac <NVIC_EncodePriority+0x30>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	e000      	b.n	80006ae <NVIC_EncodePriority+0x32>
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 32ff 	mov.w	r2, #4294967295
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	43da      	mvns	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	401a      	ands	r2, r3
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c4:	f04f 31ff 	mov.w	r1, #4294967295
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43d9      	mvns	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	4313      	orrs	r3, r2
         );
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3724      	adds	r7, #36	; 0x24
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ff8e 	bl	8000628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073a:	f7ff ff67 	bl	800060c <__NVIC_GetPriorityGrouping>
 800073e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ff99 	bl	800067c <NVIC_EncodePriority>
 800074a:	4602      	mov	r2, r0
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff68 	bl	8000628 <__NVIC_SetPriority>
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffbb 	bl	80006e4 <SysTick_Config>
 800076e:	4603      	mov	r3, r0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800077e:	af00      	add	r7, sp, #0
 8000780:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000784:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000788:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800078a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800078e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d102      	bne.n	800079e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	f001 b83a 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80007a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 816f 	beq.w	8000a92 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b4:	4bb5      	ldr	r3, [pc, #724]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d00c      	beq.n	80007da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c0:	4bb2      	ldr	r3, [pc, #712]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f003 030c 	and.w	r3, r3, #12
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d15c      	bne.n	8000886 <HAL_RCC_OscConfig+0x10e>
 80007cc:	4baf      	ldr	r3, [pc, #700]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007d8:	d155      	bne.n	8000886 <HAL_RCC_OscConfig+0x10e>
 80007da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007e6:	fa93 f3a3 	rbit	r3, r3
 80007ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f2:	fab3 f383 	clz	r3, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	095b      	lsrs	r3, r3, #5
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b01      	cmp	r3, #1
 8000804:	d102      	bne.n	800080c <HAL_RCC_OscConfig+0x94>
 8000806:	4ba1      	ldr	r3, [pc, #644]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	e015      	b.n	8000838 <HAL_RCC_OscConfig+0xc0>
 800080c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000810:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000814:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000818:	fa93 f3a3 	rbit	r3, r3
 800081c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000824:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000828:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800082c:	fa93 f3a3 	rbit	r3, r3
 8000830:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000834:	4b95      	ldr	r3, [pc, #596]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800083c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000840:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000844:	fa92 f2a2 	rbit	r2, r2
 8000848:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800084c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000850:	fab2 f282 	clz	r2, r2
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	f042 0220 	orr.w	r2, r2, #32
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	f002 021f 	and.w	r2, r2, #31
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	4013      	ands	r3, r2
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 8111 	beq.w	8000a90 <HAL_RCC_OscConfig+0x318>
 800086e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000872:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f040 8108 	bne.w	8000a90 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	f000 bfc6 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800088a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000896:	d106      	bne.n	80008a6 <HAL_RCC_OscConfig+0x12e>
 8000898:	4b7c      	ldr	r3, [pc, #496]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a7b      	ldr	r2, [pc, #492]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 800089e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e036      	b.n	8000914 <HAL_RCC_OscConfig+0x19c>
 80008a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80008aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d10c      	bne.n	80008d0 <HAL_RCC_OscConfig+0x158>
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a71      	ldr	r2, [pc, #452]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e021      	b.n	8000914 <HAL_RCC_OscConfig+0x19c>
 80008d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80008d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0x184>
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a69      	ldr	r2, [pc, #420]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b67      	ldr	r3, [pc, #412]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a66      	ldr	r2, [pc, #408]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0x19c>
 80008fc:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a62      	ldr	r2, [pc, #392]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000918:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d059      	beq.n	80009d8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000924:	f7ff fe66 	bl	80005f4 <HAL_GetTick>
 8000928:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092c:	e00a      	b.n	8000944 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092e:	f7ff fe61 	bl	80005f4 <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b64      	cmp	r3, #100	; 0x64
 800093c:	d902      	bls.n	8000944 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	f000 bf67 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 8000944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000948:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800094c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000950:	fa93 f3a3 	rbit	r3, r3
 8000954:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000958:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095c:	fab3 f383 	clz	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b01      	cmp	r3, #1
 800096e:	d102      	bne.n	8000976 <HAL_RCC_OscConfig+0x1fe>
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	e015      	b.n	80009a2 <HAL_RCC_OscConfig+0x22a>
 8000976:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800097a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800097e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800098a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000992:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000996:	fa93 f3a3 	rbit	r3, r3
 800099a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009a6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009ae:	fa92 f2a2 	rbit	r2, r2
 80009b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80009b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009ba:	fab2 f282 	clz	r2, r2
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	f042 0220 	orr.w	r2, r2, #32
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	f002 021f 	and.w	r2, r2, #31
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4013      	ands	r3, r2
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0ab      	beq.n	800092e <HAL_RCC_OscConfig+0x1b6>
 80009d6:	e05c      	b.n	8000a92 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d8:	f7ff fe0c 	bl	80005f4 <HAL_GetTick>
 80009dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e0:	e00a      	b.n	80009f8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e2:	f7ff fe07 	bl	80005f4 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d902      	bls.n	80009f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	f000 bf0d 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 80009f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a04:	fa93 f3a3 	rbit	r3, r3
 8000a08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000a0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a10:	fab3 f383 	clz	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <HAL_RCC_OscConfig+0x2b2>
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	e015      	b.n	8000a56 <HAL_RCC_OscConfig+0x2de>
 8000a2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a4a:	fa93 f3a3 	rbit	r3, r3
 8000a4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_RCC_OscConfig+0x314>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a62:	fa92 f2a2 	rbit	r2, r2
 8000a66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000a6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a6e:	fab2 f282 	clz	r2, r2
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	f042 0220 	orr.w	r2, r2, #32
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	f002 021f 	and.w	r2, r2, #31
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1ab      	bne.n	80009e2 <HAL_RCC_OscConfig+0x26a>
 8000a8a:	e002      	b.n	8000a92 <HAL_RCC_OscConfig+0x31a>
 8000a8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000a96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 817f 	beq.w	8000da6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aa8:	4ba7      	ldr	r3, [pc, #668]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 030c 	and.w	r3, r3, #12
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00c      	beq.n	8000ace <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ab4:	4ba4      	ldr	r3, [pc, #656]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 030c 	and.w	r3, r3, #12
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d173      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x430>
 8000ac0:	4ba1      	ldr	r3, [pc, #644]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000acc:	d16c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x430>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ad8:	fa93 f3a3 	rbit	r3, r3
 8000adc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae4:	fab3 f383 	clz	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d102      	bne.n	8000afe <HAL_RCC_OscConfig+0x386>
 8000af8:	4b93      	ldr	r3, [pc, #588]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	e013      	b.n	8000b26 <HAL_RCC_OscConfig+0x3ae>
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b16:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b1a:	fa93 f3a3 	rbit	r3, r3
 8000b1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b22:	4b89      	ldr	r3, [pc, #548]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b26:	2202      	movs	r2, #2
 8000b28:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b30:	fa92 f2a2 	rbit	r2, r2
 8000b34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000b38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	f042 0220 	orr.w	r2, r2, #32
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	f002 021f 	and.w	r2, r2, #31
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <HAL_RCC_OscConfig+0x3f6>
 8000b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d002      	beq.n	8000b6e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f000 be52 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	4b76      	ldr	r3, [pc, #472]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	21f8      	movs	r1, #248	; 0xf8
 8000b84:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000b8c:	fa91 f1a1 	rbit	r1, r1
 8000b90:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000b94:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000b98:	fab1 f181 	clz	r1, r1
 8000b9c:	b2c9      	uxtb	r1, r1
 8000b9e:	408b      	lsls	r3, r1
 8000ba0:	4969      	ldr	r1, [pc, #420]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba6:	e0fe      	b.n	8000da6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8088 	beq.w	8000cca <HAL_RCC_OscConfig+0x552>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bc4:	fa93 f3a3 	rbit	r3, r3
 8000bc8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000bcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bd0:	fab3 f383 	clz	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	461a      	mov	r2, r3
 8000be2:	2301      	movs	r3, #1
 8000be4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fd05 	bl	80005f4 <HAL_GetTick>
 8000bea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bee:	e00a      	b.n	8000c06 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bf0:	f7ff fd00 	bl	80005f4 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d902      	bls.n	8000c06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	f000 be06 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c10:	fa93 f3a3 	rbit	r3, r3
 8000c14:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000c18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1c:	fab3 f383 	clz	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d102      	bne.n	8000c36 <HAL_RCC_OscConfig+0x4be>
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	e013      	b.n	8000c5e <HAL_RCC_OscConfig+0x4e6>
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c52:	fa93 f3a3 	rbit	r3, r3
 8000c56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	2202      	movs	r2, #2
 8000c60:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c68:	fa92 f2a2 	rbit	r2, r2
 8000c6c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000c70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	f042 0220 	orr.w	r2, r2, #32
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	f002 021f 	and.w	r2, r2, #31
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0af      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	21f8      	movs	r1, #248	; 0xf8
 8000ca6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000caa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000cae:	fa91 f1a1 	rbit	r1, r1
 8000cb2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000cb6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000cba:	fab1 f181 	clz	r1, r1
 8000cbe:	b2c9      	uxtb	r1, r1
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	4921      	ldr	r1, [pc, #132]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	600b      	str	r3, [r1, #0]
 8000cc8:	e06d      	b.n	8000da6 <HAL_RCC_OscConfig+0x62e>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cd4:	fa93 f3a3 	rbit	r3, r3
 8000cd8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000cdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ce0:	fab3 f383 	clz	r3, r3
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc7d 	bl	80005f4 <HAL_GetTick>
 8000cfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfe:	e00a      	b.n	8000d16 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d00:	f7ff fc78 	bl	80005f4 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d902      	bls.n	8000d16 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f000 bd7e 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d20:	fa93 f3a3 	rbit	r3, r3
 8000d24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000d28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2c:	fab3 f383 	clz	r3, r3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d105      	bne.n	8000d4c <HAL_RCC_OscConfig+0x5d4>
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <HAL_RCC_OscConfig+0x5d0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	e016      	b.n	8000d74 <HAL_RCC_OscConfig+0x5fc>
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d68:	fa93 f3a3 	rbit	r3, r3
 8000d6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d70:	4bbf      	ldr	r3, [pc, #764]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	2202      	movs	r2, #2
 8000d76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d7e:	fa92 f2a2 	rbit	r2, r2
 8000d82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000d86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	f042 0220 	orr.w	r2, r2, #32
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	f002 021f 	and.w	r2, r2, #31
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ac      	bne.n	8000d00 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000daa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8113 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d07c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x74e>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000dde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de2:	fab3 f383 	clz	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	4ba2      	ldr	r3, [pc, #648]	; (8001074 <HAL_RCC_OscConfig+0x8fc>)
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	461a      	mov	r2, r3
 8000df2:	2301      	movs	r3, #1
 8000df4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fbfd 	bl	80005f4 <HAL_GetTick>
 8000dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	e00a      	b.n	8000e16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fbf8 	bl	80005f4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d902      	bls.n	8000e16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f000 bcfe 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e20:	fa93 f2a3 	rbit	r2, r3
 8000e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e36:	2202      	movs	r2, #2
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	fa93 f2a3 	rbit	r2, r3
 8000e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	fa93 f2a3 	rbit	r2, r3
 8000e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	4b7e      	ldr	r3, [pc, #504]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8000e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e82:	2102      	movs	r1, #2
 8000e84:	6019      	str	r1, [r3, #0]
 8000e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	fa93 f1a3 	rbit	r1, r3
 8000e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e9c:	6019      	str	r1, [r3, #0]
  return result;
 8000e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ea2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	fab3 f383 	clz	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d09d      	beq.n	8000e00 <HAL_RCC_OscConfig+0x688>
 8000ec4:	e08d      	b.n	8000fe2 <HAL_RCC_OscConfig+0x86a>
 8000ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ed6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	fa93 f2a3 	rbit	r2, r3
 8000ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ee8:	601a      	str	r2, [r3, #0]
  return result;
 8000eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ef2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <HAL_RCC_OscConfig+0x8fc>)
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	461a      	mov	r2, r3
 8000f04:	2300      	movs	r3, #0
 8000f06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f08:	f7ff fb74 	bl	80005f4 <HAL_GetTick>
 8000f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f12:	f7ff fb6f 	bl	80005f4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d902      	bls.n	8000f28 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f000 bc75 	b.w	8001812 <HAL_RCC_OscConfig+0x109a>
 8000f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f30:	2202      	movs	r2, #2
 8000f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	fa93 f2a3 	rbit	r2, r3
 8000f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f54:	2202      	movs	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	fa93 f2a3 	rbit	r2, r3
 8000f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f78:	2202      	movs	r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	fa93 f2a3 	rbit	r2, r3
 8000f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	6019      	str	r1, [r3, #0]
 8000fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	fa93 f1a3 	rbit	r1, r3
 8000fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000fba:	6019      	str	r1, [r3, #0]
  return result;
 8000fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fc0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d197      	bne.n	8000f12 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fe6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 81a5 	beq.w	8001342 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d116      	bne.n	8001038 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_RCC_OscConfig+0x8f8>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800101e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001030:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_RCC_OscConfig+0x900>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001040:	2b00      	cmp	r3, #0
 8001042:	d121      	bne.n	8001088 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_RCC_OscConfig+0x900>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_RCC_OscConfig+0x900>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001050:	f7ff fad0 	bl	80005f4 <HAL_GetTick>
 8001054:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	e010      	b.n	800107c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105a:	f7ff facb 	bl	80005f4 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d908      	bls.n	800107c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e3d1      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	10908120 	.word	0x10908120
 8001078:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b8d      	ldr	r3, [pc, #564]	; (80012b4 <HAL_RCC_OscConfig+0xb3c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0e8      	beq.n	800105a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800108c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x92e>
 8001098:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a86      	ldr	r2, [pc, #536]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e035      	b.n	8001112 <HAL_RCC_OscConfig+0x99a>
 80010a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x958>
 80010b6:	4b80      	ldr	r3, [pc, #512]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a7c      	ldr	r2, [pc, #496]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	e020      	b.n	8001112 <HAL_RCC_OscConfig+0x99a>
 80010d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d10c      	bne.n	80010fa <HAL_RCC_OscConfig+0x982>
 80010e0:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a74      	ldr	r2, [pc, #464]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4a71      	ldr	r2, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6213      	str	r3, [r2, #32]
 80010f8:	e00b      	b.n	8001112 <HAL_RCC_OscConfig+0x99a>
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6213      	str	r3, [r2, #32]
 8001106:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4a6b      	ldr	r2, [pc, #428]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001116:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8081 	beq.w	8001226 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fa66 	bl	80005f4 <HAL_GetTick>
 8001128:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	e00b      	b.n	8001146 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f7ff fa61 	bl	80005f4 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f241 3288 	movw	r2, #5000	; 0x1388
 800113e:	4293      	cmp	r3, r2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e365      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 8001146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800114a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001156:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fa93 f2a3 	rbit	r2, r3
 8001160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001164:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	fa93 f2a3 	rbit	r2, r3
 8001184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001188:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800118c:	601a      	str	r2, [r3, #0]
  return result;
 800118e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001192:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001196:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d102      	bne.n	80011b2 <HAL_RCC_OscConfig+0xa3a>
 80011ac:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	e013      	b.n	80011da <HAL_RCC_OscConfig+0xa62>
 80011b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80011ba:	2202      	movs	r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	fa93 f2a3 	rbit	r2, r3
 80011cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80011de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011e2:	2102      	movs	r1, #2
 80011e4:	6011      	str	r1, [r2, #0]
 80011e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80011ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	fa92 f1a2 	rbit	r1, r2
 80011f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80011f8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80011fc:	6011      	str	r1, [r2, #0]
  return result;
 80011fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001202:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f002 021f 	and.w	r2, r2, #31
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	4013      	ands	r3, r2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d084      	beq.n	800112e <HAL_RCC_OscConfig+0x9b6>
 8001224:	e083      	b.n	800132e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff f9e5 	bl	80005f4 <HAL_GetTick>
 800122a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001230:	f7ff f9e0 	bl	80005f4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e2e4      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 8001248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800124c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001258:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	fa93 f2a3 	rbit	r2, r3
 8001262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001266:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001270:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001274:	2202      	movs	r2, #2
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	fa93 f2a3 	rbit	r2, r3
 8001286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800128a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800128e:	601a      	str	r2, [r3, #0]
  return result;
 8001290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001294:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001298:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0xb44>
 80012ae:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_RCC_OscConfig+0xb40>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	e017      	b.n	80012e4 <HAL_RCC_OscConfig+0xb6c>
 80012b4:	40007000 	.word	0x40007000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	fa93 f2a3 	rbit	r2, r3
 80012d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012da:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	4bb3      	ldr	r3, [pc, #716]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80012e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012ec:	2102      	movs	r1, #2
 80012ee:	6011      	str	r1, [r2, #0]
 80012f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80012f4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	fa92 f1a2 	rbit	r1, r2
 80012fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001302:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001306:	6011      	str	r1, [r2, #0]
  return result;
 8001308:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800130c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	f002 021f 	and.w	r2, r2, #31
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d180      	bne.n	8001230 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800132e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b9e      	ldr	r3, [pc, #632]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a9d      	ldr	r2, [pc, #628]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 825e 	beq.w	8001810 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	f000 821f 	beq.w	80017a0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b02      	cmp	r3, #2
 8001370:	f040 8170 	bne.w	8001654 <HAL_RCC_OscConfig+0xedc>
 8001374:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001378:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800137c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001386:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001394:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001398:	601a      	str	r2, [r3, #0]
  return result;
 800139a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80013a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	461a      	mov	r2, r3
 80013b6:	2300      	movs	r3, #0
 80013b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff f91b 	bl	80005f4 <HAL_GetTick>
 80013be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	e009      	b.n	80013d8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff f916 	bl	80005f4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e21c      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 80013d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f2a3 	rbit	r2, r3
 80013f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80013fc:	601a      	str	r2, [r3, #0]
  return result;
 80013fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001402:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001406:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001408:	fab3 f383 	clz	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d102      	bne.n	8001422 <HAL_RCC_OscConfig+0xcaa>
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	e027      	b.n	8001472 <HAL_RCC_OscConfig+0xcfa>
 8001422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001426:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800142a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800142e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001434:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001442:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fa93 f2a3 	rbit	r2, r3
 8001464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001468:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001476:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800147a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800147e:	6011      	str	r1, [r2, #0]
 8001480:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001484:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	fa92 f1a2 	rbit	r1, r2
 800148e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001492:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001496:	6011      	str	r1, [r2, #0]
  return result;
 8001498:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800149c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	fab2 f282 	clz	r2, r2
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f042 0220 	orr.w	r2, r2, #32
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	f002 021f 	and.w	r2, r2, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d182      	bne.n	80013c4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f023 020f 	bic.w	r2, r3, #15
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	4937      	ldr	r1, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80014e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6a19      	ldr	r1, [r3, #32]
 80014ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	492d      	ldr	r1, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001504:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f2a3 	rbit	r2, r3
 800151c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001520:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001524:	601a      	str	r2, [r3, #0]
  return result;
 8001526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800152e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800153a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff f855 	bl	80005f4 <HAL_GetTick>
 800154a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800154e:	e009      	b.n	8001564 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff f850 	bl	80005f4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e156      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800156c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001576:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001588:	601a      	str	r2, [r3, #0]
  return result;
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe3c>
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <HAL_RCC_OscConfig+0xe38>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e02a      	b.n	8001604 <HAL_RCC_OscConfig+0xe8c>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80015bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80015e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	4b86      	ldr	r3, [pc, #536]	; (800181c <HAL_RCC_OscConfig+0x10a4>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001608:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800160c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001610:	6011      	str	r1, [r2, #0]
 8001612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001616:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	fa92 f1a2 	rbit	r1, r2
 8001620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001624:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001628:	6011      	str	r1, [r2, #0]
  return result;
 800162a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800162e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	fab2 f282 	clz	r2, r2
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	f43f af7f 	beq.w	8001550 <HAL_RCC_OscConfig+0xdd8>
 8001652:	e0dd      	b.n	8001810 <HAL_RCC_OscConfig+0x1098>
 8001654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001658:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800165c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001666:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001678:	601a      	str	r2, [r3, #0]
  return result;
 800167a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001682:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800168e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	461a      	mov	r2, r3
 8001696:	2300      	movs	r3, #0
 8001698:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7fe ffab 	bl	80005f4 <HAL_GetTick>
 800169e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	e009      	b.n	80016b8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7fe ffa6 	bl	80005f4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0ac      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80016c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80016dc:	601a      	str	r2, [r3, #0]
  return result;
 80016de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80016e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0xf8a>
 80016fc:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x10a4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e027      	b.n	8001752 <HAL_RCC_OscConfig+0xfda>
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800170a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001714:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fa93 f2a3 	rbit	r2, r3
 800171e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001722:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001748:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x10a4>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001756:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800175a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800175e:	6011      	str	r1, [r2, #0]
 8001760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001764:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	fa92 f1a2 	rbit	r1, r2
 800176e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001772:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001776:	6011      	str	r1, [r2, #0]
  return result;
 8001778:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800177c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f002 021f 	and.w	r2, r2, #31
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d182      	bne.n	80016a4 <HAL_RCC_OscConfig+0xf2c>
 800179e:	e037      	b.n	8001810 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e02e      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x10a4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_RCC_OscConfig+0x10a4>)
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80017c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017c8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d117      	bne.n	800180c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80017dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80017e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10b      	bne.n	800180c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80017f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f8:	f003 020f 	and.w	r2, r3, #15
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b09e      	sub	sp, #120	; 0x78
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e162      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d910      	bls.n	8001868 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b8d      	ldr	r3, [pc, #564]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	498b      	ldr	r1, [pc, #556]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e14a      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001874:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	497f      	ldr	r1, [pc, #508]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80dc 	beq.w	8001a4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d13c      	bne.n	8001916 <HAL_RCC_ClockConfig+0xf6>
 800189c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xa6>
 80018c0:	4b6f      	ldr	r3, [pc, #444]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e00f      	b.n	80018e6 <HAL_RCC_ClockConfig+0xc6>
 80018c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	667b      	str	r3, [r7, #100]	; 0x64
 80018d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d8:	663b      	str	r3, [r7, #96]	; 0x60
 80018da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018e2:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80018ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018ee:	fa92 f2a2 	rbit	r2, r2
 80018f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80018f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018f6:	fab2 f282 	clz	r2, r2
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	f042 0220 	orr.w	r2, r2, #32
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f002 021f 	and.w	r2, r2, #31
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f202 	lsl.w	r2, r1, r2
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d17b      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0f3      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d13c      	bne.n	8001998 <HAL_RCC_ClockConfig+0x178>
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800192c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_RCC_ClockConfig+0x128>
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	e00f      	b.n	8001968 <HAL_RCC_ClockConfig+0x148>
 8001948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
 8001956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
 800195c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001964:	4b46      	ldr	r3, [pc, #280]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800196c:	63ba      	str	r2, [r7, #56]	; 0x38
 800196e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001970:	fa92 f2a2 	rbit	r2, r2
 8001974:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d13a      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b2      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
 8001998:	2302      	movs	r3, #2
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	095b      	lsrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1a0>
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	e00d      	b.n	80019dc <HAL_RCC_ClockConfig+0x1bc>
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	2302      	movs	r3, #2
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	2202      	movs	r2, #2
 80019de:	61ba      	str	r2, [r7, #24]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	617a      	str	r2, [r7, #20]
  return result;
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	fab2 f282 	clz	r2, r2
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	f042 0220 	orr.w	r2, r2, #32
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	2101      	movs	r1, #1
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e079      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	491a      	ldr	r1, [pc, #104]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7fe fdea 	bl	80005f4 <HAL_GetTick>
 8001a20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7fe fde6 	bl	80005f4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e061      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_RCC_ClockConfig+0x260>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d214      	bcs.n	8001a84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4906      	ldr	r1, [pc, #24]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_RCC_ClockConfig+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e040      	b.n	8001afe <HAL_RCC_ClockConfig+0x2de>
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCC_ClockConfig+0x2e8>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	491a      	ldr	r1, [pc, #104]	; (8001b08 <HAL_RCC_ClockConfig+0x2e8>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x2e8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4912      	ldr	r1, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x2e8>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ac2:	f000 f829 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_RCC_ClockConfig+0x2e8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad0:	22f0      	movs	r2, #240	; 0xf0
 8001ad2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	fa92 f2a2 	rbit	r2, r2
 8001ada:	60fa      	str	r2, [r7, #12]
  return result;
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	40d3      	lsrs	r3, r2
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x2ec>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	fa21 f303 	lsr.w	r3, r1, r3
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_RCC_ClockConfig+0x2f0>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_RCC_ClockConfig+0x2f4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd4c 	bl	8000594 <HAL_InitTick>
  
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3778      	adds	r7, #120	; 0x78
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08001c5c 	.word	0x08001c5c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b08b      	sub	sp, #44	; 0x2c
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x30>
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x36>
 8001b46:	e03f      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b4a:	623b      	str	r3, [r7, #32]
      break;
 8001b4c:	e03f      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	fa92 f2a2 	rbit	r2, r2
 8001b60:	607a      	str	r2, [r7, #4]
  return result;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	60fa      	str	r2, [r7, #12]
  return result;
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	fab2 f282 	clz	r2, r2
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	40d3      	lsrs	r3, r2
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb0:	e007      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	623b      	str	r3, [r7, #32]
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bca:	623b      	str	r3, [r7, #32]
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	6a3b      	ldr	r3, [r7, #32]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	372c      	adds	r7, #44	; 0x2c
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200
 8001be4:	08001c6c 	.word	0x08001c6c
 8001be8:	08001c7c 	.word	0x08001c7c

08001bec <__libc_init_array>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	4d0d      	ldr	r5, [pc, #52]	; (8001c24 <__libc_init_array+0x38>)
 8001bf0:	4c0d      	ldr	r4, [pc, #52]	; (8001c28 <__libc_init_array+0x3c>)
 8001bf2:	1b64      	subs	r4, r4, r5
 8001bf4:	10a4      	asrs	r4, r4, #2
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	42a6      	cmp	r6, r4
 8001bfa:	d109      	bne.n	8001c10 <__libc_init_array+0x24>
 8001bfc:	4d0b      	ldr	r5, [pc, #44]	; (8001c2c <__libc_init_array+0x40>)
 8001bfe:	4c0c      	ldr	r4, [pc, #48]	; (8001c30 <__libc_init_array+0x44>)
 8001c00:	f000 f820 	bl	8001c44 <_init>
 8001c04:	1b64      	subs	r4, r4, r5
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	2600      	movs	r6, #0
 8001c0a:	42a6      	cmp	r6, r4
 8001c0c:	d105      	bne.n	8001c1a <__libc_init_array+0x2e>
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c14:	4798      	blx	r3
 8001c16:	3601      	adds	r6, #1
 8001c18:	e7ee      	b.n	8001bf8 <__libc_init_array+0xc>
 8001c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1e:	4798      	blx	r3
 8001c20:	3601      	adds	r6, #1
 8001c22:	e7f2      	b.n	8001c0a <__libc_init_array+0x1e>
 8001c24:	08001c8c 	.word	0x08001c8c
 8001c28:	08001c8c 	.word	0x08001c8c
 8001c2c:	08001c8c 	.word	0x08001c8c
 8001c30:	08001c90 	.word	0x08001c90

08001c34 <memset>:
 8001c34:	4402      	add	r2, r0
 8001c36:	4603      	mov	r3, r0
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d100      	bne.n	8001c3e <memset+0xa>
 8001c3c:	4770      	bx	lr
 8001c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c42:	e7f9      	b.n	8001c38 <memset+0x4>

08001c44 <_init>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	bf00      	nop
 8001c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4a:	bc08      	pop	{r3}
 8001c4c:	469e      	mov	lr, r3
 8001c4e:	4770      	bx	lr

08001c50 <_fini>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	bf00      	nop
 8001c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c56:	bc08      	pop	{r3}
 8001c58:	469e      	mov	lr, r3
 8001c5a:	4770      	bx	lr
