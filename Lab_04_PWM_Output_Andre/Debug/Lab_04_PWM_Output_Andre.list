
Lab_04_PWM_Output_Andre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003074  08003074  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003074  08003074  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001762  00000000  00000000  0002a904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb6a  00000000  00000000  0002cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a063  00000000  00000000  0004c93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4d08  00000000  00000000  0005699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011b6a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b2c  00000000  00000000  0011b6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003024 	.word	0x08003024

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003024 	.word	0x08003024

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <SysTick_Init>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

//*****************************************************************************
//                             SysTick Config
void SysTick_Init(uint32_t ticks){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;			// Disable SysTick
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <SysTick_Init+0x54>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = ticks - 1;  // Set reload register
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <SysTick_Init+0x54>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3b01      	subs	r3, #1
 8000278:	6053      	str	r3, [r2, #4]

	// Set interrupt priority of SysTick to least urgency (i.e., largest priority value)
	NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
 800027a:	210f      	movs	r1, #15
 800027c:	f04f 30ff 	mov.w	r0, #4294967295
 8000280:	f7ff ffc6 	bl	8000210 <__NVIC_SetPriority>

    SysTick->VAL = 0;             // Reset the SysTick counter value. Software should always clear during the initialization.
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <SysTick_Init+0x54>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]

    // Select processor clock: 1 = processor clock; 0 = external clock
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <SysTick_Init+0x54>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SysTick_Init+0x54>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6013      	str	r3, [r2, #0]

    // Enables SysTick interrupt, 1 = Enable, 0 = Disable
    SysTick->CTRL |= SysTick_CTRL_TICKINT;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <SysTick_Init+0x54>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <SysTick_Init+0x54>)
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	6013      	str	r3, [r2, #0]

    // Enable SysTick
    SysTick->CTRL |= SysTick_CTRL_ENABLE;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SysTick_Init+0x54>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <SysTick_Init+0x54>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <SetMode>:
	return millis_counter;
}

//*****************************************************************************
//                         Register settings for GPIO
void SetMode(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	460b      	mov	r3, r1
 80002c6:	70fb      	strb	r3, [r7, #3]
 80002c8:	4613      	mov	r3, r2
 80002ca:	70bb      	strb	r3, [r7, #2]
	PORT->MODER |= (mode << (pin * 2)); // Times 2 because register occupies 2 bits for each MODER.
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	78b9      	ldrb	r1, [r7, #2]
 80002d2:	78fa      	ldrb	r2, [r7, #3]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <SetType>:

void SetType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t type){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	460b      	mov	r3, r1
 80002f6:	70fb      	strb	r3, [r7, #3]
 80002f8:	4613      	mov	r3, r2
 80002fa:	70bb      	strb	r3, [r7, #2]
	PORT->OTYPER |= (type << pin);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	78b9      	ldrb	r1, [r7, #2]
 8000302:	78fa      	ldrb	r2, [r7, #3]
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	431a      	orrs	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	605a      	str	r2, [r3, #4]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <SetSpeed>:

void SetSpeed(GPIO_TypeDef * PORT, uint8_t pin, uint8_t speed){
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
 8000322:	460b      	mov	r3, r1
 8000324:	70fb      	strb	r3, [r7, #3]
 8000326:	4613      	mov	r3, r2
 8000328:	70bb      	strb	r3, [r7, #2]
	PORT->OSPEEDR |= (speed << (pin * 2));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	78b9      	ldrb	r1, [r7, #2]
 8000330:	78fa      	ldrb	r2, [r7, #3]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	431a      	orrs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	609a      	str	r2, [r3, #8]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <SetPullType>:

void SetPullType(GPIO_TypeDef * PORT, uint8_t pin, uint8_t pulltype){
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	460b      	mov	r3, r1
 8000354:	70fb      	strb	r3, [r7, #3]
 8000356:	4613      	mov	r3, r2
 8000358:	70bb      	strb	r3, [r7, #2]
	PORT->PUPDR |= (pulltype << (pin * 2));
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	78b9      	ldrb	r1, [r7, #2]
 8000360:	78fa      	ldrb	r2, [r7, #3]
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	431a      	orrs	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	60da      	str	r2, [r3, #12]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <SetPin>:

void SetPin(GPIO_TypeDef * PORT, uint8_t pin, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pulltype){
 800037a:	b580      	push	{r7, lr}
 800037c:	b082      	sub	sp, #8
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	4608      	mov	r0, r1
 8000384:	4611      	mov	r1, r2
 8000386:	461a      	mov	r2, r3
 8000388:	4603      	mov	r3, r0
 800038a:	70fb      	strb	r3, [r7, #3]
 800038c:	460b      	mov	r3, r1
 800038e:	70bb      	strb	r3, [r7, #2]
 8000390:	4613      	mov	r3, r2
 8000392:	707b      	strb	r3, [r7, #1]
	SetMode(PORT, pin, mode);
 8000394:	78ba      	ldrb	r2, [r7, #2]
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	4619      	mov	r1, r3
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f7ff ff8e 	bl	80002bc <SetMode>
	SetType(PORT, pin, type);
 80003a0:	787a      	ldrb	r2, [r7, #1]
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	4619      	mov	r1, r3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ffa0 	bl	80002ec <SetType>
	SetSpeed(PORT, pin, speed);
 80003ac:	7c3a      	ldrb	r2, [r7, #16]
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	4619      	mov	r1, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ffb1 	bl	800031a <SetSpeed>
	SetPullType(PORT, pin, pulltype);
 80003b8:	7d3a      	ldrb	r2, [r7, #20]
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	4619      	mov	r1, r3
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f7ff ffc3 	bl	800034a <SetPullType>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <CMR_TIM4_config>:
}

//*****************************************************************************
//              General-Purpose TIM4 Register CONFIG
void CMR_TIM4_config(TIM_TypeDef *TIMx, uint16_t PSC_val, uint16_t ARR_val, uint8_t direction, uint8_t CMS_mode, IRQn_Type irqNum)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	4608      	mov	r0, r1
 80003d6:	4611      	mov	r1, r2
 80003d8:	461a      	mov	r2, r3
 80003da:	4603      	mov	r3, r0
 80003dc:	817b      	strh	r3, [r7, #10]
 80003de:	460b      	mov	r3, r1
 80003e0:	813b      	strh	r3, [r7, #8]
 80003e2:	4613      	mov	r3, r2
 80003e4:	71fb      	strb	r3, [r7, #7]
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;		// TIM4 clock enable register
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <CMR_TIM4_config+0x9c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <CMR_TIM4_config+0x9c>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	61d3      	str	r3, [r2, #28]
	TIMx->CR1 |= TIM_CR1_CEN;				// Enable counter
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]
	TIMx->DIER |= TIM_DIER_UIE;				// Update interrupt enable
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	f043 0201 	orr.w	r2, r3, #1
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	60da      	str	r2, [r3, #12]
	TIMx->EGR |= TIM_EGR_UG;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f043 0201 	orr.w	r2, r3, #1
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	615a      	str	r2, [r3, #20]
	TIMx->CR1 |= TIM_CR1_ARPE;				// Auto-reload preload enable
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	601a      	str	r2, [r3, #0]

	// fclk = 16Mhz
	//PWM frquency = fclk/ARR/PSC
	//PWM Duty Cycle = CCR4/ARR
	TIMx->PSC = PSC_val-1;					// prescaler
 8000422:	897b      	ldrh	r3, [r7, #10]
 8000424:	3b01      	subs	r3, #1
 8000426:	461a      	mov	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = ARR_val-1;					// auto-reload register. Controls frequency of PWM.
 800042c:	893b      	ldrh	r3, [r7, #8]
 800042e:	3b01      	subs	r3, #1
 8000430:	461a      	mov	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CNT = 0;							// Reset counter
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR1 |= direction;					// Direction
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	431a      	orrs	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	601a      	str	r2, [r3, #0]
	TIMx->CR1 |= CMS_mode;					// Center-aligned mode selection
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	7e3b      	ldrb	r3, [r7, #24]
 800044e:	431a      	orrs	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(irqNum);					// Interrupt NVIC irqNum configuration register
 8000454:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff febb 	bl	80001d4 <__NVIC_EnableIRQ>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <CCM_TIM4_config>:

void CCM_TIM4_config()
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	TIM4->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <CCM_TIM4_config+0x48>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <CCM_TIM4_config+0x48>)
 8000476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047a:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 |= TIM_CCMR2_OC4M_2;
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <CCM_TIM4_config+0x48>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <CCM_TIM4_config+0x48>)
 8000482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000486:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 |= TIM_CCMR2_OC4PE;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <CCM_TIM4_config+0x48>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <CCM_TIM4_config+0x48>)
 800048e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000492:	61d3      	str	r3, [r2, #28]
	TIM4->CCR4 = 7500; //for 75%			// Capture/Compare 4 Value. Controls duty cycle of the PWM.
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <CCM_TIM4_config+0x48>)
 8000496:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800049a:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCER |= TIM_CCER_CC4E;			// Capture/compare 4 interrupt enable
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <CCM_TIM4_config+0x48>)
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <CCM_TIM4_config+0x48>)
 80004a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a6:	6213      	str	r3, [r2, #32]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40000800 	.word	0x40000800

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SysTick_Init(16000);
 80004be:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80004c2:	f7ff fecf 	bl	8000264 <SysTick_Init>
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable the bus for port B.
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <main+0x70>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a17      	ldr	r2, [pc, #92]	; (8000528 <main+0x70>)
 80004cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d0:	6153      	str	r3, [r2, #20]

	// Pin Configurations.
	SetPin(GPIOB, 3, ALTFUNCTMODE, PUSHPULL, LOWSPEED, NOPULL); // (PB3) LED0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2300      	movs	r3, #0
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2300      	movs	r3, #0
 80004dc:	2202      	movs	r2, #2
 80004de:	2103      	movs	r1, #3
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <main+0x74>)
 80004e2:	f7ff ff4a 	bl	800037a <SetPin>
	CMR_TIM4_config(TIM4, 1600, 10000, UPCOUNTER, EDGEALIGN, TIM4_IRQn);
 80004e6:	231e      	movs	r3, #30
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2300      	movs	r3, #0
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	23ef      	movs	r3, #239	; 0xef
 80004f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80004f4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x78>)
 80004fa:	f7ff ff67 	bl	80003cc <CMR_TIM4_config>
	CCM_TIM4_config();
 80004fe:	f7ff ffb5 	bl	800046c <CCM_TIM4_config>

	GPIOA->AFR[0] = (GPIOA->AFR[0] & ~GPIO_AFRL_AFRL2) | (0b0111 << GPIO_AFRL_AFRL2_Pos);
 8000502:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800050c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000510:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000514:	6213      	str	r3, [r2, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 f9ef 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f80b 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f89b 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f869 	bl	80005f8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x6e>
 8000528:	40021000 	.word	0x40021000
 800052c:	48000400 	.word	0x48000400
 8000530:	40000800 	.word	0x40000800

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0a6      	sub	sp, #152	; 0x98
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053e:	2228      	movs	r2, #40	; 0x28
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fd66 	bl	8003014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2258      	movs	r2, #88	; 0x58
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fd58 	bl	8003014 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800057c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fc9f 	bl	8000ed4 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800059c:	f000 f8c2 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fcdd 	bl	8001f7c <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c8:	f000 f8ac 	bl	8000724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <SystemClock_Config+0xc0>)
 80005ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 ff04 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005e6:	f000 f89d 	bl	8000724 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3798      	adds	r7, #152	; 0x98
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	00200002 	.word	0x00200002

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART2_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART2_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000604:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x58>)
 800063c:	f002 f8f2 	bl	8002824 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f86d 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <MX_GPIO_Init+0xc4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a2a      	ldr	r2, [pc, #168]	; (800071c <MX_GPIO_Init+0xc4>)
 8000674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <MX_GPIO_Init+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <MX_GPIO_Init+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a24      	ldr	r2, [pc, #144]	; (800071c <MX_GPIO_Init+0xc4>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_GPIO_Init+0xc4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_GPIO_Init+0xc4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a1e      	ldr	r2, [pc, #120]	; (800071c <MX_GPIO_Init+0xc4>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_GPIO_Init+0xc4>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_GPIO_Init+0xc4>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_GPIO_Init+0xc4>)
 80006bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_GPIO_Init+0xc4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 fbe5 	bl	8000ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0xc8>)
 80006f2:	f000 fa4d 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f6:	2320      	movs	r3, #32
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f000 fa3e 	bl	8000b90 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	48000800 	.word	0x48000800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x44>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x44>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x44>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x44>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x44>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000766:	2007      	movs	r0, #7
 8000768:	f000 f9de 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <HAL_UART_MspInit+0x7c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d128      	bne.n	80007ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_UART_MspInit+0x80>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_UART_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ca:	230c      	movs	r3, #12
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007da:	2307      	movs	r3, #7
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 f9d2 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 f89c 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <TIM4_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void TIM4_IRQHandler(void)  			// Do not forget the ‘extern “C”’ in case of C++
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
    TIM4->SR &= ~TIM_SR_CC4IF; 			// Reset capture/compare 4 interrupt flag.
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <TIM4_IRQHandler+0x2c>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <TIM4_IRQHandler+0x2c>)
 800085a:	f023 0310 	bic.w	r3, r3, #16
 800085e:	6113      	str	r3, [r2, #16]
    									// This is needed otherwise the
    									// interrupt handler will be called again.
    // handle interrupt here
    GPIOA->ODR |= 0x08;
 8000860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6153      	str	r3, [r2, #20]
//    flag = 1;
//	if(flag)
//	{
//		LED_PWM();
//	}
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40000800 	.word	0x40000800

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ce:	f7ff ffd7 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f002 fb7b 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d6:	f7ff fdef 	bl	80004b8 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	0800307c 	.word	0x0800307c
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	200000b0 	.word	0x200000b0

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x28>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f90d 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff ff0c 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f917 	bl	8000b76 <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f8ed 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	200000ac 	.word	0x200000ac

080009ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	200000ac 	.word	0x200000ac

080009c4 <__NVIC_SetPriorityGrouping>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff47 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5c 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e160      	b.n	8000e62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8152 	beq.w	8000e5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d005      	beq.n	8000bd0 <HAL_GPIO_Init+0x40>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d130      	bne.n	8000c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c06:	2201      	movs	r2, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	f003 0201 	and.w	r2, r3, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d017      	beq.n	8000c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d123      	bne.n	8000cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	220f      	movs	r2, #15
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	6939      	ldr	r1, [r7, #16]
 8000cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0203 	and.w	r2, r3, #3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80ac 	beq.w	8000e5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d1c:	4a59      	ldr	r2, [pc, #356]	; (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d46:	d025      	beq.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_GPIO_Init+0x2f8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d01f      	beq.n	8000d90 <HAL_GPIO_Init+0x200>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d019      	beq.n	8000d8c <HAL_GPIO_Init+0x1fc>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x300>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d013      	beq.n	8000d88 <HAL_GPIO_Init+0x1f8>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1f4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_GPIO_Init+0x308>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1f0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4a      	ldr	r2, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d78:	2306      	movs	r3, #6
 8000d7a:	e00c      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	e00a      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d80:	2305      	movs	r3, #5
 8000d82:	e008      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x206>
 8000d94:	2300      	movs	r3, #0
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dd8:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f ae97 	bne.w	8000ba0 <HAL_GPIO_Init+0x10>
  }
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	48001000 	.word	0x48001000
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	48001800 	.word	0x48001800
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb4:	787b      	ldrb	r3, [r7, #1]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ee4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f001 b83a 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 816f 	beq.w	80011ee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f10:	4bb5      	ldr	r3, [pc, #724]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d00c      	beq.n	8000f36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f1c:	4bb2      	ldr	r3, [pc, #712]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d15c      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x10e>
 8000f28:	4baf      	ldr	r3, [pc, #700]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f34:	d155      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x10e>
 8000f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <HAL_RCC_OscConfig+0x94>
 8000f62:	4ba1      	ldr	r3, [pc, #644]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	e015      	b.n	8000f94 <HAL_RCC_OscConfig+0xc0>
 8000f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f90:	4b95      	ldr	r3, [pc, #596]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f98:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f9c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fa0:	fa92 f2a2 	rbit	r2, r2
 8000fa4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fa8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fac:	fab2 f282 	clz	r2, r2
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	f042 0220 	orr.w	r2, r2, #32
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	f002 021f 	and.w	r2, r2, #31
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8111 	beq.w	80011ec <HAL_RCC_OscConfig+0x318>
 8000fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f040 8108 	bne.w	80011ec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f000 bfc6 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fe6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x12e>
 8000ff4:	4b7c      	ldr	r3, [pc, #496]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a7b      	ldr	r2, [pc, #492]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e036      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 8001002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001006:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x158>
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a74      	ldr	r2, [pc, #464]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b72      	ldr	r3, [pc, #456]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a71      	ldr	r2, [pc, #452]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e021      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 800102c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001030:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x184>
 800103e:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a66      	ldr	r2, [pc, #408]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0x19c>
 8001058:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a62      	ldr	r2, [pc, #392]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a5f      	ldr	r2, [pc, #380]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d059      	beq.n	8001134 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fc94 	bl	80009ac <HAL_GetTick>
 8001084:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108a:	f7ff fc8f 	bl	80009ac <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d902      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	f000 bf67 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x1fe>
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x22a>
 80010d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001102:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001106:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800110a:	fa92 f2a2 	rbit	r2, r2
 800110e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001112:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f002 021f 	and.w	r2, r2, #31
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0ab      	beq.n	800108a <HAL_RCC_OscConfig+0x1b6>
 8001132:	e05c      	b.n	80011ee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc3a 	bl	80009ac <HAL_GetTick>
 8001138:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113e:	f7ff fc35 	bl	80009ac <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d902      	bls.n	8001154 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	f000 bf0d 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001158:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001168:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d102      	bne.n	8001186 <HAL_RCC_OscConfig+0x2b2>
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x2de>
 8001186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800119a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_RCC_OscConfig+0x314>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011be:	fa92 f2a2 	rbit	r2, r2
 80011c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	f002 021f 	and.w	r2, r2, #31
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ab      	bne.n	800113e <HAL_RCC_OscConfig+0x26a>
 80011e6:	e002      	b.n	80011ee <HAL_RCC_OscConfig+0x31a>
 80011e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 817f 	beq.w	8001502 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001204:	4ba7      	ldr	r3, [pc, #668]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001210:	4ba4      	ldr	r3, [pc, #656]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d173      	bne.n	8001304 <HAL_RCC_OscConfig+0x430>
 800121c:	4ba1      	ldr	r3, [pc, #644]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001228:	d16c      	bne.n	8001304 <HAL_RCC_OscConfig+0x430>
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800123c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d102      	bne.n	800125a <HAL_RCC_OscConfig+0x386>
 8001254:	4b93      	ldr	r3, [pc, #588]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	e013      	b.n	8001282 <HAL_RCC_OscConfig+0x3ae>
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001272:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800127e:	4b89      	ldr	r3, [pc, #548]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	2202      	movs	r2, #2
 8001284:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001288:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001294:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00a      	beq.n	80012ca <HAL_RCC_OscConfig+0x3f6>
 80012b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d002      	beq.n	80012ca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f000 be52 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	21f8      	movs	r1, #248	; 0xf8
 80012e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012e8:	fa91 f1a1 	rbit	r1, r1
 80012ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012f4:	fab1 f181 	clz	r1, r1
 80012f8:	b2c9      	uxtb	r1, r1
 80012fa:	408b      	lsls	r3, r1
 80012fc:	4969      	ldr	r1, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e0fe      	b.n	8001502 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8088 	beq.w	8001426 <HAL_RCC_OscConfig+0x552>
 8001316:	2301      	movs	r3, #1
 8001318:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001328:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001336:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	2301      	movs	r3, #1
 8001340:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fb33 	bl	80009ac <HAL_GetTick>
 8001346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fb2e 	bl	80009ac <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d902      	bls.n	8001362 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	f000 be06 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001374:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d102      	bne.n	8001392 <HAL_RCC_OscConfig+0x4be>
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	e013      	b.n	80013ba <HAL_RCC_OscConfig+0x4e6>
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	2202      	movs	r2, #2
 80013bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013c4:	fa92 f2a2 	rbit	r2, r2
 80013c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f042 0220 	orr.w	r2, r2, #32
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f002 021f 	and.w	r2, r2, #31
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0af      	beq.n	800134c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	21f8      	movs	r1, #248	; 0xf8
 8001402:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800140a:	fa91 f1a1 	rbit	r1, r1
 800140e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001412:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001416:	fab1 f181 	clz	r1, r1
 800141a:	b2c9      	uxtb	r1, r1
 800141c:	408b      	lsls	r3, r1
 800141e:	4921      	ldr	r1, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e06d      	b.n	8001502 <HAL_RCC_OscConfig+0x62e>
 8001426:	2301      	movs	r3, #1
 8001428:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001438:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001446:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	461a      	mov	r2, r3
 800144e:	2300      	movs	r3, #0
 8001450:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff faab 	bl	80009ac <HAL_GetTick>
 8001456:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff faa6 	bl	80009ac <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d902      	bls.n	8001472 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	f000 bd7e 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001484:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5d4>
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_OscConfig+0x5d0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	e016      	b.n	80014d0 <HAL_RCC_OscConfig+0x5fc>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014cc:	4bbf      	ldr	r3, [pc, #764]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2202      	movs	r2, #2
 80014d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014da:	fa92 f2a2 	rbit	r2, r2
 80014de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014e6:	fab2 f282 	clz	r2, r2
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	f042 0220 	orr.w	r2, r2, #32
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f002 021f 	and.w	r2, r2, #31
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ac      	bne.n	800145c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001506:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8113 	beq.w	800173e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d07c      	beq.n	8001622 <HAL_RCC_OscConfig+0x74e>
 8001528:	2301      	movs	r3, #1
 800152a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800153a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	4ba2      	ldr	r3, [pc, #648]	; (80017d0 <HAL_RCC_OscConfig+0x8fc>)
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	461a      	mov	r2, r3
 800154e:	2301      	movs	r3, #1
 8001550:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fa2b 	bl	80009ac <HAL_GetTick>
 8001556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fa26 	bl	80009ac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d902      	bls.n	8001572 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	f000 bcfe 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fa93 f2a3 	rbit	r2, r3
 80015a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fa93 f2a3 	rbit	r2, r3
 80015c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 80015d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015de:	2102      	movs	r1, #2
 80015e0:	6019      	str	r1, [r3, #0]
 80015e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f1a3 	rbit	r1, r3
 80015f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f8:	6019      	str	r1, [r3, #0]
  return result;
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d09d      	beq.n	800155c <HAL_RCC_OscConfig+0x688>
 8001620:	e08d      	b.n	800173e <HAL_RCC_OscConfig+0x86a>
 8001622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001626:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001640:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001644:	601a      	str	r2, [r3, #0]
  return result;
 8001646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800164e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_RCC_OscConfig+0x8fc>)
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	461a      	mov	r2, r3
 8001660:	2300      	movs	r3, #0
 8001662:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff f9a2 	bl	80009ac <HAL_GetTick>
 8001668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff f99d 	bl	80009ac <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d902      	bls.n	8001684 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	f000 bc75 	b.w	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001688:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b0:	2202      	movs	r2, #2
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016fc:	2102      	movs	r1, #2
 80016fe:	6019      	str	r1, [r3, #0]
 8001700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001704:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f1a3 	rbit	r1, r3
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001716:	6019      	str	r1, [r3, #0]
  return result;
 8001718:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d197      	bne.n	800166e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001742:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 81a5 	beq.w	8001a9e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_RCC_OscConfig+0x8f8>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_RCC_OscConfig+0x900>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d121      	bne.n	80017e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x900>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x900>)
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ac:	f7ff f8fe 	bl	80009ac <HAL_GetTick>
 80017b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e010      	b.n	80017d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff f8f9 	bl	80009ac <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e3d1      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	10908120 	.word	0x10908120
 80017d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b8d      	ldr	r3, [pc, #564]	; (8001a10 <HAL_RCC_OscConfig+0xb3c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0e8      	beq.n	80017b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x92e>
 80017f4:	4b87      	ldr	r3, [pc, #540]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a86      	ldr	r2, [pc, #536]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e035      	b.n	800186e <HAL_RCC_OscConfig+0x99a>
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x958>
 8001812:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a7f      	ldr	r2, [pc, #508]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	e020      	b.n	800186e <HAL_RCC_OscConfig+0x99a>
 800182c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001830:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x982>
 800183c:	4b75      	ldr	r3, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a71      	ldr	r2, [pc, #452]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x99a>
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a6b      	ldr	r2, [pc, #428]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8081 	beq.w	8001982 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff f894 	bl	80009ac <HAL_GetTick>
 8001884:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f88f 	bl	80009ac <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e365      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 80018a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018e8:	601a      	str	r2, [r3, #0]
  return result;
 80018ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d102      	bne.n	800190e <HAL_RCC_OscConfig+0xa3a>
 8001908:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	e013      	b.n	8001936 <HAL_RCC_OscConfig+0xa62>
 800190e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001912:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800192c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800193a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800193e:	2102      	movs	r1, #2
 8001940:	6011      	str	r1, [r2, #0]
 8001942:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001946:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	fa92 f1a2 	rbit	r1, r2
 8001950:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001954:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001958:	6011      	str	r1, [r2, #0]
  return result;
 800195a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800195e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f002 021f 	and.w	r2, r2, #31
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d084      	beq.n	800188a <HAL_RCC_OscConfig+0x9b6>
 8001980:	e083      	b.n	8001a8a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f813 	bl	80009ac <HAL_GetTick>
 8001986:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f80e 	bl	80009ac <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e2e4      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019ac:	2202      	movs	r2, #2
 80019ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d0:	2202      	movs	r2, #2
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ea:	601a      	str	r2, [r3, #0]
  return result;
 80019ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0xb44>
 8001a0a:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <HAL_RCC_OscConfig+0xb40>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	e017      	b.n	8001a40 <HAL_RCC_OscConfig+0xb6c>
 8001a10:	40007000 	.word	0x40007000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	4bb3      	ldr	r3, [pc, #716]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a48:	2102      	movs	r1, #2
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	fa92 f1a2 	rbit	r1, r2
 8001a5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a5e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a62:	6011      	str	r1, [r2, #0]
  return result;
 8001a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a68:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	fab2 f282 	clz	r2, r2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f002 021f 	and.w	r2, r2, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d180      	bne.n	800198c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b9e      	ldr	r3, [pc, #632]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a9d      	ldr	r2, [pc, #628]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 825e 	beq.w	8001f6c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4b96      	ldr	r3, [pc, #600]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f000 821f 	beq.w	8001efc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	f040 8170 	bne.w	8001db0 <HAL_RCC_OscConfig+0xedc>
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001af4:	601a      	str	r2, [r3, #0]
  return result;
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001afe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	461a      	mov	r2, r3
 8001b12:	2300      	movs	r3, #0
 8001b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe ff49 	bl	80009ac <HAL_GetTick>
 8001b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff44 	bl	80009ac <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e21c      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	fa93 f2a3 	rbit	r2, r3
 8001b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b58:	601a      	str	r2, [r3, #0]
  return result;
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_OscConfig+0xcaa>
 8001b78:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_OscConfig+0xcfa>
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bda:	6011      	str	r1, [r2, #0]
 8001bdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	fa92 f1a2 	rbit	r1, r2
 8001bea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bf2:	6011      	str	r1, [r2, #0]
  return result;
 8001bf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	fab2 f282 	clz	r2, r2
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f042 0220 	orr.w	r2, r2, #32
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	f002 021f 	and.w	r2, r2, #31
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d182      	bne.n	8001b20 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	492d      	ldr	r1, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	fa93 f2a3 	rbit	r2, r3
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c80:	601a      	str	r2, [r3, #0]
  return result;
 8001c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fe83 	bl	80009ac <HAL_GetTick>
 8001ca6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001caa:	e009      	b.n	8001cc0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe fe7e 	bl	80009ac <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e156      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ce4:	601a      	str	r2, [r3, #0]
  return result;
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe3c>
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_OscConfig+0xe38>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	e02a      	b.n	8001d60 <HAL_RCC_OscConfig+0xe8c>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b86      	ldr	r3, [pc, #536]	; (8001f78 <HAL_RCC_OscConfig+0x10a4>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d6c:	6011      	str	r1, [r2, #0]
 8001d6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fa92 f1a2 	rbit	r1, r2
 8001d7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d84:	6011      	str	r1, [r2, #0]
  return result;
 8001d86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f002 021f 	and.w	r2, r2, #31
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f43f af7f 	beq.w	8001cac <HAL_RCC_OscConfig+0xdd8>
 8001dae:	e0dd      	b.n	8001f6c <HAL_RCC_OscConfig+0x1098>
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dde:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	2300      	movs	r3, #0
 8001df4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fdd9 	bl	80009ac <HAL_GetTick>
 8001dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	e009      	b.n	8001e14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fdd4 	bl	80009ac <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ac      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e38:	601a      	str	r2, [r3, #0]
  return result;
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0xf8a>
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x10a4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	e027      	b.n	8001eae <HAL_RCC_OscConfig+0xfda>
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	fa93 f2a3 	rbit	r2, r3
 8001e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x10a4>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eba:	6011      	str	r1, [r2, #0]
 8001ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	fa92 f1a2 	rbit	r1, r2
 8001eca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ece:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ed2:	6011      	str	r1, [r2, #0]
  return result;
 8001ed4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d182      	bne.n	8001e00 <HAL_RCC_OscConfig+0xf2c>
 8001efa:	e037      	b.n	8001f6c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e02e      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_OscConfig+0x10a4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x10a4>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d117      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f3c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f54:	f003 020f 	and.w	r2, r3, #15
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b09e      	sub	sp, #120	; 0x78
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e162      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	498b      	ldr	r1, [pc, #556]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e14a      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	497f      	ldr	r1, [pc, #508]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80dc 	beq.w	80021a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d13c      	bne.n	8002072 <HAL_RCC_ClockConfig+0xf6>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_RCC_ClockConfig+0xa6>
 800201c:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e00f      	b.n	8002042 <HAL_RCC_ClockConfig+0xc6>
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	667b      	str	r3, [r7, #100]	; 0x64
 8002030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002034:	663b      	str	r3, [r7, #96]	; 0x60
 8002036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002046:	65ba      	str	r2, [r7, #88]	; 0x58
 8002048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17b      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0f3      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d13c      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x178>
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x128>
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_ClockConfig+0x148>
 80020a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
 80020b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b2      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00d      	b.n	8002138 <HAL_RCC_ClockConfig+0x1bc>
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	61ba      	str	r2, [r7, #24]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	617a      	str	r2, [r7, #20]
  return result;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e079      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	491a      	ldr	r1, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fc18 	bl	80009ac <HAL_GetTick>
 800217c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fc14 	bl	80009ac <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e061      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d214      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4906      	ldr	r1, [pc, #24]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e040      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4912      	ldr	r1, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221e:	f000 f829 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002222:	4601      	mov	r1, r0
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	22f0      	movs	r2, #240	; 0xf0
 800222e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	60fa      	str	r2, [r7, #12]
  return result;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	40d3      	lsrs	r3, r2
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x2ec>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	fa21 f303 	lsr.w	r3, r1, r3
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_RCC_ClockConfig+0x2f0>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCC_ClockConfig+0x2f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fb66 	bl	8000924 <HAL_InitTick>
  
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3778      	adds	r7, #120	; 0x78
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	0800303c 	.word	0x0800303c
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b08b      	sub	sp, #44	; 0x2c
 8002278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e03f      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e03f      	b.n	800232a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	607a      	str	r2, [r7, #4]
  return result;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	220f      	movs	r2, #15
 80022d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	60fa      	str	r2, [r7, #12]
  return result;
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	40d3      	lsrs	r3, r2
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	fbb2 f2f3 	udiv	r2, r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e007      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fbb2 f2f3 	udiv	r2, r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	623b      	str	r3, [r7, #32]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002326:	623b      	str	r3, [r7, #32]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	6a3b      	ldr	r3, [r7, #32]
}
 800232c:	4618      	mov	r0, r3
 800232e:	372c      	adds	r7, #44	; 0x2c
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	08003054 	.word	0x08003054
 8002344:	08003064 	.word	0x08003064

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002366:	f7ff ffef 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002374:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	0800304c 	.word	0x0800304c

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023aa:	f7ff ffcd 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	0800304c 	.word	0x0800304c

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b092      	sub	sp, #72	; 0x48
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80d4 	beq.w	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10e      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a41      	ldr	r2, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe faad 	bl	80009ac <HAL_GetTick>
 8002452:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe faa9 	bl	80009ac <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1d6      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8084 	beq.w	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002490:	429a      	cmp	r2, r3
 8002492:	d07c      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	461a      	mov	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2300      	movs	r3, #0
 80024e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04b      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fa59 	bl	80009ac <HAL_GetTick>
 80024fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fa55 	bl	80009ac <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e180      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	61fb      	str	r3, [r7, #28]
  return result;
 800252c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d108      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002542:	4b01      	ldr	r3, [pc, #4]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	e00d      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	10908100 	.word	0x10908100
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	4b9a      	ldr	r3, [pc, #616]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	613a      	str	r2, [r7, #16]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	fa92 f2a2 	rbit	r2, r2
 800256e:	60fa      	str	r2, [r7, #12]
  return result;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0b7      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800258e:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	498c      	ldr	r1, [pc, #560]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a87      	ldr	r2, [pc, #540]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c0:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f023 0203 	bic.w	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	497f      	ldr	r1, [pc, #508]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025de:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4978      	ldr	r1, [pc, #480]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fc:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4970      	ldr	r1, [pc, #448]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261a:	4b6c      	ldr	r3, [pc, #432]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f023 0210 	bic.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4969      	ldr	r1, [pc, #420]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002638:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	4961      	ldr	r1, [pc, #388]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f023 0220 	bic.w	r2, r3, #32
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	495a      	ldr	r1, [pc, #360]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002674:	4b55      	ldr	r3, [pc, #340]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	4952      	ldr	r1, [pc, #328]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	494b      	ldr	r1, [pc, #300]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026b0:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4943      	ldr	r1, [pc, #268]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	493c      	ldr	r1, [pc, #240]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	492d      	ldr	r1, [pc, #180]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d008      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	491e      	ldr	r1, [pc, #120]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	490f      	ldr	r1, [pc, #60]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027be:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e002      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	4913      	ldr	r1, [pc, #76]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	490b      	ldr	r1, [pc, #44]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002810:	4313      	orrs	r3, r2
 8002812:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3748      	adds	r7, #72	; 0x48
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e040      	b.n	80028b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fd ff96 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f82c 	bl	80028c0 <UART_SetConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e022      	b.n	80028b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f9f6 	bl	8002c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800288e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800289e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fa7d 	bl	8002db0 <UART_CheckIdleState>
 80028b6:	4603      	mov	r3, r0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <UART_SetConfig+0x274>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <UART_SetConfig+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d120      	bne.n	800297e <UART_SetConfig+0xbe>
 800293c:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <UART_SetConfig+0x27c>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d817      	bhi.n	8002978 <UART_SetConfig+0xb8>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0x90>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002961 	.word	0x08002961
 8002954:	0800296d 	.word	0x0800296d
 8002958:	08002973 	.word	0x08002973
 800295c:	08002967 	.word	0x08002967
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e0b5      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002966:	2302      	movs	r3, #2
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e0b2      	b.n	8002ad2 <UART_SetConfig+0x212>
 800296c:	2304      	movs	r3, #4
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e0af      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002972:	2308      	movs	r3, #8
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e0ac      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002978:	2310      	movs	r3, #16
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e0a9      	b.n	8002ad2 <UART_SetConfig+0x212>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <UART_SetConfig+0x280>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d124      	bne.n	80029d2 <UART_SetConfig+0x112>
 8002988:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <UART_SetConfig+0x27c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002994:	d011      	beq.n	80029ba <UART_SetConfig+0xfa>
 8002996:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800299a:	d817      	bhi.n	80029cc <UART_SetConfig+0x10c>
 800299c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a0:	d011      	beq.n	80029c6 <UART_SetConfig+0x106>
 80029a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a6:	d811      	bhi.n	80029cc <UART_SetConfig+0x10c>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <UART_SetConfig+0xf4>
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d006      	beq.n	80029c0 <UART_SetConfig+0x100>
 80029b2:	e00b      	b.n	80029cc <UART_SetConfig+0x10c>
 80029b4:	2300      	movs	r3, #0
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e08b      	b.n	8002ad2 <UART_SetConfig+0x212>
 80029ba:	2302      	movs	r3, #2
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e088      	b.n	8002ad2 <UART_SetConfig+0x212>
 80029c0:	2304      	movs	r3, #4
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e085      	b.n	8002ad2 <UART_SetConfig+0x212>
 80029c6:	2308      	movs	r3, #8
 80029c8:	77fb      	strb	r3, [r7, #31]
 80029ca:	e082      	b.n	8002ad2 <UART_SetConfig+0x212>
 80029cc:	2310      	movs	r3, #16
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e07f      	b.n	8002ad2 <UART_SetConfig+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5b      	ldr	r2, [pc, #364]	; (8002b44 <UART_SetConfig+0x284>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d124      	bne.n	8002a26 <UART_SetConfig+0x166>
 80029dc:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <UART_SetConfig+0x27c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80029e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029e8:	d011      	beq.n	8002a0e <UART_SetConfig+0x14e>
 80029ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ee:	d817      	bhi.n	8002a20 <UART_SetConfig+0x160>
 80029f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029f4:	d011      	beq.n	8002a1a <UART_SetConfig+0x15a>
 80029f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029fa:	d811      	bhi.n	8002a20 <UART_SetConfig+0x160>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <UART_SetConfig+0x148>
 8002a00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a04:	d006      	beq.n	8002a14 <UART_SetConfig+0x154>
 8002a06:	e00b      	b.n	8002a20 <UART_SetConfig+0x160>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e061      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e05e      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a14:	2304      	movs	r3, #4
 8002a16:	77fb      	strb	r3, [r7, #31]
 8002a18:	e05b      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	77fb      	strb	r3, [r7, #31]
 8002a1e:	e058      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a20:	2310      	movs	r3, #16
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e055      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a47      	ldr	r2, [pc, #284]	; (8002b48 <UART_SetConfig+0x288>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d124      	bne.n	8002a7a <UART_SetConfig+0x1ba>
 8002a30:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <UART_SetConfig+0x27c>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a3c:	d011      	beq.n	8002a62 <UART_SetConfig+0x1a2>
 8002a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a42:	d817      	bhi.n	8002a74 <UART_SetConfig+0x1b4>
 8002a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a48:	d011      	beq.n	8002a6e <UART_SetConfig+0x1ae>
 8002a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4e:	d811      	bhi.n	8002a74 <UART_SetConfig+0x1b4>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <UART_SetConfig+0x19c>
 8002a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a58:	d006      	beq.n	8002a68 <UART_SetConfig+0x1a8>
 8002a5a:	e00b      	b.n	8002a74 <UART_SetConfig+0x1b4>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e037      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a62:	2302      	movs	r3, #2
 8002a64:	77fb      	strb	r3, [r7, #31]
 8002a66:	e034      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e031      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	e02e      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a74:	2310      	movs	r3, #16
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e02b      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <UART_SetConfig+0x28c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d124      	bne.n	8002ace <UART_SetConfig+0x20e>
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <UART_SetConfig+0x27c>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a90:	d011      	beq.n	8002ab6 <UART_SetConfig+0x1f6>
 8002a92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a96:	d817      	bhi.n	8002ac8 <UART_SetConfig+0x208>
 8002a98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a9c:	d011      	beq.n	8002ac2 <UART_SetConfig+0x202>
 8002a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aa2:	d811      	bhi.n	8002ac8 <UART_SetConfig+0x208>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <UART_SetConfig+0x1f0>
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aac:	d006      	beq.n	8002abc <UART_SetConfig+0x1fc>
 8002aae:	e00b      	b.n	8002ac8 <UART_SetConfig+0x208>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e00d      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e00a      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002abc:	2304      	movs	r3, #4
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e007      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002ac2:	2308      	movs	r3, #8
 8002ac4:	77fb      	strb	r3, [r7, #31]
 8002ac6:	e004      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002ac8:	2310      	movs	r3, #16
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e001      	b.n	8002ad2 <UART_SetConfig+0x212>
 8002ace:	2310      	movs	r3, #16
 8002ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ada:	d16c      	bne.n	8002bb6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d838      	bhi.n	8002b54 <UART_SetConfig+0x294>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <UART_SetConfig+0x228>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b15 	.word	0x08002b15
 8002af0:	08002b1d 	.word	0x08002b1d
 8002af4:	08002b55 	.word	0x08002b55
 8002af8:	08002b23 	.word	0x08002b23
 8002afc:	08002b55 	.word	0x08002b55
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002b2b 	.word	0x08002b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f7ff fc28 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8002b10:	61b8      	str	r0, [r7, #24]
        break;
 8002b12:	e024      	b.n	8002b5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff fc46 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8002b18:	61b8      	str	r0, [r7, #24]
        break;
 8002b1a:	e020      	b.n	8002b5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <UART_SetConfig+0x290>)
 8002b1e:	61bb      	str	r3, [r7, #24]
        break;
 8002b20:	e01d      	b.n	8002b5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b22:	f7ff fba7 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002b26:	61b8      	str	r0, [r7, #24]
        break;
 8002b28:	e019      	b.n	8002b5e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	61bb      	str	r3, [r7, #24]
        break;
 8002b30:	e015      	b.n	8002b5e <UART_SetConfig+0x29e>
 8002b32:	bf00      	nop
 8002b34:	efff69f3 	.word	0xefff69f3
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40004400 	.word	0x40004400
 8002b44:	40004800 	.word	0x40004800
 8002b48:	40004c00 	.word	0x40004c00
 8002b4c:	40005000 	.word	0x40005000
 8002b50:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	77bb      	strb	r3, [r7, #30]
        break;
 8002b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d075      	beq.n	8002c50 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	005a      	lsls	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	441a      	add	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	d916      	bls.n	8002bb0 <UART_SetConfig+0x2f0>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d212      	bcs.n	8002bb0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	89fa      	ldrh	r2, [r7, #14]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e04f      	b.n	8002c50 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77bb      	strb	r3, [r7, #30]
 8002bb4:	e04c      	b.n	8002c50 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bb6:	7ffb      	ldrb	r3, [r7, #31]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d828      	bhi.n	8002c0e <UART_SetConfig+0x34e>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <UART_SetConfig+0x304>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002be9 	.word	0x08002be9
 8002bc8:	08002bf1 	.word	0x08002bf1
 8002bcc:	08002bf9 	.word	0x08002bf9
 8002bd0:	08002c0f 	.word	0x08002c0f
 8002bd4:	08002bff 	.word	0x08002bff
 8002bd8:	08002c0f 	.word	0x08002c0f
 8002bdc:	08002c0f 	.word	0x08002c0f
 8002be0:	08002c0f 	.word	0x08002c0f
 8002be4:	08002c07 	.word	0x08002c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be8:	f7ff fbba 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8002bec:	61b8      	str	r0, [r7, #24]
        break;
 8002bee:	e013      	b.n	8002c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fbd8 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	61b8      	str	r0, [r7, #24]
        break;
 8002bf6:	e00f      	b.n	8002c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <UART_SetConfig+0x3a8>)
 8002bfa:	61bb      	str	r3, [r7, #24]
        break;
 8002bfc:	e00c      	b.n	8002c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7ff fb39 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002c02:	61b8      	str	r0, [r7, #24]
        break;
 8002c04:	e008      	b.n	8002c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0a:	61bb      	str	r3, [r7, #24]
        break;
 8002c0c:	e004      	b.n	8002c18 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	77bb      	strb	r3, [r7, #30]
        break;
 8002c16:	bf00      	nop
    }

    if (pclk != 0U)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	085a      	lsrs	r2, r3, #1
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d908      	bls.n	8002c4c <UART_SetConfig+0x38c>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d204      	bcs.n	8002c4c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	e001      	b.n	8002c50 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01a      	beq.n	8002d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6a:	d10a      	bne.n	8002d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dc0:	f7fd fdf4 	bl	80009ac <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d10e      	bne.n	8002df2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f82d 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e023      	b.n	8002e3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d10e      	bne.n	8002e1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f817 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e00d      	b.n	8002e3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b09c      	sub	sp, #112	; 0x70
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	e0a5      	b.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	f000 80a1 	beq.w	8002fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7fd fda5 	bl	80009ac <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d13e      	bne.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e88:	667b      	str	r3, [r7, #100]	; 0x64
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e6      	bne.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3308      	adds	r3, #8
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e5      	bne.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e067      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d04f      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0e:	d147      	bne.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e6      	bne.n	8002f1a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f6c:	623a      	str	r2, [r7, #32]
 8002f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	69f9      	ldr	r1, [r7, #28]
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e010      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	f43f af4a 	beq.w	8002e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3770      	adds	r7, #112	; 0x70
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f000 f820 	bl	8003024 <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	08003074 	.word	0x08003074
 8003008:	08003074 	.word	0x08003074
 800300c:	08003074 	.word	0x08003074
 8003010:	08003078 	.word	0x08003078

08003014 <memset>:
 8003014:	4402      	add	r2, r0
 8003016:	4603      	mov	r3, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <_init>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr

08003030 <_fini>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr
